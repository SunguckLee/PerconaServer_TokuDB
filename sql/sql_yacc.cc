
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 24 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      ((tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_GTID_NEXT_LIST
       || tmp->var == Sys_gtid_next_list_ptr
#endif
       ) ||
       Sys_gtid_purged_ptr == tmp->var))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_cur_instr_trig_field_items.link_in_list(trg_fld,
                                                &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 1026 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     ARCHIVED_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHANGED_PAGE_BITMAPS_SYM = 314,
     CHARSET = 315,
     CHAR_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     CLUSTERING_SYM = 324,
     COALESCE = 325,
     CODE_SYM = 326,
     COLLATE_SYM = 327,
     COLLATION_SYM = 328,
     COLUMNS = 329,
     COLUMN_SYM = 330,
     COLUMN_FORMAT_SYM = 331,
     COLUMN_NAME_SYM = 332,
     COMMENT_SYM = 333,
     COMMITTED_SYM = 334,
     COMMIT_SYM = 335,
     COMPACT_SYM = 336,
     COMPLETION_SYM = 337,
     COMPRESSED_SYM = 338,
     CONCURRENT = 339,
     CONDITION_SYM = 340,
     CONNECTION_SYM = 341,
     CONSISTENT_SYM = 342,
     CONSTRAINT = 343,
     CONSTRAINT_CATALOG_SYM = 344,
     CONSTRAINT_NAME_SYM = 345,
     CONSTRAINT_SCHEMA_SYM = 346,
     CONTAINS_SYM = 347,
     CONTEXT_SYM = 348,
     CONTINUE_SYM = 349,
     CONVERT_SYM = 350,
     COUNT_SYM = 351,
     CPU_SYM = 352,
     CREATE = 353,
     CROSS = 354,
     CUBE_SYM = 355,
     CURDATE = 356,
     CURRENT_SYM = 357,
     CURRENT_USER = 358,
     CURSOR_SYM = 359,
     CURSOR_NAME_SYM = 360,
     CURTIME = 361,
     DATABASE = 362,
     DATABASES = 363,
     DATAFILE_SYM = 364,
     DATA_SYM = 365,
     DATETIME = 366,
     DATE_ADD_INTERVAL = 367,
     DATE_SUB_INTERVAL = 368,
     DATE_SYM = 369,
     DAY_HOUR_SYM = 370,
     DAY_MICROSECOND_SYM = 371,
     DAY_MINUTE_SYM = 372,
     DAY_SECOND_SYM = 373,
     DAY_SYM = 374,
     DEALLOCATE_SYM = 375,
     DECIMAL_NUM = 376,
     DECIMAL_SYM = 377,
     DECLARE_SYM = 378,
     DEFAULT = 379,
     DEFAULT_AUTH_SYM = 380,
     DEFINER_SYM = 381,
     DELAYED_SYM = 382,
     DELAY_KEY_WRITE_SYM = 383,
     DELETE_SYM = 384,
     DESC = 385,
     DESCRIBE = 386,
     DES_KEY_FILE = 387,
     DETERMINISTIC_SYM = 388,
     DIAGNOSTICS_SYM = 389,
     DIRECTORY_SYM = 390,
     DISABLE_SYM = 391,
     DISCARD = 392,
     DISK_SYM = 393,
     DISTINCT = 394,
     DIV_SYM = 395,
     DOUBLE_SYM = 396,
     DO_SYM = 397,
     DROP = 398,
     DUAL_SYM = 399,
     DUMPFILE = 400,
     DUPLICATE_SYM = 401,
     DYNAMIC_SYM = 402,
     EACH_SYM = 403,
     ELSE = 404,
     ELSEIF_SYM = 405,
     ENABLE_SYM = 406,
     ENCLOSED = 407,
     END = 408,
     ENDS_SYM = 409,
     END_OF_INPUT = 410,
     ENGINES_SYM = 411,
     ENGINE_SYM = 412,
     ENUM = 413,
     EQ = 414,
     EQUAL_SYM = 415,
     ERROR_SYM = 416,
     ERRORS = 417,
     ESCAPED = 418,
     ESCAPE_SYM = 419,
     EVENTS_SYM = 420,
     EVENT_SYM = 421,
     EVERY_SYM = 422,
     EXCHANGE_SYM = 423,
     EXECUTE_SYM = 424,
     EXISTS = 425,
     EXIT_SYM = 426,
     EXPANSION_SYM = 427,
     EXPIRE_SYM = 428,
     EXPORT_SYM = 429,
     EXTENDED_SYM = 430,
     EXTENT_SIZE_SYM = 431,
     EXTRACT_SYM = 432,
     FALSE_SYM = 433,
     FAST_SYM = 434,
     FAULTS_SYM = 435,
     FETCH_SYM = 436,
     FILE_SYM = 437,
     FIRST_SYM = 438,
     FIXED_SYM = 439,
     FLOAT_NUM = 440,
     FLOAT_SYM = 441,
     FLUSH_SYM = 442,
     FORCE_SYM = 443,
     FOREIGN = 444,
     FOR_SYM = 445,
     FORMAT_SYM = 446,
     FOUND_SYM = 447,
     FROM = 448,
     FULL = 449,
     FULLTEXT_SYM = 450,
     FUNCTION_SYM = 451,
     GE = 452,
     GENERAL = 453,
     GEOMETRYCOLLECTION = 454,
     GEOMETRY_SYM = 455,
     GET_FORMAT = 456,
     GET_SYM = 457,
     GLOBAL_SYM = 458,
     GRANT = 459,
     GRANTS = 460,
     GROUP_SYM = 461,
     GROUP_CONCAT_SYM = 462,
     GT_SYM = 463,
     HANDLER_SYM = 464,
     HASH_SYM = 465,
     HAVING = 466,
     HELP_SYM = 467,
     HEX_NUM = 468,
     HIGH_PRIORITY = 469,
     HOST_SYM = 470,
     HOSTS_SYM = 471,
     HOUR_MICROSECOND_SYM = 472,
     HOUR_MINUTE_SYM = 473,
     HOUR_SECOND_SYM = 474,
     HOUR_SYM = 475,
     IDENT = 476,
     IDENTIFIED_SYM = 477,
     IDENT_QUOTED = 478,
     IF = 479,
     IGNORE_SYM = 480,
     IGNORE_SERVER_IDS_SYM = 481,
     IMPORT = 482,
     INDEXES = 483,
     INDEX_SYM = 484,
     INDEX_STATS_SYM = 485,
     INFILE = 486,
     INITIAL_SIZE_SYM = 487,
     INNER_SYM = 488,
     INOUT_SYM = 489,
     INSENSITIVE_SYM = 490,
     INSERT = 491,
     INSERT_METHOD = 492,
     INSTALL_SYM = 493,
     INTERVAL_SYM = 494,
     INTO = 495,
     INT_SYM = 496,
     INVOKER_SYM = 497,
     IN_SYM = 498,
     IO_AFTER_GTIDS = 499,
     IO_BEFORE_GTIDS = 500,
     IO_SYM = 501,
     IPC_SYM = 502,
     IS = 503,
     ISOLATION = 504,
     ISSUER_SYM = 505,
     ITERATE_SYM = 506,
     JOIN_SYM = 507,
     KEYS = 508,
     KEY_BLOCK_SIZE = 509,
     KEY_SYM = 510,
     KILL_SYM = 511,
     LANGUAGE_SYM = 512,
     LAST_SYM = 513,
     LE = 514,
     LEADING = 515,
     LEAVES = 516,
     LEAVE_SYM = 517,
     LEFT = 518,
     LESS_SYM = 519,
     LEVEL_SYM = 520,
     LEX_HOSTNAME = 521,
     LIKE = 522,
     LIMIT = 523,
     LINEAR_SYM = 524,
     LINES = 525,
     LINESTRING = 526,
     LIST_SYM = 527,
     LOAD = 528,
     LOCAL_SYM = 529,
     LOCATOR_SYM = 530,
     LOCKS_SYM = 531,
     LOCK_SYM = 532,
     LOGFILE_SYM = 533,
     LOGS_SYM = 534,
     LONGBLOB = 535,
     LONGTEXT = 536,
     LONG_NUM = 537,
     LONG_SYM = 538,
     LOOP_SYM = 539,
     LOW_PRIORITY = 540,
     LT = 541,
     MASTER_AUTO_POSITION_SYM = 542,
     MASTER_BIND_SYM = 543,
     MASTER_CONNECT_RETRY_SYM = 544,
     MASTER_DELAY_SYM = 545,
     MASTER_HOST_SYM = 546,
     MASTER_LOG_FILE_SYM = 547,
     MASTER_LOG_POS_SYM = 548,
     MASTER_PASSWORD_SYM = 549,
     MASTER_PORT_SYM = 550,
     MASTER_RETRY_COUNT_SYM = 551,
     MASTER_SERVER_ID_SYM = 552,
     MASTER_SSL_CAPATH_SYM = 553,
     MASTER_SSL_CA_SYM = 554,
     MASTER_SSL_CERT_SYM = 555,
     MASTER_SSL_CIPHER_SYM = 556,
     MASTER_SSL_CRL_SYM = 557,
     MASTER_SSL_CRLPATH_SYM = 558,
     MASTER_SSL_KEY_SYM = 559,
     MASTER_SSL_SYM = 560,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 561,
     MASTER_SYM = 562,
     MASTER_USER_SYM = 563,
     MASTER_HEARTBEAT_PERIOD_SYM = 564,
     MATCH = 565,
     MAX_CONNECTIONS_PER_HOUR = 566,
     MAX_QUERIES_PER_HOUR = 567,
     MAX_ROWS = 568,
     MAX_SIZE_SYM = 569,
     MAX_SYM = 570,
     MAX_UPDATES_PER_HOUR = 571,
     MAX_USER_CONNECTIONS_SYM = 572,
     MAX_VALUE_SYM = 573,
     MEDIUMBLOB = 574,
     MEDIUMINT = 575,
     MEDIUMTEXT = 576,
     MEDIUM_SYM = 577,
     MEMORY_SYM = 578,
     MERGE_SYM = 579,
     MESSAGE_TEXT_SYM = 580,
     MICROSECOND_SYM = 581,
     MIGRATE_SYM = 582,
     MINUTE_MICROSECOND_SYM = 583,
     MINUTE_SECOND_SYM = 584,
     MINUTE_SYM = 585,
     MIN_ROWS = 586,
     MIN_SYM = 587,
     MODE_SYM = 588,
     MODIFIES_SYM = 589,
     MODIFY_SYM = 590,
     MOD_SYM = 591,
     MONTH_SYM = 592,
     MULTILINESTRING = 593,
     MULTIPOINT = 594,
     MULTIPOLYGON = 595,
     MUTEX_SYM = 596,
     MYSQL_ERRNO_SYM = 597,
     NAMES_SYM = 598,
     NAME_SYM = 599,
     NATIONAL_SYM = 600,
     NATURAL = 601,
     NCHAR_STRING = 602,
     NCHAR_SYM = 603,
     NDBCLUSTER_SYM = 604,
     NE = 605,
     NEG = 606,
     NEW_SYM = 607,
     NEXT_SYM = 608,
     NODEGROUP_SYM = 609,
     NONE_SYM = 610,
     NOT2_SYM = 611,
     NOT_SYM = 612,
     NOW_SYM = 613,
     NO_SYM = 614,
     NO_WAIT_SYM = 615,
     NO_WRITE_TO_BINLOG = 616,
     NULL_SYM = 617,
     NUM = 618,
     NUMBER_SYM = 619,
     NUMERIC_SYM = 620,
     NVARCHAR_SYM = 621,
     OFFSET_SYM = 622,
     OLD_PASSWORD = 623,
     ON = 624,
     ONE_SYM = 625,
     ONLY_SYM = 626,
     OPEN_SYM = 627,
     OPTIMIZE = 628,
     OPTIONS_SYM = 629,
     OPTION = 630,
     OPTIONALLY = 631,
     OR2_SYM = 632,
     ORDER_SYM = 633,
     OR_OR_SYM = 634,
     OR_SYM = 635,
     OUTER = 636,
     OUTFILE = 637,
     OUT_SYM = 638,
     OWNER_SYM = 639,
     PACK_KEYS_SYM = 640,
     PAGE_SYM = 641,
     PARAM_MARKER = 642,
     PARSER_SYM = 643,
     PARTIAL = 644,
     PARTITION_SYM = 645,
     PARTITIONS_SYM = 646,
     PARTITIONING_SYM = 647,
     PASSWORD = 648,
     PHASE_SYM = 649,
     PLUGIN_DIR_SYM = 650,
     PLUGIN_SYM = 651,
     PLUGINS_SYM = 652,
     POINT_SYM = 653,
     POLYGON = 654,
     PORT_SYM = 655,
     POSITION_SYM = 656,
     PRECISION = 657,
     PREPARE_SYM = 658,
     PRESERVE_SYM = 659,
     PREV_SYM = 660,
     PRIMARY_SYM = 661,
     PRIVILEGES = 662,
     PROCEDURE_SYM = 663,
     PROCESS = 664,
     PROCESSLIST_SYM = 665,
     PROFILE_SYM = 666,
     PROFILES_SYM = 667,
     PROXY_SYM = 668,
     PURGE = 669,
     QUARTER_SYM = 670,
     QUERY_SYM = 671,
     QUICK = 672,
     RANGE_SYM = 673,
     READS_SYM = 674,
     READ_ONLY_SYM = 675,
     READ_SYM = 676,
     READ_WRITE_SYM = 677,
     REAL = 678,
     REBUILD_SYM = 679,
     RECOVER_SYM = 680,
     REDOFILE_SYM = 681,
     REDO_BUFFER_SIZE_SYM = 682,
     REDUNDANT_SYM = 683,
     REFERENCES = 684,
     REGEXP = 685,
     RELAY = 686,
     RELAYLOG_SYM = 687,
     RELAY_LOG_FILE_SYM = 688,
     RELAY_LOG_POS_SYM = 689,
     RELAY_THREAD = 690,
     RELEASE_SYM = 691,
     RELOAD = 692,
     REMOVE_SYM = 693,
     RENAME = 694,
     REORGANIZE_SYM = 695,
     REPAIR = 696,
     REPEATABLE_SYM = 697,
     REPEAT_SYM = 698,
     REPLACE = 699,
     REPLICATION = 700,
     REQUIRE_SYM = 701,
     RESET_SYM = 702,
     RESIGNAL_SYM = 703,
     RESOURCES = 704,
     RESTORE_SYM = 705,
     RESTRICT = 706,
     RESUME_SYM = 707,
     RETURNED_SQLSTATE_SYM = 708,
     RETURNS_SYM = 709,
     RETURN_SYM = 710,
     REVERSE_SYM = 711,
     REVOKE = 712,
     RIGHT = 713,
     ROLLBACK_SYM = 714,
     ROLLUP_SYM = 715,
     ROUTINE_SYM = 716,
     ROWS_SYM = 717,
     ROW_FORMAT_SYM = 718,
     ROW_SYM = 719,
     ROW_COUNT_SYM = 720,
     RTREE_SYM = 721,
     SAVEPOINT_SYM = 722,
     SCHEDULE_SYM = 723,
     SCHEMA_NAME_SYM = 724,
     SECOND_MICROSECOND_SYM = 725,
     SECOND_SYM = 726,
     SECURITY_SYM = 727,
     SELECT_SYM = 728,
     SENSITIVE_SYM = 729,
     SEPARATOR_SYM = 730,
     SERIALIZABLE_SYM = 731,
     SERIAL_SYM = 732,
     SESSION_SYM = 733,
     SERVER_SYM = 734,
     SERVER_OPTIONS = 735,
     SET = 736,
     SET_VAR = 737,
     SHARE_SYM = 738,
     SHIFT_LEFT = 739,
     SHIFT_RIGHT = 740,
     SHOW = 741,
     SHUTDOWN = 742,
     SIGNAL_SYM = 743,
     SIGNED_SYM = 744,
     SIMPLE_SYM = 745,
     SLAVE = 746,
     SLOW = 747,
     SMALLINT = 748,
     SNAPSHOT_SYM = 749,
     SOCKET_SYM = 750,
     SONAME_SYM = 751,
     SOUNDS_SYM = 752,
     SOURCE_SYM = 753,
     SPATIAL_SYM = 754,
     SPECIFIC_SYM = 755,
     SQLEXCEPTION_SYM = 756,
     SQLSTATE_SYM = 757,
     SQLWARNING_SYM = 758,
     SQL_AFTER_GTIDS = 759,
     SQL_AFTER_MTS_GAPS = 760,
     SQL_BEFORE_GTIDS = 761,
     SQL_BIG_RESULT = 762,
     SQL_BUFFER_RESULT = 763,
     SQL_CACHE_SYM = 764,
     SQL_CALC_FOUND_ROWS = 765,
     SQL_NO_CACHE_SYM = 766,
     SQL_SMALL_RESULT = 767,
     SQL_SYM = 768,
     SQL_THREAD = 769,
     SSL_SYM = 770,
     STARTING = 771,
     STARTS_SYM = 772,
     START_SYM = 773,
     STATEMENT_SYM = 774,
     STATS_AUTO_RECALC_SYM = 775,
     STATS_PERSISTENT_SYM = 776,
     STATS_SAMPLE_PAGES_SYM = 777,
     STATUS_SYM = 778,
     NOLOCK_SYM = 779,
     NONBLOCKING_SYM = 780,
     STDDEV_SAMP_SYM = 781,
     STD_SYM = 782,
     STOP_SYM = 783,
     STORAGE_SYM = 784,
     STRAIGHT_JOIN = 785,
     STRING_SYM = 786,
     SUBCLASS_ORIGIN_SYM = 787,
     SUBDATE_SYM = 788,
     SUBJECT_SYM = 789,
     SUBPARTITIONS_SYM = 790,
     SUBPARTITION_SYM = 791,
     SUBSTRING = 792,
     SUM_SYM = 793,
     SUPER_SYM = 794,
     SUSPEND_SYM = 795,
     SWAPS_SYM = 796,
     SWITCHES_SYM = 797,
     SYSDATE = 798,
     TABLES = 799,
     TABLESPACE = 800,
     TABLE_REF_PRIORITY = 801,
     TABLE_SYM = 802,
     TABLE_STATS_SYM = 803,
     TABLE_CHECKSUM_SYM = 804,
     TABLE_NAME_SYM = 805,
     TEMPORARY = 806,
     TEMPTABLE_SYM = 807,
     TERMINATED = 808,
     TEXT_STRING = 809,
     TEXT_SYM = 810,
     THAN_SYM = 811,
     THEN_SYM = 812,
     THREAD_STATS_SYM = 813,
     TIMESTAMP = 814,
     TIMESTAMP_ADD = 815,
     TIMESTAMP_DIFF = 816,
     TIME_SYM = 817,
     TINYBLOB = 818,
     TINYINT = 819,
     TINYTEXT = 820,
     TO_SYM = 821,
     TOKU_UNCOMPRESSED_SYM = 822,
     TOKU_ZLIB_SYM = 823,
     TOKU_QUICKLZ_SYM = 824,
     TOKU_LZMA_SYM = 825,
     TOKU_FAST_SYM = 826,
     TOKU_SMALL_SYM = 827,
     TRAILING = 828,
     TRANSACTION_SYM = 829,
     TRIGGERS_SYM = 830,
     TRIGGER_SYM = 831,
     TRIM = 832,
     TRUE_SYM = 833,
     TRUNCATE_SYM = 834,
     TYPES_SYM = 835,
     TYPE_SYM = 836,
     UDF_RETURNS_SYM = 837,
     ULONGLONG_NUM = 838,
     UNCOMMITTED_SYM = 839,
     UNDEFINED_SYM = 840,
     UNDERSCORE_CHARSET = 841,
     UNDOFILE_SYM = 842,
     UNDO_BUFFER_SIZE_SYM = 843,
     UNDO_SYM = 844,
     UNICODE_SYM = 845,
     UNINSTALL_SYM = 846,
     UNION_SYM = 847,
     UNIQUE_SYM = 848,
     UNKNOWN_SYM = 849,
     UNLOCK_SYM = 850,
     UNSIGNED = 851,
     UNTIL_SYM = 852,
     UPDATE_SYM = 853,
     UPGRADE_SYM = 854,
     USAGE = 855,
     USER = 856,
     USER_STATS_SYM = 857,
     USE_FRM = 858,
     USE_SYM = 859,
     USING = 860,
     UTC_DATE_SYM = 861,
     UTC_TIMESTAMP_SYM = 862,
     UTC_TIME_SYM = 863,
     VALUES = 864,
     VALUE_SYM = 865,
     VARBINARY = 866,
     VARCHAR = 867,
     VARIABLES = 868,
     VARIANCE_SYM = 869,
     VARYING = 870,
     VAR_SAMP_SYM = 871,
     VIEW_SYM = 872,
     WAIT_SYM = 873,
     WARNINGS = 874,
     WEEK_SYM = 875,
     WEIGHT_STRING_SYM = 876,
     WHEN_SYM = 877,
     WHERE = 878,
     WHILE_SYM = 879,
     WITH = 880,
     WITH_CUBE_SYM = 881,
     WITH_ROLLUP_SYM = 882,
     WORK_SYM = 883,
     WRAPPER_SYM = 884,
     WRITE_SYM = 885,
     X509_SYM = 886,
     XA_SYM = 887,
     XML_SYM = 888,
     XOR = 889,
     YEAR_MONTH_SYM = 890,
     YEAR_SYM = 891,
     ZEROFILL = 892
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define ARCHIVED_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHANGED_PAGE_BITMAPS_SYM 314
#define CHARSET 315
#define CHAR_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define CLUSTERING_SYM 324
#define COALESCE 325
#define CODE_SYM 326
#define COLLATE_SYM 327
#define COLLATION_SYM 328
#define COLUMNS 329
#define COLUMN_SYM 330
#define COLUMN_FORMAT_SYM 331
#define COLUMN_NAME_SYM 332
#define COMMENT_SYM 333
#define COMMITTED_SYM 334
#define COMMIT_SYM 335
#define COMPACT_SYM 336
#define COMPLETION_SYM 337
#define COMPRESSED_SYM 338
#define CONCURRENT 339
#define CONDITION_SYM 340
#define CONNECTION_SYM 341
#define CONSISTENT_SYM 342
#define CONSTRAINT 343
#define CONSTRAINT_CATALOG_SYM 344
#define CONSTRAINT_NAME_SYM 345
#define CONSTRAINT_SCHEMA_SYM 346
#define CONTAINS_SYM 347
#define CONTEXT_SYM 348
#define CONTINUE_SYM 349
#define CONVERT_SYM 350
#define COUNT_SYM 351
#define CPU_SYM 352
#define CREATE 353
#define CROSS 354
#define CUBE_SYM 355
#define CURDATE 356
#define CURRENT_SYM 357
#define CURRENT_USER 358
#define CURSOR_SYM 359
#define CURSOR_NAME_SYM 360
#define CURTIME 361
#define DATABASE 362
#define DATABASES 363
#define DATAFILE_SYM 364
#define DATA_SYM 365
#define DATETIME 366
#define DATE_ADD_INTERVAL 367
#define DATE_SUB_INTERVAL 368
#define DATE_SYM 369
#define DAY_HOUR_SYM 370
#define DAY_MICROSECOND_SYM 371
#define DAY_MINUTE_SYM 372
#define DAY_SECOND_SYM 373
#define DAY_SYM 374
#define DEALLOCATE_SYM 375
#define DECIMAL_NUM 376
#define DECIMAL_SYM 377
#define DECLARE_SYM 378
#define DEFAULT 379
#define DEFAULT_AUTH_SYM 380
#define DEFINER_SYM 381
#define DELAYED_SYM 382
#define DELAY_KEY_WRITE_SYM 383
#define DELETE_SYM 384
#define DESC 385
#define DESCRIBE 386
#define DES_KEY_FILE 387
#define DETERMINISTIC_SYM 388
#define DIAGNOSTICS_SYM 389
#define DIRECTORY_SYM 390
#define DISABLE_SYM 391
#define DISCARD 392
#define DISK_SYM 393
#define DISTINCT 394
#define DIV_SYM 395
#define DOUBLE_SYM 396
#define DO_SYM 397
#define DROP 398
#define DUAL_SYM 399
#define DUMPFILE 400
#define DUPLICATE_SYM 401
#define DYNAMIC_SYM 402
#define EACH_SYM 403
#define ELSE 404
#define ELSEIF_SYM 405
#define ENABLE_SYM 406
#define ENCLOSED 407
#define END 408
#define ENDS_SYM 409
#define END_OF_INPUT 410
#define ENGINES_SYM 411
#define ENGINE_SYM 412
#define ENUM 413
#define EQ 414
#define EQUAL_SYM 415
#define ERROR_SYM 416
#define ERRORS 417
#define ESCAPED 418
#define ESCAPE_SYM 419
#define EVENTS_SYM 420
#define EVENT_SYM 421
#define EVERY_SYM 422
#define EXCHANGE_SYM 423
#define EXECUTE_SYM 424
#define EXISTS 425
#define EXIT_SYM 426
#define EXPANSION_SYM 427
#define EXPIRE_SYM 428
#define EXPORT_SYM 429
#define EXTENDED_SYM 430
#define EXTENT_SIZE_SYM 431
#define EXTRACT_SYM 432
#define FALSE_SYM 433
#define FAST_SYM 434
#define FAULTS_SYM 435
#define FETCH_SYM 436
#define FILE_SYM 437
#define FIRST_SYM 438
#define FIXED_SYM 439
#define FLOAT_NUM 440
#define FLOAT_SYM 441
#define FLUSH_SYM 442
#define FORCE_SYM 443
#define FOREIGN 444
#define FOR_SYM 445
#define FORMAT_SYM 446
#define FOUND_SYM 447
#define FROM 448
#define FULL 449
#define FULLTEXT_SYM 450
#define FUNCTION_SYM 451
#define GE 452
#define GENERAL 453
#define GEOMETRYCOLLECTION 454
#define GEOMETRY_SYM 455
#define GET_FORMAT 456
#define GET_SYM 457
#define GLOBAL_SYM 458
#define GRANT 459
#define GRANTS 460
#define GROUP_SYM 461
#define GROUP_CONCAT_SYM 462
#define GT_SYM 463
#define HANDLER_SYM 464
#define HASH_SYM 465
#define HAVING 466
#define HELP_SYM 467
#define HEX_NUM 468
#define HIGH_PRIORITY 469
#define HOST_SYM 470
#define HOSTS_SYM 471
#define HOUR_MICROSECOND_SYM 472
#define HOUR_MINUTE_SYM 473
#define HOUR_SECOND_SYM 474
#define HOUR_SYM 475
#define IDENT 476
#define IDENTIFIED_SYM 477
#define IDENT_QUOTED 478
#define IF 479
#define IGNORE_SYM 480
#define IGNORE_SERVER_IDS_SYM 481
#define IMPORT 482
#define INDEXES 483
#define INDEX_SYM 484
#define INDEX_STATS_SYM 485
#define INFILE 486
#define INITIAL_SIZE_SYM 487
#define INNER_SYM 488
#define INOUT_SYM 489
#define INSENSITIVE_SYM 490
#define INSERT 491
#define INSERT_METHOD 492
#define INSTALL_SYM 493
#define INTERVAL_SYM 494
#define INTO 495
#define INT_SYM 496
#define INVOKER_SYM 497
#define IN_SYM 498
#define IO_AFTER_GTIDS 499
#define IO_BEFORE_GTIDS 500
#define IO_SYM 501
#define IPC_SYM 502
#define IS 503
#define ISOLATION 504
#define ISSUER_SYM 505
#define ITERATE_SYM 506
#define JOIN_SYM 507
#define KEYS 508
#define KEY_BLOCK_SIZE 509
#define KEY_SYM 510
#define KILL_SYM 511
#define LANGUAGE_SYM 512
#define LAST_SYM 513
#define LE 514
#define LEADING 515
#define LEAVES 516
#define LEAVE_SYM 517
#define LEFT 518
#define LESS_SYM 519
#define LEVEL_SYM 520
#define LEX_HOSTNAME 521
#define LIKE 522
#define LIMIT 523
#define LINEAR_SYM 524
#define LINES 525
#define LINESTRING 526
#define LIST_SYM 527
#define LOAD 528
#define LOCAL_SYM 529
#define LOCATOR_SYM 530
#define LOCKS_SYM 531
#define LOCK_SYM 532
#define LOGFILE_SYM 533
#define LOGS_SYM 534
#define LONGBLOB 535
#define LONGTEXT 536
#define LONG_NUM 537
#define LONG_SYM 538
#define LOOP_SYM 539
#define LOW_PRIORITY 540
#define LT 541
#define MASTER_AUTO_POSITION_SYM 542
#define MASTER_BIND_SYM 543
#define MASTER_CONNECT_RETRY_SYM 544
#define MASTER_DELAY_SYM 545
#define MASTER_HOST_SYM 546
#define MASTER_LOG_FILE_SYM 547
#define MASTER_LOG_POS_SYM 548
#define MASTER_PASSWORD_SYM 549
#define MASTER_PORT_SYM 550
#define MASTER_RETRY_COUNT_SYM 551
#define MASTER_SERVER_ID_SYM 552
#define MASTER_SSL_CAPATH_SYM 553
#define MASTER_SSL_CA_SYM 554
#define MASTER_SSL_CERT_SYM 555
#define MASTER_SSL_CIPHER_SYM 556
#define MASTER_SSL_CRL_SYM 557
#define MASTER_SSL_CRLPATH_SYM 558
#define MASTER_SSL_KEY_SYM 559
#define MASTER_SSL_SYM 560
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 561
#define MASTER_SYM 562
#define MASTER_USER_SYM 563
#define MASTER_HEARTBEAT_PERIOD_SYM 564
#define MATCH 565
#define MAX_CONNECTIONS_PER_HOUR 566
#define MAX_QUERIES_PER_HOUR 567
#define MAX_ROWS 568
#define MAX_SIZE_SYM 569
#define MAX_SYM 570
#define MAX_UPDATES_PER_HOUR 571
#define MAX_USER_CONNECTIONS_SYM 572
#define MAX_VALUE_SYM 573
#define MEDIUMBLOB 574
#define MEDIUMINT 575
#define MEDIUMTEXT 576
#define MEDIUM_SYM 577
#define MEMORY_SYM 578
#define MERGE_SYM 579
#define MESSAGE_TEXT_SYM 580
#define MICROSECOND_SYM 581
#define MIGRATE_SYM 582
#define MINUTE_MICROSECOND_SYM 583
#define MINUTE_SECOND_SYM 584
#define MINUTE_SYM 585
#define MIN_ROWS 586
#define MIN_SYM 587
#define MODE_SYM 588
#define MODIFIES_SYM 589
#define MODIFY_SYM 590
#define MOD_SYM 591
#define MONTH_SYM 592
#define MULTILINESTRING 593
#define MULTIPOINT 594
#define MULTIPOLYGON 595
#define MUTEX_SYM 596
#define MYSQL_ERRNO_SYM 597
#define NAMES_SYM 598
#define NAME_SYM 599
#define NATIONAL_SYM 600
#define NATURAL 601
#define NCHAR_STRING 602
#define NCHAR_SYM 603
#define NDBCLUSTER_SYM 604
#define NE 605
#define NEG 606
#define NEW_SYM 607
#define NEXT_SYM 608
#define NODEGROUP_SYM 609
#define NONE_SYM 610
#define NOT2_SYM 611
#define NOT_SYM 612
#define NOW_SYM 613
#define NO_SYM 614
#define NO_WAIT_SYM 615
#define NO_WRITE_TO_BINLOG 616
#define NULL_SYM 617
#define NUM 618
#define NUMBER_SYM 619
#define NUMERIC_SYM 620
#define NVARCHAR_SYM 621
#define OFFSET_SYM 622
#define OLD_PASSWORD 623
#define ON 624
#define ONE_SYM 625
#define ONLY_SYM 626
#define OPEN_SYM 627
#define OPTIMIZE 628
#define OPTIONS_SYM 629
#define OPTION 630
#define OPTIONALLY 631
#define OR2_SYM 632
#define ORDER_SYM 633
#define OR_OR_SYM 634
#define OR_SYM 635
#define OUTER 636
#define OUTFILE 637
#define OUT_SYM 638
#define OWNER_SYM 639
#define PACK_KEYS_SYM 640
#define PAGE_SYM 641
#define PARAM_MARKER 642
#define PARSER_SYM 643
#define PARTIAL 644
#define PARTITION_SYM 645
#define PARTITIONS_SYM 646
#define PARTITIONING_SYM 647
#define PASSWORD 648
#define PHASE_SYM 649
#define PLUGIN_DIR_SYM 650
#define PLUGIN_SYM 651
#define PLUGINS_SYM 652
#define POINT_SYM 653
#define POLYGON 654
#define PORT_SYM 655
#define POSITION_SYM 656
#define PRECISION 657
#define PREPARE_SYM 658
#define PRESERVE_SYM 659
#define PREV_SYM 660
#define PRIMARY_SYM 661
#define PRIVILEGES 662
#define PROCEDURE_SYM 663
#define PROCESS 664
#define PROCESSLIST_SYM 665
#define PROFILE_SYM 666
#define PROFILES_SYM 667
#define PROXY_SYM 668
#define PURGE 669
#define QUARTER_SYM 670
#define QUERY_SYM 671
#define QUICK 672
#define RANGE_SYM 673
#define READS_SYM 674
#define READ_ONLY_SYM 675
#define READ_SYM 676
#define READ_WRITE_SYM 677
#define REAL 678
#define REBUILD_SYM 679
#define RECOVER_SYM 680
#define REDOFILE_SYM 681
#define REDO_BUFFER_SIZE_SYM 682
#define REDUNDANT_SYM 683
#define REFERENCES 684
#define REGEXP 685
#define RELAY 686
#define RELAYLOG_SYM 687
#define RELAY_LOG_FILE_SYM 688
#define RELAY_LOG_POS_SYM 689
#define RELAY_THREAD 690
#define RELEASE_SYM 691
#define RELOAD 692
#define REMOVE_SYM 693
#define RENAME 694
#define REORGANIZE_SYM 695
#define REPAIR 696
#define REPEATABLE_SYM 697
#define REPEAT_SYM 698
#define REPLACE 699
#define REPLICATION 700
#define REQUIRE_SYM 701
#define RESET_SYM 702
#define RESIGNAL_SYM 703
#define RESOURCES 704
#define RESTORE_SYM 705
#define RESTRICT 706
#define RESUME_SYM 707
#define RETURNED_SQLSTATE_SYM 708
#define RETURNS_SYM 709
#define RETURN_SYM 710
#define REVERSE_SYM 711
#define REVOKE 712
#define RIGHT 713
#define ROLLBACK_SYM 714
#define ROLLUP_SYM 715
#define ROUTINE_SYM 716
#define ROWS_SYM 717
#define ROW_FORMAT_SYM 718
#define ROW_SYM 719
#define ROW_COUNT_SYM 720
#define RTREE_SYM 721
#define SAVEPOINT_SYM 722
#define SCHEDULE_SYM 723
#define SCHEMA_NAME_SYM 724
#define SECOND_MICROSECOND_SYM 725
#define SECOND_SYM 726
#define SECURITY_SYM 727
#define SELECT_SYM 728
#define SENSITIVE_SYM 729
#define SEPARATOR_SYM 730
#define SERIALIZABLE_SYM 731
#define SERIAL_SYM 732
#define SESSION_SYM 733
#define SERVER_SYM 734
#define SERVER_OPTIONS 735
#define SET 736
#define SET_VAR 737
#define SHARE_SYM 738
#define SHIFT_LEFT 739
#define SHIFT_RIGHT 740
#define SHOW 741
#define SHUTDOWN 742
#define SIGNAL_SYM 743
#define SIGNED_SYM 744
#define SIMPLE_SYM 745
#define SLAVE 746
#define SLOW 747
#define SMALLINT 748
#define SNAPSHOT_SYM 749
#define SOCKET_SYM 750
#define SONAME_SYM 751
#define SOUNDS_SYM 752
#define SOURCE_SYM 753
#define SPATIAL_SYM 754
#define SPECIFIC_SYM 755
#define SQLEXCEPTION_SYM 756
#define SQLSTATE_SYM 757
#define SQLWARNING_SYM 758
#define SQL_AFTER_GTIDS 759
#define SQL_AFTER_MTS_GAPS 760
#define SQL_BEFORE_GTIDS 761
#define SQL_BIG_RESULT 762
#define SQL_BUFFER_RESULT 763
#define SQL_CACHE_SYM 764
#define SQL_CALC_FOUND_ROWS 765
#define SQL_NO_CACHE_SYM 766
#define SQL_SMALL_RESULT 767
#define SQL_SYM 768
#define SQL_THREAD 769
#define SSL_SYM 770
#define STARTING 771
#define STARTS_SYM 772
#define START_SYM 773
#define STATEMENT_SYM 774
#define STATS_AUTO_RECALC_SYM 775
#define STATS_PERSISTENT_SYM 776
#define STATS_SAMPLE_PAGES_SYM 777
#define STATUS_SYM 778
#define NOLOCK_SYM 779
#define NONBLOCKING_SYM 780
#define STDDEV_SAMP_SYM 781
#define STD_SYM 782
#define STOP_SYM 783
#define STORAGE_SYM 784
#define STRAIGHT_JOIN 785
#define STRING_SYM 786
#define SUBCLASS_ORIGIN_SYM 787
#define SUBDATE_SYM 788
#define SUBJECT_SYM 789
#define SUBPARTITIONS_SYM 790
#define SUBPARTITION_SYM 791
#define SUBSTRING 792
#define SUM_SYM 793
#define SUPER_SYM 794
#define SUSPEND_SYM 795
#define SWAPS_SYM 796
#define SWITCHES_SYM 797
#define SYSDATE 798
#define TABLES 799
#define TABLESPACE 800
#define TABLE_REF_PRIORITY 801
#define TABLE_SYM 802
#define TABLE_STATS_SYM 803
#define TABLE_CHECKSUM_SYM 804
#define TABLE_NAME_SYM 805
#define TEMPORARY 806
#define TEMPTABLE_SYM 807
#define TERMINATED 808
#define TEXT_STRING 809
#define TEXT_SYM 810
#define THAN_SYM 811
#define THEN_SYM 812
#define THREAD_STATS_SYM 813
#define TIMESTAMP 814
#define TIMESTAMP_ADD 815
#define TIMESTAMP_DIFF 816
#define TIME_SYM 817
#define TINYBLOB 818
#define TINYINT 819
#define TINYTEXT 820
#define TO_SYM 821
#define TOKU_UNCOMPRESSED_SYM 822
#define TOKU_ZLIB_SYM 823
#define TOKU_QUICKLZ_SYM 824
#define TOKU_LZMA_SYM 825
#define TOKU_FAST_SYM 826
#define TOKU_SMALL_SYM 827
#define TRAILING 828
#define TRANSACTION_SYM 829
#define TRIGGERS_SYM 830
#define TRIGGER_SYM 831
#define TRIM 832
#define TRUE_SYM 833
#define TRUNCATE_SYM 834
#define TYPES_SYM 835
#define TYPE_SYM 836
#define UDF_RETURNS_SYM 837
#define ULONGLONG_NUM 838
#define UNCOMMITTED_SYM 839
#define UNDEFINED_SYM 840
#define UNDERSCORE_CHARSET 841
#define UNDOFILE_SYM 842
#define UNDO_BUFFER_SIZE_SYM 843
#define UNDO_SYM 844
#define UNICODE_SYM 845
#define UNINSTALL_SYM 846
#define UNION_SYM 847
#define UNIQUE_SYM 848
#define UNKNOWN_SYM 849
#define UNLOCK_SYM 850
#define UNSIGNED 851
#define UNTIL_SYM 852
#define UPDATE_SYM 853
#define UPGRADE_SYM 854
#define USAGE 855
#define USER 856
#define USER_STATS_SYM 857
#define USE_FRM 858
#define USE_SYM 859
#define USING 860
#define UTC_DATE_SYM 861
#define UTC_TIMESTAMP_SYM 862
#define UTC_TIME_SYM 863
#define VALUES 864
#define VALUE_SYM 865
#define VARBINARY 866
#define VARCHAR 867
#define VARIABLES 868
#define VARIANCE_SYM 869
#define VARYING 870
#define VAR_SAMP_SYM 871
#define VIEW_SYM 872
#define WAIT_SYM 873
#define WARNINGS 874
#define WEEK_SYM 875
#define WEIGHT_STRING_SYM 876
#define WHEN_SYM 877
#define WHERE 878
#define WHILE_SYM 879
#define WITH 880
#define WITH_CUBE_SYM 881
#define WITH_ROLLUP_SYM 882
#define WORK_SYM 883
#define WRAPPER_SYM 884
#define WRITE_SYM 885
#define X509_SYM 886
#define XA_SYM 887
#define XML_SYM 888
#define XOR 889
#define YEAR_MONTH_SYM 890
#define YEAR_SYM 891
#define ZEROFILL 892




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 967 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2396 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 1025 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2413 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  622
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   57467

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  657
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  960
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2724
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4605

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   892

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   650,     2,     2,     2,   644,   639,     2,
     647,   648,   642,   641,   649,   640,   655,   643,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   656,   653,
       2,     2,     2,     2,   654,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   645,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   651,   638,   652,   646,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   129,   131,   133,   138,   140,   143,   144,
     149,   150,   153,   157,   159,   162,   163,   167,   168,   174,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   224,   228,   232,   236,   240,   244,   248,   252,
     258,   262,   264,   265,   267,   271,   273,   277,   281,   285,
     289,   290,   298,   299,   300,   315,   316,   317,   332,   333,
     334,   349,   350,   357,   358,   362,   367,   372,   376,   379,
     390,   392,   396,   399,   402,   405,   408,   411,   414,   417,
     418,   432,   433,   440,   443,   444,   446,   450,   452,   453,
     456,   457,   460,   461,   463,   467,   472,   473,   476,   477,
     480,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   507,   511,   513,   514,   517,   518,
     521,   524,   527,   530,   533,   537,   541,   543,   545,   547,
     550,   554,   558,   559,   564,   565,   569,   570,   572,   576,
     578,   579,   581,   585,   587,   588,   592,   593,   595,   599,
     601,   606,   607,   609,   611,   613,   614,   618,   621,   625,
     626,   630,   631,   637,   643,   644,   652,   653,   660,   662,
     664,   666,   670,   672,   674,   676,   680,   681,   683,   685,
     687,   689,   692,   694,   698,   700,   702,   703,   705,   706,
     709,   713,   719,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   753,   758,
     759,   761,   763,   767,   769,   773,   777,   779,   782,   784,
     786,   788,   790,   794,   798,   800,   802,   804,   806,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   830,
     831,   832,   836,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   863,   869,   870,   873,
     874,   878,   879,   882,   885,   888,   891,   892,   899,   902,
     903,   906,   908,   910,   914,   915,   916,   917,   925,   926,
     929,   932,   934,   936,   937,   938,   947,   948,   955,   957,
     960,   962,   965,   966,   967,   974,   975,   976,   983,   984,
     987,   988,   994,   995,   997,   998,  1004,  1005,  1008,  1009,
    1015,  1020,  1021,  1022,  1031,  1032,  1033,  1042,  1044,  1046,
    1048,  1050,  1052,  1055,  1060,  1066,  1067,  1072,  1077,  1082,
    1086,  1090,  1093,  1096,  1097,  1100,  1102,  1105,  1109,  1111,
    1113,  1115,  1116,  1118,  1120,  1123,  1127,  1129,  1131,  1133,
    1135,  1137,  1139,  1141,  1143,  1144,  1146,  1148,  1151,  1155,
    1157,  1159,  1161,  1163,  1165,  1166,  1168,  1170,  1173,  1177,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1192,  1194,  1196,
    1199,  1203,  1205,  1207,  1209,  1212,  1215,  1218,  1220,  1222,
    1224,  1226,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,
    1261,  1266,  1268,  1270,  1272,  1274,  1277,  1281,  1284,  1289,
    1295,  1296,  1302,  1303,  1304,  1310,  1311,  1319,  1321,  1322,
    1324,  1325,  1330,  1331,  1332,  1336,  1342,  1349,  1350,  1355,
    1358,  1361,  1364,  1367,  1368,  1370,  1371,  1375,  1376,  1378,
    1380,  1384,  1386,  1391,  1397,  1403,  1404,  1407,  1408,  1409,
    1417,  1418,  1429,  1431,  1435,  1437,  1439,  1440,  1443,  1444,
    1448,  1450,  1454,  1455,  1462,  1464,  1465,  1466,  1472,  1473,
    1478,  1480,  1482,  1484,  1488,  1490,  1494,  1495,  1496,  1502,
    1504,  1508,  1510,  1512,  1513,  1517,  1519,  1523,  1524,  1529,
    1531,  1532,  1534,  1537,  1539,  1543,  1548,  1552,  1556,  1560,
    1565,  1570,  1574,  1575,  1576,  1583,  1584,  1586,  1587,  1589,
    1591,  1594,  1596,  1598,  1599,  1601,  1603,  1606,  1608,  1609,
    1613,  1614,  1616,  1618,  1621,  1623,  1626,  1630,  1634,  1638,
    1642,  1646,  1650,  1654,  1658,  1662,  1666,  1670,  1674,  1678,
    1682,  1686,  1690,  1694,  1698,  1702,  1706,  1707,  1714,  1716,
    1718,  1722,  1727,  1732,  1735,  1738,  1741,  1745,  1749,  1754,
    1759,  1761,  1763,  1765,  1767,  1769,  1771,  1773,  1775,  1777,
    1779,  1781,  1783,  1785,  1787,  1789,  1791,  1793,  1795,  1798,
    1800,  1802,  1804,  1806,  1808,  1810,  1814,  1816,  1818,  1821,
    1824,  1832,  1841,  1850,  1859,  1868,  1871,  1872,  1874,  1879,
    1880,  1882,  1885,  1886,  1891,  1895,  1899,  1903,  1905,  1908,
    1910,  1912,  1916,  1919,  1923,  1926,  1929,  1931,  1935,  1939,
    1942,  1946,  1948,  1951,  1954,  1957,  1959,  1962,  1964,  1966,
    1968,  1971,  1975,  1978,  1982,  1985,  1988,  1992,  1996,  2000,
    2001,  2008,  2009,  2016,  2019,  2021,  2023,  2025,  2027,  2029,
    2031,  2033,  2035,  2037,  2039,  2041,  2044,  2047,  2049,  2052,
    2054,  2057,  2061,  2064,  2066,  2068,  2070,  2072,  2074,  2076,
    2078,  2081,  2082,  2084,  2086,  2092,  2093,  2097,  2098,  2101,
    2105,  2106,  2108,  2111,  2113,  2115,  2117,  2119,  2123,  2127,
    2131,  2135,  2136,  2138,  2139,  2141,  2142,  2144,  2147,  2149,
    2151,  2154,  2157,  2161,  2163,  2167,  2170,  2172,  2175,  2178,
    2181,  2184,  2187,  2190,  2193,  2196,  2199,  2202,  2205,  2207,
    2209,  2212,  2214,  2216,  2218,  2220,  2222,  2223,  2226,  2228,
    2230,  2232,  2234,  2236,  2237,  2240,  2242,  2244,  2245,  2247,
    2249,  2252,  2255,  2257,  2260,  2263,  2264,  2266,  2268,  2270,
    2274,  2276,  2280,  2281,  2283,  2284,  2289,  2291,  2293,  2295,
    2296,  2298,  2301,  2303,  2305,  2308,  2310,  2314,  2318,  2320,
    2322,  2323,  2326,  2327,  2329,  2335,  2336,  2340,  2344,  2346,
    2347,  2350,  2353,  2356,  2357,  2361,  2365,  2372,  2379,  2381,
    2383,  2386,  2389,  2392,  2394,  2397,  2400,  2402,  2404,  2405,
    2407,  2409,  2411,  2413,  2414,  2416,  2418,  2420,  2422,  2425,
    2428,  2430,  2432,  2434,  2436,  2437,  2439,  2442,  2443,  2445,
    2446,  2448,  2449,  2451,  2453,  2456,  2458,  2461,  2463,  2466,
    2469,  2472,  2476,  2479,  2481,  2483,  2485,  2487,  2491,  2493,
    2495,  2497,  2502,  2505,  2507,  2512,  2513,  2515,  2516,  2519,
    2521,  2525,  2526,  2533,  2534,  2540,  2548,  2549,  2555,  2556,
    2562,  2563,  2569,  2570,  2575,  2576,  2587,  2591,  2596,  2600,
    2604,  2612,  2617,  2621,  2627,  2628,  2632,  2634,  2639,  2640,
    2644,  2645,  2648,  2649,  2651,  2652,  2655,  2658,  2661,  2664,
    2666,  2668,  2670,  2674,  2679,  2680,  2687,  2692,  2693,  2699,
    2700,  2707,  2712,  2716,  2718,  2726,  2730,  2732,  2734,  2735,
    2741,  2742,  2746,  2749,  2750,  2756,  2757,  2758,  2765,  2767,
    2771,  2773,  2775,  2779,  2782,  2786,  2789,  2794,  2795,  2802,
    2803,  2804,  2813,  2818,  2823,  2827,  2831,  2834,  2837,  2844,
    2850,  2854,  2860,  2862,  2864,  2866,  2868,  2870,  2871,  2873,
    2875,  2878,  2881,  2885,  2889,  2893,  2897,  2898,  2900,  2901,
    2903,  2904,  2906,  2908,  2909,  2912,  2914,  2915,  2917,  2919,
    2921,  2922,  2929,  2933,  2937,  2938,  2940,  2942,  2946,  2950,
    2957,  2960,  2963,  2968,  2969,  2973,  2974,  2978,  2979,  2983,
    2984,  2988,  2989,  2991,  2993,  2997,  2999,  3001,  3002,  3005,
    3007,  3011,  3015,  3019,  3021,  3022,  3028,  3029,  3031,  3033,
    3034,  3041,  3042,  3044,  3046,  3049,  3051,  3053,  3055,  3056,
    3062,  3065,  3066,  3072,  3073,  3075,  3077,  3080,  3082,  3084,
    3086,  3088,  3090,  3093,  3094,  3100,  3101,  3103,  3105,  3106,
    3111,  3116,  3120,  3126,  3128,  3132,  3136,  3137,  3144,  3146,
    3148,  3150,  3154,  3157,  3161,  3163,  3165,  3166,  3173,  3175,
    3177,  3179,  3183,  3187,  3192,  3193,  3200,  3201,  3204,  3205,
    3210,  3211,  3214,  3216,  3219,  3224,  3227,  3231,  3234,  3238,
    3239,  3243,  3244,  3245,  3252,  3255,  3257,  3259,  3262,  3265,
    3274,  3279,  3280,  3282,  3285,  3287,  3289,  3291,  3293,  3294,
    3297,  3302,  3306,  3308,  3310,  3314,  3319,  3320,  3321,  3322,
    3325,  3328,  3330,  3332,  3333,  3336,  3340,  3344,  3348,  3351,
    3355,  3360,  3364,  3369,  3373,  3378,  3380,  3384,  3389,  3393,
    3397,  3404,  3406,  3412,  3419,  3425,  3433,  3440,  3449,  3455,
    3462,  3467,  3472,  3478,  3482,  3487,  3489,  3493,  3497,  3501,
    3505,  3509,  3513,  3519,  3525,  3529,  3533,  3537,  3541,  3545,
    3549,  3551,  3553,  3555,  3557,  3559,  3561,  3563,  3565,  3567,
    3569,  3571,  3573,  3575,  3577,  3579,  3581,  3583,  3585,  3587,
    3589,  3591,  3593,  3597,  3599,  3601,  3603,  3605,  3609,  3612,
    3615,  3618,  3621,  3625,  3629,  3635,  3642,  3647,  3652,  3660,
    3663,  3670,  3676,  3683,  3690,  3695,  3700,  3706,  3711,  3718,
    3721,  3726,  3731,  3736,  3747,  3754,  3763,  3770,  3775,  3780,
    3787,  3792,  3797,  3802,  3809,  3814,  3822,  3830,  3838,  3845,
    3852,  3859,  3866,  3870,  3875,  3882,  3891,  3894,  3897,  3906,
    3915,  3922,  3929,  3931,  3938,  3945,  3954,  3963,  3970,  3979,
    3986,  3989,  3998,  4007,  4010,  4013,  4016,  4021,  4026,  4031,
    4036,  4040,  4049,  4056,  4065,  4070,  4077,  4082,  4087,  4092,
    4099,  4108,  4113,  4117,  4124,  4129,  4136,  4142,  4151,  4159,
    4170,  4172,  4179,  4184,  4189,  4194,  4199,  4204,  4211,  4216,
    4217,  4223,  4230,  4233,  4237,  4238,  4243,  4244,  4248,  4249,
    4251,  4253,  4257,  4262,  4267,  4273,  4278,  4283,  4288,  4294,
    4299,  4300,  4301,  4309,  4314,  4320,  4325,  4331,  4336,  4341,
    4346,  4351,  4356,  4362,  4363,  4372,  4373,  4377,  4381,  4383,
    4388,  4389,  4391,  4392,  4395,  4396,  4397,  4402,  4407,  4410,
    4411,  4415,  4418,  4422,  4425,  4427,  4430,  4432,  4435,  4437,
    4440,  4443,  4446,  4447,  4449,  4451,  4455,  4457,  4461,  4463,
    4467,  4468,  4470,  4471,  4474,  4479,  4485,  4487,  4489,  4491,
    4493,  4498,  4500,  4504,  4508,  4512,  4513,  4520,  4521,  4528,
    4529,  4538,  4543,  4544,  4553,  4554,  4565,  4572,  4573,  4582,
    4583,  4594,  4601,  4603,  4606,  4609,  4610,  4612,  4618,  4619,
    4625,  4629,  4635,  4638,  4639,  4640,  4648,  4650,  4651,  4652,
    4659,  4660,  4664,  4665,  4666,  4672,  4673,  4675,  4676,  4678,
    4679,  4682,  4686,  4690,  4692,  4694,  4695,  4703,  4704,  4712,
    4714,  4717,  4718,  4719,  4722,  4723,  4726,  4727,  4729,  4731,
    4733,  4735,  4739,  4741,  4745,  4747,  4749,  4751,  4753,  4755,
    4757,  4759,  4761,  4763,  4765,  4767,  4769,  4771,  4773,  4775,
    4777,  4779,  4781,  4783,  4785,  4787,  4789,  4791,  4793,  4795,
    4796,  4798,  4800,  4801,  4804,  4805,  4807,  4808,  4809,  4813,
    4814,  4815,  4819,  4822,  4823,  4824,  4829,  4834,  4837,  4838,
    4840,  4842,  4846,  4850,  4852,  4855,  4856,  4858,  4859,  4864,
    4869,  4872,  4873,  4875,  4877,  4878,  4880,  4881,  4883,  4886,
    4888,  4892,  4896,  4898,  4900,  4902,  4904,  4906,  4907,  4910,
    4912,  4914,  4916,  4918,  4920,  4922,  4924,  4926,  4928,  4930,
    4932,  4934,  4936,  4938,  4940,  4942,  4944,  4946,  4948,  4950,
    4952,  4954,  4956,  4957,  4958,  4965,  4966,  4968,  4972,  4974,
    4975,  4978,  4982,  4984,  4987,  4989,  4990,  4994,  4995,  4996,
    5004,  5007,  5009,  5010,  5014,  5015,  5023,  5024,  5025,  5034,
    5039,  5046,  5051,  5056,  5061,  5062,  5069,  5074,  5079,  5084,
    5090,  5095,  5097,  5101,  5103,  5106,  5108,  5112,  5114,  5115,
    5118,  5119,  5121,  5122,  5124,  5126,  5129,  5133,  5135,  5137,
    5138,  5139,  5148,  5149,  5150,  5157,  5158,  5160,  5162,  5164,
    5166,  5168,  5171,  5173,  5175,  5177,  5181,  5186,  5187,  5191,
    5195,  5197,  5200,  5203,  5204,  5208,  5209,  5215,  5219,  5221,
    5225,  5227,  5231,  5233,  5235,  5236,  5238,  5239,  5244,  5245,
    5247,  5251,  5253,  5255,  5257,  5258,  5259,  5266,  5267,  5268,
    5280,  5284,  5286,  5290,  5294,  5296,  5300,  5301,  5303,  5304,
    5309,  5310,  5318,  5319,  5325,  5326,  5333,  5335,  5339,  5342,
    5347,  5348,  5351,  5352,  5355,  5357,  5359,  5361,  5362,  5367,
    5368,  5370,  5371,  5373,  5375,  5379,  5381,  5383,  5386,  5389,
    5392,  5394,  5396,  5398,  5400,  5401,  5405,  5406,  5410,  5413,
    5418,  5423,  5427,  5432,  5437,  5439,  5443,  5447,  5454,  5457,
    5460,  5461,  5468,  5469,  5476,  5482,  5485,  5487,  5493,  5499,
    5502,  5505,  5507,  5512,  5516,  5519,  5523,  5526,  5529,  5531,
    5535,  5540,  5544,  5548,  5551,  5554,  5558,  5562,  5565,  5568,
    5571,  5574,  5577,  5581,  5585,  5589,  5593,  5597,  5601,  5605,
    5609,  5611,  5613,  5615,  5617,  5619,  5620,  5622,  5623,  5626,
    5627,  5629,  5631,  5633,  5634,  5637,  5638,  5641,  5642,  5645,
    5648,  5649,  5654,  5655,  5660,  5662,  5664,  5666,  5668,  5670,
    5672,  5674,  5675,  5677,  5679,  5683,  5684,  5686,  5688,  5689,
    5694,  5695,  5696,  5702,  5704,  5705,  5709,  5710,  5714,  5718,
    5720,  5723,  5726,  5729,  5732,  5735,  5738,  5741,  5743,  5745,
    5747,  5749,  5751,  5753,  5755,  5757,  5759,  5761,  5763,  5765,
    5766,  5768,  5769,  5773,  5777,  5779,  5780,  5784,  5786,  5789,
    5791,  5792,  5794,  5795,  5799,  5803,  5807,  5811,  5814,  5817,
    5820,  5823,  5827,  5828,  5830,  5832,  5835,  5836,  5837,  5838,
    5839,  5862,  5864,  5866,  5867,  5869,  5870,  5872,  5874,  5875,
    5877,  5879,  5880,  5883,  5886,  5888,  5892,  5897,  5901,  5905,
    5906,  5909,  5912,  5914,  5918,  5922,  5923,  5928,  5929,  5933,
    5935,  5937,  5938,  5942,  5945,  5949,  5951,  5953,  5956,  5957,
    5960,  5964,  5966,  5972,  5974,  5976,  5979,  5982,  5984,  5986,
    5988,  5990,  5992,  5995,  5998,  6000,  6002,  6004,  6006,  6008,
    6010,  6012,  6014,  6017,  6020,  6022,  6024,  6026,  6028,  6030,
    6033,  6036,  6039,  6041,  6043,  6047,  6053,  6055,  6057,  6059,
    6061,  6063,  6067,  6072,  6078,  6080,  6086,  6090,  6093,  6095,
    6099,  6102,  6105,  6110,  6112,  6114,  6116,  6118,  6120,  6122,
    6124,  6126,  6128,  6130,  6132,  6134,  6136,  6138,  6140,  6144,
    6147,  6149,  6151,  6153,  6155,  6157,  6159,  6161,  6163,  6165,
    6167,  6169,  6171,  6173,  6175,  6177,  6179,  6181,  6183,  6185,
    6187,  6189,  6191,  6193,  6195,  6197,  6199,  6201,  6203,  6205,
    6207,  6209,  6211,  6213,  6215,  6217,  6219,  6221,  6223,  6225,
    6227,  6229,  6231,  6233,  6235,  6237,  6239,  6241,  6243,  6245,
    6247,  6249,  6251,  6253,  6255,  6257,  6259,  6261,  6263,  6265,
    6267,  6269,  6271,  6273,  6275,  6277,  6279,  6281,  6283,  6285,
    6287,  6289,  6291,  6293,  6295,  6297,  6299,  6301,  6303,  6305,
    6307,  6309,  6311,  6313,  6315,  6317,  6319,  6321,  6323,  6325,
    6327,  6329,  6331,  6333,  6335,  6337,  6339,  6341,  6343,  6345,
    6347,  6349,  6351,  6353,  6355,  6357,  6359,  6361,  6363,  6365,
    6367,  6369,  6371,  6373,  6375,  6377,  6379,  6381,  6383,  6385,
    6387,  6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,  6405,
    6407,  6409,  6411,  6413,  6415,  6417,  6419,  6421,  6423,  6425,
    6427,  6429,  6431,  6433,  6435,  6437,  6439,  6441,  6443,  6445,
    6447,  6449,  6451,  6453,  6455,  6457,  6459,  6461,  6463,  6465,
    6467,  6469,  6471,  6473,  6475,  6477,  6479,  6481,  6483,  6485,
    6487,  6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,  6505,
    6507,  6509,  6511,  6513,  6515,  6517,  6519,  6521,  6523,  6525,
    6527,  6529,  6531,  6533,  6535,  6537,  6539,  6541,  6543,  6545,
    6547,  6549,  6551,  6553,  6555,  6557,  6559,  6561,  6563,  6565,
    6567,  6569,  6571,  6573,  6575,  6577,  6579,  6581,  6583,  6585,
    6587,  6589,  6591,  6593,  6595,  6597,  6599,  6601,  6603,  6605,
    6607,  6609,  6611,  6613,  6615,  6617,  6619,  6621,  6623,  6625,
    6627,  6629,  6631,  6633,  6635,  6637,  6639,  6641,  6643,  6645,
    6647,  6649,  6651,  6653,  6655,  6657,  6659,  6661,  6663,  6665,
    6667,  6669,  6671,  6673,  6675,  6677,  6679,  6681,  6683,  6685,
    6687,  6689,  6691,  6693,  6695,  6697,  6699,  6701,  6703,  6705,
    6707,  6709,  6711,  6713,  6715,  6717,  6719,  6721,  6723,  6725,
    6727,  6729,  6731,  6733,  6735,  6737,  6739,  6741,  6743,  6745,
    6747,  6749,  6751,  6753,  6755,  6757,  6759,  6761,  6763,  6765,
    6767,  6769,  6771,  6773,  6775,  6777,  6779,  6781,  6783,  6785,
    6787,  6789,  6791,  6793,  6795,  6797,  6799,  6801,  6803,  6805,
    6807,  6809,  6811,  6813,  6815,  6817,  6819,  6821,  6823,  6825,
    6827,  6829,  6831,  6833,  6835,  6837,  6839,  6841,  6843,  6845,
    6847,  6849,  6851,  6853,  6855,  6857,  6859,  6861,  6863,  6865,
    6867,  6869,  6871,  6873,  6875,  6877,  6878,  6882,  6883,  6890,
    6892,  6896,  6897,  6901,  6902,  6906,  6907,  6911,  6912,  6916,
    6919,  6920,  6923,  6924,  6927,  6928,  6933,  6934,  6938,  6940,
    6942,  6944,  6946,  6947,  6949,  6951,  6953,  6954,  6957,  6960,
    6963,  6967,  6968,  6973,  6978,  6985,  6988,  6992,  6996,  7000,
    7006,  7008,  7012,  7016,  7018,  7020,  7024,  7028,  7030,  7034,
    7037,  7040,  7043,  7046,  7049,  7051,  7053,  7058,  7063,  7065,
    7067,  7069,  7071,  7073,  7076,  7080,  7084,  7085,  7089,  7091,
    7093,  7095,  7099,  7103,  7105,  7107,  7110,  7113,  7116,  7118,
    7120,  7125,  7129,  7130,  7138,  7140,  7143,  7145,  7147,  7149,
    7151,  7153,  7155,  7156,  7162,  7164,  7166,  7168,  7170,  7172,
    7173,  7178,  7185,  7192,  7199,  7207,  7213,  7214,  7219,  7228,
    7237,  7246,  7253,  7254,  7256,  7258,  7261,  7262,  7264,  7266,
    7270,  7271,  7275,  7276,  7280,  7281,  7285,  7286,  7290,  7292,
    7294,  7296,  7298,  7300,  7302,  7304,  7306,  7308,  7310,  7312,
    7315,  7318,  7320,  7324,  7327,  7330,  7333,  7336,  7339,  7342,
    7345,  7348,  7350,  7352,  7355,  7356,  7358,  7362,  7364,  7367,
    7370,  7373,  7375,  7379,  7383,  7385,  7387,  7391,  7393,  7397,
    7402,  7408,  7413,  7420,  7422,  7423,  7427,  7431,  7433,  7435,
    7436,  7439,  7442,  7445,  7448,  7449,  7452,  7453,  7457,  7460,
    7462,  7465,  7468,  7471,  7474,  7477,  7478,  7482,  7483,  7485,
    7486,  7490,  7493,  7494,  7496,  7499,  7500,  7502,  7507,  7512,
    7518,  7521,  7525,  7526,  7528,  7529,  7534,  7535,  7537,  7539,
    7540,  7542,  7543,  7546,  7549,  7551,  7552,  7554,  7556,  7559,
    7563,  7566,  7567,  7574,  7578,  7579,  7580,  7581,  7583,  7586,
    7588,  7590,  7592,  7594,  7596,  7598,  7600,  7602,  7604,  7607,
    7610,  7614,  7616,  7618,  7620,  7622,  7624,  7626,  7628,  7630,
    7632,  7634,  7636,  7638,  7640,  7641,  7645,  7647,  7650,  7652,
    7655,  7659,  7663,  7667,  7668,  7672,  7676,  7677,  7685,  7686,
    7690,  7692,  7696,  7697,  7701,  7702,  7706,  7711,  7713,  7717,
    7718,  7722,  7723,  7727,  7732,  7737,  7738,  7739,  7740,  7757,
    7766,  7774,  7775,  7776,  7777,  7778,  7779,  7795,  7796,  7797,
    7798,  7799,  7812,  7817,  7822,  7826,  7831,  7835,  7838,  7840,
    7844,  7850,  7852,  7854,  7855,  7857,  7859,  7860,  7863,  7864,
    7865,  7869,  7870,  7873,  7879
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     658,     0,    -1,   155,    -1,    -1,   661,   659,   653,   660,
      -1,   661,   155,    -1,    -1,   155,    -1,   662,    -1,  1541,
      -1,  1037,    -1,  1103,    -1,  1105,    -1,   714,    -1,   674,
      -1,  1106,    -1,  1095,    -1,  1547,    -1,   681,    -1,   663,
      -1,  1350,    -1,  1382,    -1,  1297,    -1,  1299,    -1,   667,
      -1,  1389,    -1,   749,    -1,  1514,    -1,  1504,    -1,   672,
      -1,  1314,    -1,  1615,    -1,  1410,    -1,  1413,    -1,  1495,
      -1,  1111,    -1,  1119,    -1,   868,    -1,  1126,    -1,   665,
      -1,  1405,    -1,  1550,    -1,  1114,    -1,  1098,    -1,  1317,
      -1,  1399,    -1,   748,    -1,  1511,    -1,  1548,    -1,  1549,
      -1,  1138,    -1,  1465,    -1,   741,    -1,  1368,    -1,  1079,
      -1,  1081,    -1,  1361,    -1,  1616,    -1,  1502,    -1,  1342,
      -1,  1412,    -1,  1607,    -1,   664,   403,  1459,    -1,   120,
      -1,   143,    -1,   403,  1459,   193,   666,    -1,  1456,    -1,
     654,  1461,    -1,    -1,   169,  1459,   668,   669,    -1,    -1,
     605,   670,    -1,   670,   649,   671,    -1,   671,    -1,   654,
    1461,    -1,    -1,   212,   673,  1461,    -1,    -1,    57,   307,
     566,   675,   676,    -1,   677,    -1,   676,   649,   677,    -1,
     291,   159,  1455,    -1,   288,   159,  1455,    -1,   308,   159,
    1455,    -1,   294,   159,  1455,    -1,   295,   159,  1278,    -1,
     289,   159,  1278,    -1,   296,   159,  1278,    -1,   290,   159,
    1278,    -1,   305,   159,  1278,    -1,   299,   159,  1455,    -1,
     298,   159,  1455,    -1,   300,   159,  1455,    -1,   301,   159,
    1455,    -1,   304,   159,  1455,    -1,   306,   159,  1278,    -1,
     302,   159,  1455,    -1,   303,   159,  1455,    -1,   309,   159,
    1442,    -1,   226,   159,   647,   678,   648,    -1,   287,   159,
    1278,    -1,   680,    -1,    -1,   679,    -1,   678,   649,   679,
      -1,  1278,    -1,   292,   159,  1455,    -1,   293,   159,  1280,
      -1,   433,   159,  1455,    -1,   434,   159,  1278,    -1,    -1,
      98,   920,   547,   923,  1451,   682,   857,    -1,    -1,    -1,
      98,  1011,   229,  1459,  1019,   369,  1451,   683,   647,  1032,
     648,  1020,   684,  1071,    -1,    -1,    -1,    98,  1016,   229,
    1459,  1018,   369,  1451,   685,   647,  1032,   648,  1021,   686,
    1071,    -1,    -1,    -1,    98,  1017,   229,  1459,  1018,   369,
    1451,   687,   647,  1032,   648,  1022,   688,  1071,    -1,    -1,
      98,   107,   923,  1459,   689,   917,    -1,    -1,    98,   690,
    1569,    -1,    98,   601,   707,  1531,    -1,    98,   278,   206,
     821,    -1,    98,   545,   818,    -1,    98,   691,    -1,   479,
    1461,   189,   110,   629,  1461,   374,   647,   692,   648,    -1,
     693,    -1,   692,   649,   693,    -1,   601,  1456,    -1,   215,
    1456,    -1,   107,  1456,    -1,   384,  1456,    -1,   393,  1456,
      -1,   495,  1456,    -1,   400,  1278,    -1,    -1,  1155,   166,
     923,   708,   695,   369,   468,   696,   701,   698,   703,   142,
     704,    -1,    -1,   167,  1159,  1250,   697,   699,   700,    -1,
      24,  1159,    -1,    -1,   151,    -1,   136,   369,   491,    -1,
     136,    -1,    -1,   517,  1159,    -1,    -1,   154,  1159,    -1,
      -1,   702,    -1,   369,    82,   404,    -1,   369,    82,   357,
     404,    -1,    -1,    78,  1456,    -1,    -1,   705,   706,    -1,
     766,    -1,   768,    -1,   764,    -1,   785,    -1,   803,    -1,
     805,    -1,   800,    -1,   770,    -1,   772,    -1,   773,    -1,
     774,    -1,   775,    -1,   777,    -1,    -1,  1459,   655,  1459,
      -1,  1459,    -1,    -1,   709,   711,    -1,    -1,   710,   712,
      -1,    78,  1456,    -1,   257,   513,    -1,   359,   513,    -1,
      92,   513,    -1,   419,   513,   110,    -1,   334,   513,   110,
      -1,   713,    -1,   711,    -1,   133,    -1,  1165,   133,    -1,
     513,   472,   126,    -1,   513,   472,   242,    -1,    -1,    50,
     708,   715,   716,    -1,    -1,   647,   717,   648,    -1,    -1,
     718,    -1,   718,   649,  1159,    -1,  1159,    -1,    -1,   720,
      -1,   720,   649,   722,    -1,   722,    -1,    -1,  1459,   721,
     971,    -1,    -1,   724,    -1,   724,   649,   725,    -1,   725,
      -1,   726,   721,  1459,   971,    -1,    -1,   243,    -1,   383,
      -1,   234,    -1,    -1,   727,   763,   653,    -1,   763,   653,
      -1,   728,   763,   653,    -1,    -1,   729,   730,   653,    -1,
      -1,   123,   760,   731,   971,   761,    -1,   123,  1459,    85,
     190,   737,    -1,    -1,   123,   734,   209,   190,   732,   735,
     763,    -1,    -1,   123,  1459,   104,   190,   733,  1138,    -1,
     171,    -1,    94,    -1,   736,    -1,   735,   649,   736,    -1,
     740,    -1,  1278,    -1,   738,    -1,   502,   739,  1457,    -1,
      -1,   610,    -1,   737,    -1,  1459,    -1,   503,    -1,  1165,
     192,    -1,   501,    -1,   488,   742,   744,    -1,  1459,    -1,
     738,    -1,    -1,   742,    -1,    -1,   481,   745,    -1,   747,
     159,   746,    -1,   745,   649,   747,   159,   746,    -1,  1441,
      -1,  1186,    -1,  1447,    -1,    65,    -1,   532,    -1,    89,
      -1,    91,    -1,    90,    -1,    55,    -1,   469,    -1,   550,
      -1,    77,    -1,   105,    -1,   325,    -1,   342,    -1,   448,
     743,   744,    -1,   202,   750,   134,   751,    -1,    -1,   102,
      -1,   752,    -1,    85,   756,   757,    -1,   753,    -1,   752,
     649,   753,    -1,   754,   159,   755,    -1,  1459,    -1,   654,
    1461,    -1,   364,    -1,   465,    -1,   746,    -1,   758,    -1,
     757,   649,   758,    -1,   754,   159,   759,    -1,    65,    -1,
     532,    -1,    89,    -1,    91,    -1,    90,    -1,    55,    -1,
     469,    -1,   550,    -1,    77,    -1,   105,    -1,   325,    -1,
     342,    -1,   453,    -1,  1459,    -1,   760,   649,  1459,    -1,
      -1,    -1,   124,   762,  1159,    -1,   766,    -1,   768,    -1,
     764,    -1,   785,    -1,   803,    -1,   805,    -1,   800,    -1,
     770,    -1,   772,    -1,   773,    -1,   774,    -1,   775,    -1,
     777,    -1,    -1,   224,   765,   780,   153,   224,    -1,    -1,
     767,   662,    -1,    -1,   455,   769,  1159,    -1,    -1,   771,
     809,    -1,   262,  1460,    -1,   251,  1460,    -1,   372,  1459,
      -1,    -1,   181,   778,  1459,   240,   776,   779,    -1,    68,
    1459,    -1,    -1,   353,   193,    -1,   193,    -1,  1459,    -1,
     779,   649,  1459,    -1,    -1,    -1,    -1,   781,  1159,   782,
     557,   728,   783,   784,    -1,    -1,   150,   780,    -1,   149,
     728,    -1,   786,    -1,   789,    -1,    -1,    -1,    53,   787,
    1159,   788,   791,   799,   153,    53,    -1,    -1,    53,   790,
     792,   799,   153,    53,    -1,   793,    -1,   791,   793,    -1,
     796,    -1,   792,   796,    -1,    -1,    -1,   622,   794,  1159,
     795,   557,   728,    -1,    -1,    -1,   622,   797,  1159,   798,
     557,   728,    -1,    -1,   149,   728,    -1,    -1,  1460,   656,
     801,   809,   802,    -1,    -1,  1460,    -1,    -1,  1460,   656,
     804,   807,   802,    -1,    -1,   806,   807,    -1,    -1,    31,
     808,   729,   727,   153,    -1,   284,   728,   153,   284,    -1,
      -1,    -1,   624,   810,  1159,   811,   142,   728,   153,   624,
      -1,    -1,    -1,   443,   728,   597,   812,  1159,   813,   153,
     443,    -1,    30,    -1,     8,    -1,   236,    -1,   598,    -1,
     129,    -1,   843,   845,    -1,   843,    57,   840,   824,    -1,
     843,     6,   840,   819,   828,    -1,    -1,   604,   278,   206,
    1459,    -1,   843,     6,   840,   831,    -1,   843,   143,   840,
     831,    -1,   844,   823,   834,    -1,   844,   823,   837,    -1,
       6,   841,    -1,     6,   842,    -1,    -1,   825,   826,    -1,
     827,    -1,   826,   827,    -1,   826,   649,   827,    -1,   846,
      -1,   847,    -1,   848,    -1,    -1,   829,    -1,   830,    -1,
     829,   830,    -1,   829,   649,   830,    -1,   846,    -1,   847,
      -1,   848,    -1,   849,    -1,   852,    -1,   854,    -1,   855,
      -1,   853,    -1,    -1,   832,    -1,   833,    -1,   832,   833,
      -1,   832,   649,   833,    -1,   846,    -1,   847,    -1,   848,
      -1,   854,    -1,   855,    -1,    -1,   835,    -1,   836,    -1,
     835,   836,    -1,   835,   649,   836,    -1,   846,    -1,   850,
      -1,   851,    -1,   852,    -1,   854,    -1,   855,    -1,   853,
      -1,    -1,   838,    -1,   839,    -1,   838,   839,    -1,   838,
     649,   839,    -1,   846,    -1,   854,    -1,   855,    -1,   109,
    1456,    -1,   587,  1456,    -1,   426,  1456,    -1,  1459,    -1,
    1459,    -1,   420,    -1,   422,    -1,   357,     4,    -1,   232,
    1334,   856,    -1,    25,  1334,   856,    -1,   314,  1334,   856,
      -1,   176,  1334,   856,    -1,   588,  1334,   856,    -1,   427,
    1334,   856,    -1,   354,  1334,  1279,    -1,    78,  1334,  1456,
      -1,  1375,   157,  1334,   931,    -1,   618,    -1,   360,    -1,
    1281,    -1,  1454,    -1,   647,   858,    -1,   924,   863,   860,
      -1,   267,  1451,    -1,   647,   267,  1451,   648,    -1,   937,
     648,   924,   863,   860,    -1,    -1,   863,   913,   648,   859,
    1554,    -1,    -1,    -1,  1421,   916,   913,   861,  1551,    -1,
      -1,  1421,   916,   647,   913,   648,   862,  1554,    -1,   864,
      -1,    -1,   865,    -1,    -1,   390,   867,   866,   870,    -1,
      -1,    -1,   390,   869,   870,    -1,    47,   871,   881,   882,
     889,    -1,   873,   255,   874,   647,   875,   648,    -1,    -1,
     873,   210,   872,   879,    -1,   418,   879,    -1,   418,   878,
      -1,   272,   879,    -1,   272,   878,    -1,    -1,   269,    -1,
      -1,    11,   159,  1279,    -1,    -1,   876,    -1,   877,    -1,
     876,   649,   877,    -1,  1459,    -1,    74,   647,   875,   648,
      -1,   647,  1155,   887,  1156,   648,    -1,   647,  1155,   887,
    1156,   648,    -1,    -1,   391,  1279,    -1,    -1,    -1,   536,
      47,   873,   210,   880,   883,   888,    -1,    -1,   536,    47,
     873,   255,   874,   647,   885,   648,   884,   888,    -1,   886,
      -1,   885,   649,   886,    -1,  1459,    -1,  1162,    -1,    -1,
     535,  1279,    -1,    -1,   647,   890,   648,    -1,   891,    -1,
     890,   649,   891,    -1,    -1,   390,   892,   893,   894,   910,
     905,    -1,  1459,    -1,    -1,    -1,   609,   264,   556,   895,
     897,    -1,    -1,   609,   243,   896,   898,    -1,   318,    -1,
     900,    -1,   900,    -1,   647,   899,   648,    -1,   900,    -1,
     899,   649,   900,    -1,    -1,    -1,   647,   901,   903,   902,
     648,    -1,   904,    -1,   903,   649,   904,    -1,   318,    -1,
    1162,    -1,    -1,   647,   906,   648,    -1,   907,    -1,   906,
     649,   907,    -1,    -1,   536,   908,   909,   910,    -1,  1461,
      -1,    -1,   911,    -1,   911,   912,    -1,   912,    -1,   545,
    1334,  1461,    -1,  1375,   157,  1334,   931,    -1,   354,  1334,
    1279,    -1,   313,  1334,  1281,    -1,   331,  1334,  1281,    -1,
     110,   135,  1334,  1456,    -1,   229,   135,  1334,  1456,    -1,
      78,  1334,  1456,    -1,    -1,    -1,   473,   914,  1149,  1153,
     915,   935,    -1,    -1,    20,    -1,    -1,   918,    -1,   919,
      -1,   918,   919,    -1,   930,    -1,   929,    -1,    -1,   921,
      -1,   922,    -1,   922,   921,    -1,   551,    -1,    -1,   224,
    1165,   170,    -1,    -1,   926,    -1,   927,    -1,   927,   925,
      -1,   927,    -1,   927,   926,    -1,   927,   649,   926,    -1,
     157,  1334,   931,    -1,   313,  1334,  1280,    -1,   331,  1334,
    1280,    -1,    27,  1334,  1278,    -1,   393,  1334,  1456,    -1,
      78,  1334,  1456,    -1,    26,  1334,  1280,    -1,   385,  1334,
    1278,    -1,   385,  1334,   124,    -1,   520,  1334,  1278,    -1,
     520,  1334,   124,    -1,   521,  1334,  1278,    -1,   521,  1334,
     124,    -1,   522,  1334,  1278,    -1,   522,  1334,   124,    -1,
      62,  1334,  1278,    -1,   549,  1334,  1278,    -1,   128,  1334,
    1278,    -1,   463,  1334,   933,    -1,    -1,   592,  1334,   928,
     647,  1398,   648,    -1,   929,    -1,   930,    -1,   237,  1334,
     934,    -1,   110,   135,  1334,  1456,    -1,   229,   135,  1334,
    1456,    -1,   545,  1459,    -1,   529,   138,    -1,   529,   323,
      -1,    86,  1334,  1456,    -1,   254,  1334,  1278,    -1,   983,
     974,  1334,   976,    -1,   983,    72,  1334,   982,    -1,  1461,
      -1,  1461,    -1,   124,    -1,   184,    -1,   147,    -1,    83,
      -1,   428,    -1,    81,    -1,   567,    -1,   568,    -1,   569,
      -1,   570,    -1,   571,    -1,   572,    -1,   359,    -1,   183,
      -1,   258,    -1,  1273,    -1,  1148,  1152,    -1,   531,    -1,
     423,    -1,   122,    -1,   241,    -1,   938,    -1,   939,    -1,
     938,   649,   939,    -1,   940,    -1,   941,    -1,   946,   942,
      -1,   946,  1000,    -1,  1006,  1034,  1019,   647,  1032,   648,
    1020,    -1,  1016,  1009,  1034,  1018,   647,  1032,   648,  1021,
      -1,  1017,  1009,  1034,  1018,   647,  1032,   648,  1022,    -1,
     944,  1007,  1034,  1019,   647,  1032,   648,  1020,    -1,   944,
     189,   255,  1034,   647,  1032,   648,  1000,    -1,   944,   943,
      -1,    -1,   943,    -1,    63,   647,  1159,   648,    -1,    -1,
     945,    -1,    88,  1034,    -1,    -1,  1450,   947,   948,   968,
      -1,   956,   966,   962,    -1,   957,   967,   962,    -1,   186,
     958,   962,    -1,    39,    -1,    39,   965,    -1,    44,    -1,
      43,    -1,   952,   965,   986,    -1,   952,   986,    -1,   953,
     965,   987,    -1,   953,   987,    -1,    34,   965,    -1,    34,
      -1,   954,   965,   986,    -1,   955,   965,   987,    -1,   611,
     965,    -1,   636,   966,   962,    -1,   114,    -1,   562,   960,
      -1,   559,   960,    -1,   111,   960,    -1,   563,    -1,    41,
     966,    -1,   951,    -1,   319,    -1,   280,    -1,   283,   611,
      -1,   283,   954,   986,    -1,   565,   986,    -1,   555,   966,
     986,    -1,   321,   986,    -1,   281,   986,    -1,   122,   958,
     962,    -1,   365,   958,   962,    -1,   184,   958,   962,    -1,
      -1,   158,   949,   647,  1036,   648,   986,    -1,    -1,   481,
     950,   647,  1036,   648,   986,    -1,   283,   986,    -1,   477,
      -1,   200,    -1,   199,    -1,   398,    -1,   339,    -1,   271,
      -1,   338,    -1,   399,    -1,   340,    -1,    61,    -1,   348,
      -1,   345,    61,    -1,   952,   615,    -1,   612,    -1,   345,
     612,    -1,   366,    -1,   348,   612,    -1,   345,    61,   615,
      -1,   348,   615,    -1,   241,    -1,   564,    -1,   493,    -1,
     320,    -1,    33,    -1,   423,    -1,   141,    -1,   141,   402,
      -1,    -1,   965,    -1,   959,    -1,   647,   363,   649,   363,
     648,    -1,    -1,   647,   363,   648,    -1,    -1,   647,   648,
      -1,   647,   363,   648,    -1,    -1,   963,    -1,   963,   964,
      -1,   964,    -1,   489,    -1,   596,    -1,   637,    -1,   647,
     282,   648,    -1,   647,   583,   648,    -1,   647,   121,   648,
      -1,   647,   363,   648,    -1,    -1,   965,    -1,    -1,   959,
      -1,    -1,   969,    -1,   969,   970,    -1,   970,    -1,   362,
      -1,  1165,   362,    -1,   124,   973,    -1,   369,   598,   972,
      -1,    26,    -1,   477,   124,   610,    -1,   999,   255,    -1,
    1012,    -1,  1012,   255,    -1,    78,  1456,    -1,    72,   980,
      -1,    76,   124,    -1,    76,   184,    -1,    76,   147,    -1,
     529,   124,    -1,   529,   138,    -1,   529,   323,    -1,   948,
     981,    -1,   358,   961,    -1,   972,    -1,  1440,    -1,    61,
     481,    -1,    60,    -1,  1461,    -1,    34,    -1,   975,    -1,
     124,    -1,    -1,   974,   976,    -1,  1461,    -1,    34,    -1,
     978,    -1,   124,    -1,  1461,    -1,    -1,    72,   982,    -1,
     980,    -1,   124,    -1,    -1,   124,    -1,    22,    -1,    34,
      22,    -1,    22,    34,    -1,   590,    -1,   590,    34,    -1,
      34,   590,    -1,    -1,   984,    -1,   985,    -1,    48,    -1,
     974,   975,   987,    -1,    34,    -1,    34,   974,   975,    -1,
      -1,    34,    -1,    -1,   647,  1279,   989,   648,    -1,    21,
      -1,   130,    -1,   456,    -1,    -1,   990,    -1,   990,   991,
      -1,   991,    -1,  1279,    -1,   993,   992,    -1,   994,    -1,
     995,   649,   994,    -1,   993,   640,   993,    -1,   995,    -1,
     996,    -1,    -1,   265,   997,    -1,    -1,   406,    -1,   429,
    1451,  1001,  1003,  1004,    -1,    -1,   647,  1002,   648,    -1,
    1002,   649,  1459,    -1,  1459,    -1,    -1,   310,   194,    -1,
     310,   389,    -1,   310,   490,    -1,    -1,   369,   598,  1005,
      -1,   369,   129,  1005,    -1,   369,   598,  1005,   369,   129,
    1005,    -1,   369,   129,  1005,   369,   598,  1005,    -1,   451,
      -1,    51,    -1,   481,   362,    -1,   359,     5,    -1,   481,
     124,    -1,  1008,    -1,   406,   255,    -1,  1012,  1009,    -1,
     255,    -1,   229,    -1,    -1,  1008,    -1,   253,    -1,   229,
      -1,   228,    -1,    -1,  1012,    -1,  1015,    -1,  1013,    -1,
    1014,    -1,  1014,  1015,    -1,  1015,  1014,    -1,   593,    -1,
      69,    -1,   195,    -1,   499,    -1,    -1,  1018,    -1,  1018,
    1026,    -1,    -1,  1023,    -1,    -1,  1025,    -1,    -1,  1024,
      -1,  1028,    -1,  1023,  1028,    -1,  1029,    -1,  1024,  1029,
      -1,  1030,    -1,  1025,  1030,    -1,   605,  1031,    -1,   581,
    1031,    -1,   254,  1334,  1278,    -1,    78,  1456,    -1,  1027,
      -1,  1026,    -1,  1027,    -1,  1027,    -1,   625,   388,  1454,
      -1,    46,    -1,   466,    -1,   210,    -1,  1032,   649,  1033,
    1271,    -1,  1033,  1271,    -1,  1459,    -1,  1459,   647,   363,
     648,    -1,    -1,  1450,    -1,    -1,   655,  1459,    -1,  1438,
      -1,  1036,   649,  1438,    -1,    -1,    13,  1075,   547,  1451,
    1038,  1050,    -1,    -1,    13,   107,  1049,  1039,   918,    -1,
      13,   107,  1459,   599,   110,   135,   344,    -1,    -1,    13,
     408,   708,  1040,   709,    -1,    -1,    13,   196,   708,  1041,
     709,    -1,    -1,    13,  1577,  1572,  1042,  1579,    -1,    -1,
      13,  1572,  1043,  1579,    -1,    -1,    13,  1572,   166,   708,
    1044,  1046,  1047,   698,   703,  1048,    -1,    13,   545,   820,
      -1,    13,   278,   206,   822,    -1,    13,   545,   817,    -1,
      13,   545,   816,    -1,    13,   479,  1461,   374,   647,   692,
     648,    -1,    13,   601,   707,  1045,    -1,  1462,   393,   173,
      -1,  1045,   649,  1462,   393,   173,    -1,    -1,   369,   468,
     696,    -1,   702,    -1,   369,   468,   696,   702,    -1,    -1,
     439,   566,   708,    -1,    -1,   142,   704,    -1,    -1,  1459,
      -1,    -1,   137,   545,    -1,   227,   545,    -1,  1065,   864,
      -1,  1065,  1054,    -1,  1054,    -1,   865,    -1,  1056,    -1,
     143,   390,  1063,    -1,   424,   390,  1113,  1055,    -1,    -1,
     373,   390,  1113,  1055,  1051,  1113,    -1,    15,   390,  1113,
    1055,    -1,    -1,    63,   390,  1055,  1052,  1108,    -1,    -1,
     441,   390,  1113,  1055,  1053,  1100,    -1,    70,   390,  1113,
    1279,    -1,   579,   390,  1055,    -1,  1059,    -1,   168,   390,
    1064,   625,   547,  1451,   867,    -1,   438,   392,   867,    -1,
      12,    -1,  1063,    -1,    -1,     6,   390,  1113,  1057,  1058,
      -1,    -1,   647,   890,   648,    -1,   391,  1279,    -1,    -1,
     440,   390,  1113,  1060,  1061,    -1,    -1,    -1,  1063,  1062,
     240,   647,   890,   648,    -1,  1064,    -1,  1063,   649,  1064,
      -1,  1459,    -1,  1067,    -1,  1065,   649,  1067,    -1,     6,
    1074,    -1,  1066,   940,  1077,    -1,     6,   941,    -1,  1066,
     647,   937,   648,    -1,    -1,    57,  1074,  1450,  1068,   946,
    1077,    -1,    -1,    -1,   335,  1074,  1450,  1069,   948,   968,
    1070,  1077,    -1,   143,  1074,  1450,  1076,    -1,   143,   189,
     255,  1450,    -1,   143,   406,   255,    -1,   143,  1008,  1450,
      -1,   136,   253,    -1,   151,   253,    -1,    13,  1074,  1450,
     481,   124,  1440,    -1,    13,  1074,  1450,   143,   124,    -1,
     439,  1078,  1451,    -1,    95,   566,   974,   976,   981,    -1,
     925,    -1,   188,    -1,  1264,    -1,  1072,    -1,  1073,    -1,
      -1,  1073,    -1,  1072,    -1,  1073,  1072,    -1,  1072,  1073,
      -1,    11,  1334,   124,    -1,    11,  1334,  1459,    -1,   277,
    1334,   124,    -1,   277,  1334,  1459,    -1,    -1,    75,    -1,
      -1,   225,    -1,    -1,   451,    -1,    51,    -1,    -1,     8,
    1459,    -1,   183,    -1,    -1,   566,    -1,   159,    -1,    20,
      -1,    -1,   518,   491,  1090,  1080,  1093,  1085,    -1,   528,
     491,  1090,    -1,   518,   574,  1082,    -1,    -1,  1083,    -1,
    1084,    -1,  1083,   649,  1084,    -1,   625,    87,   494,    -1,
     625,    87,   494,   193,   478,  1159,    -1,   421,   371,    -1,
     421,   630,    -1,  1086,  1087,  1088,  1089,    -1,    -1,   601,
     159,  1456,    -1,    -1,   393,   159,  1456,    -1,    -1,   125,
     159,  1456,    -1,    -1,   395,   159,  1456,    -1,    -1,  1091,
      -1,  1092,    -1,  1091,   649,  1092,    -1,   514,    -1,   435,
      -1,    -1,   597,  1094,    -1,   680,    -1,  1094,   649,   680,
      -1,   506,   159,  1456,    -1,   504,   159,  1456,    -1,   505,
      -1,    -1,    62,  1498,  1096,  1304,  1097,    -1,    -1,   417,
      -1,   175,    -1,    -1,   441,  1113,  1498,  1099,  1304,  1100,
      -1,    -1,  1101,    -1,  1102,    -1,  1102,  1101,    -1,   417,
      -1,   175,    -1,   603,    -1,    -1,    15,  1113,  1498,  1104,
    1304,    -1,    35,  1456,    -1,    -1,    63,  1498,  1107,  1304,
    1108,    -1,    -1,  1109,    -1,  1110,    -1,  1110,  1109,    -1,
     417,    -1,   179,    -1,   322,    -1,   175,    -1,    58,    -1,
     190,   599,    -1,    -1,   373,  1113,  1498,  1112,  1304,    -1,
      -1,   361,    -1,   274,    -1,    -1,   439,  1498,  1115,  1117,
      -1,   439,   601,   707,  1116,    -1,  1462,   566,  1462,    -1,
    1116,   649,  1462,   566,  1462,    -1,  1118,    -1,  1117,   649,
    1118,    -1,  1451,   566,  1451,    -1,    -1,    49,   229,  1120,
    1121,   243,  1125,    -1,  1122,    -1,  1124,    -1,  1123,    -1,
    1122,   649,  1123,    -1,  1451,  1134,    -1,  1451,  1132,  1134,
      -1,  1459,    -1,   124,    -1,    -1,   273,   229,   240,    49,
    1127,  1128,    -1,  1131,    -1,  1129,    -1,  1130,    -1,  1129,
     649,  1130,    -1,  1451,  1134,  1137,    -1,  1451,  1132,  1134,
    1137,    -1,    -1,   390,   867,  1133,   647,  1055,   648,    -1,
      -1,  1135,  1136,    -1,    -1,  1008,   647,  1246,   648,    -1,
      -1,   225,   261,    -1,  1139,    -1,   473,  1142,    -1,   647,
    1140,   648,  1554,    -1,   473,  1144,    -1,   647,  1140,   648,
      -1,   473,  1225,    -1,   647,  1141,   648,    -1,    -1,  1144,
    1143,  1551,    -1,    -1,    -1,  1145,  1149,  1153,  1146,  1147,
    1152,    -1,  1267,  1273,    -1,  1292,    -1,  1148,    -1,  1292,
    1148,    -1,  1148,  1292,    -1,   193,  1205,  1256,  1261,  1258,
    1267,  1273,  1284,    -1,   193,   144,  1256,  1273,    -1,    -1,
    1150,    -1,  1150,  1151,    -1,  1151,    -1,  1568,    -1,   511,
      -1,   509,    -1,    -1,   190,   598,    -1,   277,   243,   483,
     333,    -1,  1153,   649,  1154,    -1,  1154,    -1,   642,    -1,
    1155,  1445,  1156,    -1,  1155,  1159,  1156,  1157,    -1,    -1,
      -1,    -1,    20,  1459,    -1,    20,  1456,    -1,  1459,    -1,
    1456,    -1,    -1,   647,   648,    -1,  1159,  1163,  1159,    -1,
    1159,   634,  1159,    -1,  1159,  1164,  1159,    -1,   357,  1159,
      -1,  1160,   248,   578,    -1,  1160,   248,  1165,   578,    -1,
    1160,   248,   178,    -1,  1160,   248,  1165,   178,    -1,  1160,
     248,   594,    -1,  1160,   248,  1165,   594,    -1,  1160,    -1,
    1160,   248,   362,    -1,  1160,   248,  1165,   362,    -1,  1160,
     160,  1161,    -1,  1160,  1167,  1161,    -1,  1160,  1167,  1168,
     647,  1563,   648,    -1,  1161,    -1,  1162,   243,   647,  1563,
     648,    -1,  1162,  1165,   243,   647,  1563,   648,    -1,  1162,
     243,   647,  1159,   648,    -1,  1162,   243,   647,  1159,   649,
    1198,   648,    -1,  1162,  1165,   243,   647,  1159,   648,    -1,
    1162,  1165,   243,   647,  1159,   649,  1198,   648,    -1,  1162,
      32,  1162,    17,  1161,    -1,  1162,  1165,    32,  1162,    17,
    1161,    -1,  1162,   497,   267,  1162,    -1,  1162,   267,  1169,
    1260,    -1,  1162,  1165,   267,  1169,  1260,    -1,  1162,   430,
    1162,    -1,  1162,  1165,   430,  1162,    -1,  1162,    -1,  1162,
     638,  1162,    -1,  1162,   639,  1162,    -1,  1162,   484,  1162,
      -1,  1162,   485,  1162,    -1,  1162,   641,  1162,    -1,  1162,
     640,  1162,    -1,  1162,   641,   239,  1159,  1250,    -1,  1162,
     640,   239,  1159,  1250,    -1,  1162,   642,  1162,    -1,  1162,
     643,  1162,    -1,  1162,   644,  1162,    -1,  1162,   140,  1162,
      -1,  1162,   336,  1162,    -1,  1162,   645,  1162,    -1,  1169,
      -1,   380,    -1,   377,    -1,    17,    -1,    16,    -1,   357,
      -1,   356,    -1,   650,    -1,   356,    -1,   159,    -1,   197,
      -1,   208,    -1,   259,    -1,   286,    -1,   350,    -1,    12,
      -1,    18,    -1,  1447,    -1,  1170,    -1,  1171,    -1,  1174,
      -1,  1172,    -1,  1169,    72,  1461,    -1,  1441,    -1,  1439,
      -1,  1186,    -1,  1182,    -1,  1169,   379,  1169,    -1,   641,
    1169,    -1,   640,  1169,    -1,   646,  1169,    -1,  1166,  1169,
      -1,   647,  1563,   648,    -1,   647,  1159,   648,    -1,   647,
    1159,   649,  1198,   648,    -1,   464,   647,  1159,   649,  1198,
     648,    -1,   170,   647,  1563,   648,    -1,   651,  1459,  1159,
     652,    -1,   310,  1199,     9,   647,  1162,  1176,   648,    -1,
      34,  1169,    -1,    54,   647,  1159,    20,  1196,   648,    -1,
      53,  1201,  1203,  1202,   153,    -1,    95,   647,  1159,   649,
    1196,   648,    -1,    95,   647,  1159,   605,   975,   648,    -1,
     124,   647,  1447,   648,    -1,   609,   647,  1448,   648,    -1,
     239,  1159,  1250,   641,  1159,    -1,    61,   647,  1198,   648,
      -1,    61,   647,  1198,   605,   975,   648,    -1,   103,  1158,
      -1,   114,   647,  1159,   648,    -1,   119,   647,  1159,   648,
      -1,   220,   647,  1159,   648,    -1,   236,   647,  1159,   649,
    1159,   649,  1159,   649,  1159,   648,    -1,   239,   647,  1159,
     649,  1159,   648,    -1,   239,   647,  1159,   649,  1159,   649,
    1198,   648,    -1,   263,   647,  1159,   649,  1159,   648,    -1,
     330,   647,  1159,   648,    -1,   337,   647,  1159,   648,    -1,
     458,   647,  1159,   649,  1159,   648,    -1,   471,   647,  1159,
     648,    -1,   562,   647,  1159,   648,    -1,   559,   647,  1159,
     648,    -1,   559,   647,  1159,   649,  1159,   648,    -1,   577,
     647,  1159,   648,    -1,   577,   647,   260,  1159,   193,  1159,
     648,    -1,   577,   647,   573,  1159,   193,  1159,   648,    -1,
     577,   647,    45,  1159,   193,  1159,   648,    -1,   577,   647,
     260,   193,  1159,   648,    -1,   577,   647,   573,   193,  1159,
     648,    -1,   577,   647,    45,   193,  1159,   648,    -1,   577,
     647,  1159,   193,  1159,   648,    -1,   601,   647,   648,    -1,
     636,   647,  1159,   648,    -1,     7,   647,  1159,   649,  1159,
     648,    -1,     7,   647,  1159,   649,   239,  1159,  1250,   648,
      -1,   101,  1158,    -1,   106,   961,    -1,   112,   647,  1159,
     649,   239,  1159,  1250,   648,    -1,   113,   647,  1159,   649,
     239,  1159,  1250,   648,    -1,   177,   647,  1250,   193,  1159,
     648,    -1,   201,   647,  1252,   649,  1159,   648,    -1,   972,
      -1,   401,   647,  1162,   243,  1159,   648,    -1,   533,   647,
    1159,   649,  1159,   648,    -1,   533,   647,  1159,   649,   239,
    1159,  1250,   648,    -1,   537,   647,  1159,   649,  1159,   649,
    1159,   648,    -1,   537,   647,  1159,   649,  1159,   648,    -1,
     537,   647,  1159,   193,  1159,   190,  1159,   648,    -1,   537,
     647,  1159,   193,  1159,   648,    -1,   543,   961,    -1,   560,
     647,  1251,   649,  1159,   649,  1159,   648,    -1,   561,   647,
    1251,   649,  1159,   649,  1159,   648,    -1,   606,  1158,    -1,
     608,   961,    -1,   607,   961,    -1,    22,   647,  1159,   648,
      -1,    60,   647,  1159,   648,    -1,    70,   647,  1198,   648,
      -1,    73,   647,  1159,   648,    -1,   107,   647,   648,    -1,
     224,   647,  1159,   649,  1159,   649,  1159,   648,    -1,   191,
     647,  1159,   649,  1159,   648,    -1,   191,   647,  1159,   649,
    1159,   649,  1159,   648,    -1,   326,   647,  1159,   648,    -1,
     336,   647,  1159,   649,  1159,   648,    -1,   368,   647,  1159,
     648,    -1,   393,   647,  1159,   648,    -1,   415,   647,  1159,
     648,    -1,   443,   647,  1159,   649,  1159,   648,    -1,   444,
     647,  1159,   649,  1159,   649,  1159,   648,    -1,   456,   647,
    1159,   648,    -1,   465,   647,   648,    -1,   579,   647,  1159,
     649,  1159,   648,    -1,   620,   647,  1159,   648,    -1,   620,
     647,  1159,   649,  1159,   648,    -1,   621,   647,  1159,   998,
     648,    -1,   621,   647,  1159,    20,    61,   988,   998,   648,
      -1,   621,   647,  1159,    20,    34,   988,   648,    -1,   621,
     647,  1159,   649,  1278,   649,  1278,   649,  1278,   648,    -1,
    1173,    -1,    92,   647,  1159,   649,  1159,   648,    -1,   199,
     647,  1198,   648,    -1,   271,   647,  1198,   648,    -1,   338,
     647,  1198,   648,    -1,   339,   647,  1198,   648,    -1,   340,
     647,  1198,   648,    -1,   398,   647,  1159,   649,  1159,   648,
      -1,   399,   647,  1198,   648,    -1,    -1,  1454,   647,  1175,
    1179,   648,    -1,  1459,   655,  1459,   647,  1197,   648,    -1,
    1177,  1178,    -1,   243,    43,   333,    -1,    -1,   243,   346,
     257,   333,    -1,    -1,   625,   416,   172,    -1,    -1,  1180,
      -1,  1181,    -1,  1180,   649,  1181,    -1,  1155,  1159,  1156,
    1157,    -1,    28,   647,  1194,   648,    -1,    28,   647,   139,
    1194,   648,    -1,    37,   647,  1194,   648,    -1,    38,   647,
    1194,   648,    -1,    40,   647,  1194,   648,    -1,    96,   647,
    1255,   642,   648,    -1,    96,   647,  1194,   648,    -1,    -1,
      -1,    96,   647,   139,  1183,  1198,  1184,   648,    -1,   332,
     647,  1194,   648,    -1,   332,   647,   139,  1194,   648,    -1,
     315,   647,  1194,   648,    -1,   315,   647,   139,  1194,   648,
      -1,   527,   647,  1194,   648,    -1,   614,   647,  1194,   648,
      -1,   526,   647,  1194,   648,    -1,   616,   647,  1194,   648,
      -1,   538,   647,  1194,   648,    -1,   538,   647,   139,  1194,
     648,    -1,    -1,   207,   647,  1189,  1185,  1198,  1191,  1190,
     648,    -1,    -1,   654,  1187,  1188,    -1,  1461,   482,  1159,
      -1,  1461,    -1,   654,  1483,  1461,  1035,    -1,    -1,   139,
      -1,    -1,   475,  1438,    -1,    -1,    -1,   378,    47,  1192,
    1193,    -1,  1193,   649,  1446,  1271,    -1,  1446,  1271,    -1,
      -1,  1255,  1195,  1159,    -1,    34,   966,    -1,    61,   966,
     986,    -1,   348,   966,    -1,   489,    -1,   489,   241,    -1,
     596,    -1,   596,   241,    -1,   114,    -1,   562,   960,    -1,
     111,   960,    -1,   122,   958,    -1,    -1,  1198,    -1,  1159,
      -1,  1198,   649,  1159,    -1,  1200,    -1,   647,  1200,   648,
      -1,  1447,    -1,  1200,   649,  1447,    -1,    -1,  1159,    -1,
      -1,   149,  1159,    -1,   622,  1159,   557,  1159,    -1,  1203,
     622,  1159,   557,  1159,    -1,  1219,    -1,  1208,    -1,  1207,
      -1,  1204,    -1,   651,  1459,  1204,   652,    -1,  1206,    -1,
    1207,   649,  1206,    -1,  1204,  1216,  1204,    -1,  1204,   530,
    1219,    -1,    -1,  1204,  1216,  1204,   369,  1209,  1159,    -1,
      -1,  1204,   530,  1219,   369,  1210,  1159,    -1,    -1,  1204,
    1216,  1204,   605,  1211,   647,  1249,   648,    -1,  1204,   346,
     252,  1219,    -1,    -1,  1204,   263,  1235,   252,  1204,   369,
    1212,  1159,    -1,    -1,  1204,   263,  1235,   252,  1219,  1213,
     605,   647,  1249,   648,    -1,  1204,   346,   263,  1235,   252,
    1219,    -1,    -1,  1204,   458,  1235,   252,  1204,   369,  1214,
    1159,    -1,    -1,  1204,   458,  1235,   252,  1219,  1215,   605,
     647,  1249,   648,    -1,  1204,   346,   458,  1235,   252,  1219,
      -1,   252,    -1,   233,   252,    -1,    99,   252,    -1,    -1,
    1218,    -1,   390,   647,  1249,   648,   867,    -1,    -1,  1220,
    1451,  1217,  1254,  1244,    -1,  1234,  1233,  1230,    -1,   647,
    1233,  1221,   648,  1254,    -1,  1228,  1555,    -1,    -1,    -1,
    1221,   592,  1559,  1222,  1560,  1223,  1555,    -1,  1225,    -1,
      -1,    -1,  1226,  1566,  1153,  1227,   935,  1152,    -1,    -1,
    1233,  1229,  1207,    -1,    -1,    -1,  1231,  1149,  1153,  1232,
     935,    -1,    -1,   473,    -1,    -1,   381,    -1,    -1,   190,
     252,    -1,   190,   378,    47,    -1,   190,   206,    47,    -1,
     188,    -1,   225,    -1,    -1,  1237,  1008,  1236,  1239,   647,
    1248,   648,    -1,    -1,   604,  1008,  1236,  1240,   647,  1246,
     648,    -1,  1238,    -1,  1241,  1238,    -1,    -1,    -1,  1243,
    1241,    -1,    -1,  1245,  1242,    -1,    -1,  1248,    -1,  1459,
      -1,   406,    -1,  1247,    -1,  1248,   649,  1247,    -1,  1459,
      -1,  1249,   649,  1459,    -1,  1251,    -1,   115,    -1,   116,
      -1,   117,    -1,   118,    -1,   217,    -1,   218,    -1,   219,
      -1,   328,    -1,   329,    -1,   470,    -1,   635,    -1,   119,
      -1,   620,    -1,   220,    -1,   330,    -1,   337,    -1,   415,
      -1,   471,    -1,   326,    -1,   636,    -1,   114,    -1,   562,
      -1,   559,    -1,   111,    -1,    -1,    20,    -1,   159,    -1,
      -1,  1253,  1459,    -1,    -1,    12,    -1,    -1,    -1,   623,
    1257,  1159,    -1,    -1,    -1,   211,  1259,  1159,    -1,   164,
    1169,    -1,    -1,    -1,   206,    47,  1262,  1263,    -1,  1262,
     649,  1446,  1271,    -1,  1446,  1271,    -1,    -1,   626,    -1,
     627,    -1,   378,    47,  1265,    -1,  1265,   649,  1266,    -1,
    1266,    -1,  1448,  1271,    -1,    -1,  1268,    -1,    -1,   378,
      47,  1269,  1270,    -1,  1270,   649,  1446,  1271,    -1,  1446,
    1271,    -1,    -1,    21,    -1,   130,    -1,    -1,  1274,    -1,
      -1,  1274,    -1,   268,  1275,    -1,  1276,    -1,  1276,   649,
    1276,    -1,  1276,   367,  1276,    -1,  1459,    -1,  1439,    -1,
     583,    -1,   282,    -1,   363,    -1,    -1,   268,  1276,    -1,
     363,    -1,   213,    -1,   282,    -1,   583,    -1,   121,    -1,
     185,    -1,   363,    -1,   213,    -1,   282,    -1,   583,    -1,
    1282,    -1,   363,    -1,   583,    -1,   282,    -1,   121,    -1,
     185,    -1,   363,    -1,   583,    -1,   282,    -1,  1282,    -1,
    1283,    -1,   121,    -1,   185,    -1,    -1,    -1,   408,    14,
    1285,   647,  1286,   648,    -1,    -1,  1287,    -1,  1287,   649,
    1287,    -1,   363,    -1,    -1,  1289,  1290,    -1,  1290,   649,
    1291,    -1,  1291,    -1,   654,  1461,    -1,  1461,    -1,    -1,
     240,  1293,  1294,    -1,    -1,    -1,   382,  1458,  1295,   977,
    1296,  1422,  1425,    -1,   145,  1458,    -1,  1288,    -1,    -1,
     142,  1298,  1198,    -1,    -1,   143,  1310,  1498,  1309,  1300,
    1304,  1076,    -1,    -1,    -1,   143,   229,  1459,   369,  1451,
    1301,  1302,  1071,    -1,   143,   107,  1309,  1459,    -1,   143,
     196,  1309,  1459,   655,  1459,    -1,   143,   196,  1309,  1459,
      -1,   143,   408,  1309,   708,    -1,   143,   601,   707,  1530,
      -1,    -1,   143,   617,  1309,  1303,  1304,  1076,    -1,   143,
     166,  1309,   708,    -1,   143,   576,  1309,   708,    -1,   143,
     545,   843,  1311,    -1,   143,   278,   206,   844,  1311,    -1,
     143,   479,  1309,  1461,    -1,  1305,    -1,  1304,   649,  1305,
      -1,  1451,    -1,  1451,  1217,    -1,  1308,    -1,  1307,   649,
    1308,    -1,  1452,    -1,    -1,   224,   170,    -1,    -1,   551,
      -1,    -1,  1312,    -1,  1313,    -1,  1312,  1313,    -1,  1311,
     649,  1313,    -1,   854,    -1,   855,    -1,    -1,    -1,   236,
    1315,  1320,  1075,  1322,  1316,  1324,  1340,    -1,    -1,    -1,
     444,  1318,  1321,  1322,  1319,  1324,    -1,    -1,   285,    -1,
     127,    -1,   214,    -1,  1349,    -1,   127,    -1,   240,  1323,
      -1,  1323,    -1,  1306,    -1,  1327,    -1,   647,   648,  1327,
      -1,   647,  1326,   648,  1327,    -1,    -1,   481,  1325,  1331,
      -1,  1326,   649,  1444,    -1,  1444,    -1,   609,  1330,    -1,
     610,  1330,    -1,    -1,   913,  1328,  1551,    -1,    -1,   647,
     913,   648,  1329,  1554,    -1,  1330,   649,  1335,    -1,  1335,
      -1,  1331,   649,  1332,    -1,  1332,    -1,  1448,  1333,  1339,
      -1,   159,    -1,   482,    -1,    -1,  1333,    -1,    -1,   647,
    1336,  1337,   648,    -1,    -1,  1338,    -1,  1338,   649,  1339,
      -1,  1339,    -1,  1159,    -1,   124,    -1,    -1,    -1,   369,
     146,  1341,   255,   598,  1347,    -1,    -1,    -1,   598,  1343,
    1349,  1075,  1205,   481,  1345,  1344,  1256,  1267,  1277,    -1,
    1345,   649,  1346,    -1,  1346,    -1,  1448,  1333,  1339,    -1,
    1347,   649,  1348,    -1,  1348,    -1,  1448,  1333,  1339,    -1,
      -1,   285,    -1,    -1,   129,  1351,  1359,  1352,    -1,    -1,
     193,  1451,  1217,  1353,  1256,  1267,  1277,    -1,    -1,  1356,
    1354,   193,  1205,  1256,    -1,    -1,   193,  1307,  1355,   605,
    1205,  1256,    -1,  1357,    -1,  1356,   649,  1357,    -1,  1459,
    1358,    -1,  1459,   655,  1459,  1358,    -1,    -1,   655,   642,
      -1,    -1,  1360,  1359,    -1,   417,    -1,   285,    -1,   225,
      -1,    -1,   579,  1363,  1362,  1305,    -1,    -1,   547,    -1,
      -1,  1365,    -1,  1366,    -1,  1365,   649,  1366,    -1,    97,
      -1,   323,    -1,    42,   246,    -1,    93,   542,    -1,   386,
     180,    -1,   247,    -1,   541,    -1,   498,    -1,    12,    -1,
      -1,   190,   416,   363,    -1,    -1,   486,  1369,  1370,    -1,
     108,  1381,    -1,  1377,   544,  1376,  1381,    -1,  1377,   575,
    1376,  1381,    -1,   165,  1376,  1381,    -1,   547,   523,  1376,
    1381,    -1,   372,   544,  1376,  1381,    -1,   397,    -1,   157,
     932,  1373,    -1,   157,    12,  1373,    -1,  1377,    74,  1378,
    1451,  1376,  1381,    -1,  1374,   279,    -1,   491,   216,    -1,
      -1,    35,   165,  1379,  1380,  1371,  1272,    -1,    -1,   432,
     165,  1379,  1380,  1372,  1272,    -1,  1010,  1378,  1451,  1376,
    1256,    -1,  1375,   156,    -1,   407,    -1,    96,   647,   642,
     648,   619,    -1,    96,   647,   642,   648,   162,    -1,   619,
    1272,    -1,   162,  1272,    -1,   412,    -1,   411,  1364,  1367,
    1272,    -1,  1482,   523,  1381,    -1,  1377,   410,    -1,  1482,
     613,  1381,    -1,   974,  1381,    -1,    73,  1381,    -1,   205,
      -1,   205,   190,  1462,    -1,    98,   107,   923,  1459,    -1,
      98,   547,  1451,    -1,    98,   617,  1451,    -1,   307,   523,
      -1,   491,   523,    -1,   491,   523,   524,    -1,   491,   523,
     525,    -1,    67,  1381,    -1,   602,  1381,    -1,   558,  1381,
      -1,   548,  1381,    -1,   230,  1381,    -1,    98,   408,   708,
      -1,    98,   196,   708,    -1,    98,   576,   708,    -1,   408,
     523,  1381,    -1,   196,   523,  1381,    -1,   408,    71,   708,
      -1,   196,    71,   708,    -1,    98,   166,   708,    -1,   523,
      -1,   341,    -1,   279,    -1,   307,    -1,    34,    -1,    -1,
     529,    -1,    -1,  1378,  1459,    -1,    -1,   194,    -1,   193,
      -1,   243,    -1,    -1,   243,  1456,    -1,    -1,   193,  1280,
      -1,    -1,   267,  1456,    -1,   623,  1159,    -1,    -1,  1386,
    1451,  1383,  1388,    -1,    -1,  1386,  1387,  1384,  1385,    -1,
    1138,    -1,  1314,    -1,  1317,    -1,  1342,    -1,  1350,    -1,
     130,    -1,   131,    -1,    -1,   175,    -1,   391,    -1,   191,
     159,  1461,    -1,    -1,  1438,    -1,  1459,    -1,    -1,   187,
    1113,  1390,  1391,    -1,    -1,    -1,  1498,  1392,  1398,  1393,
    1394,    -1,  1396,    -1,    -1,   625,   421,   277,    -1,    -1,
     190,  1395,   174,    -1,  1396,   649,  1397,    -1,  1397,    -1,
     161,   279,    -1,   157,   279,    -1,   198,   279,    -1,   492,
     279,    -1,    34,   279,    -1,   431,   279,    -1,   416,    49,
      -1,   216,    -1,   407,    -1,   279,    -1,   523,    -1,    67,
      -1,   602,    -1,   558,    -1,   548,    -1,   230,    -1,   132,
      -1,   449,    -1,    59,    -1,    -1,  1304,    -1,    -1,   447,
    1400,  1401,    -1,  1401,   649,  1402,    -1,  1402,    -1,    -1,
     491,  1403,  1404,    -1,   307,    -1,   416,    49,    -1,    59,
      -1,    -1,    12,    -1,    -1,   414,  1406,  1407,    -1,  1374,
     279,  1408,    -1,    59,    30,  1281,    -1,    19,   279,  1409,
      -1,   566,  1456,    -1,    30,  1159,    -1,   566,  1456,    -1,
      30,  1159,    -1,   256,  1411,  1159,    -1,    -1,    86,    -1,
     416,    -1,   604,  1459,    -1,    -1,    -1,    -1,    -1,   273,
    1418,  1414,  1420,  1419,   231,  1458,  1415,  1421,   240,   547,
    1451,  1217,  1416,   977,  1417,  1428,  1422,  1425,  1429,  1431,
    1434,    -1,   110,    -1,   633,    -1,    -1,   274,    -1,    -1,
      84,    -1,   285,    -1,    -1,   444,    -1,   225,    -1,    -1,
      74,  1423,    -1,  1423,  1424,    -1,  1424,    -1,   553,    47,
    1438,    -1,   376,   152,    47,  1438,    -1,   152,    47,  1438,
      -1,   163,    47,  1438,    -1,    -1,   270,  1426,    -1,  1426,
    1427,    -1,  1427,    -1,   553,    47,  1438,    -1,   516,    47,
    1438,    -1,    -1,   462,   222,    47,  1438,    -1,    -1,   225,
     363,  1430,    -1,   270,    -1,   462,    -1,    -1,   647,  1432,
     648,    -1,   647,   648,    -1,  1432,   649,  1433,    -1,  1433,
      -1,  1448,    -1,   654,  1461,    -1,    -1,   481,  1435,    -1,
    1435,   649,  1436,    -1,  1436,    -1,  1448,  1333,  1155,  1339,
    1156,    -1,   554,    -1,   347,    -1,   586,   554,    -1,  1437,
    1457,    -1,  1457,    -1,   213,    -1,    36,    -1,   387,    -1,
    1441,    -1,   641,  1442,    -1,   640,  1442,    -1,  1437,    -1,
    1442,    -1,  1443,    -1,   362,    -1,   178,    -1,   578,    -1,
     213,    -1,    36,    -1,   586,   213,    -1,   586,    36,    -1,
     363,    -1,   282,    -1,   583,    -1,   121,    -1,   185,    -1,
     114,   554,    -1,   562,   554,    -1,   559,   554,    -1,  1448,
      -1,  1445,    -1,  1459,   655,   642,    -1,  1459,   655,  1459,
     655,   642,    -1,  1159,    -1,  1459,    -1,  1449,    -1,  1459,
      -1,  1449,    -1,  1459,   655,  1459,    -1,   655,  1459,   655,
    1459,    -1,  1459,   655,  1459,   655,  1459,    -1,  1459,    -1,
    1459,   655,  1459,   655,  1459,    -1,  1459,   655,  1459,    -1,
     655,  1459,    -1,  1459,    -1,  1459,   655,  1459,    -1,   655,
    1459,    -1,  1459,  1358,    -1,  1459,   655,  1459,  1358,    -1,
    1459,    -1,   221,    -1,   223,    -1,  1456,    -1,   554,    -1,
     554,    -1,   554,    -1,  1454,    -1,  1463,    -1,  1454,    -1,
    1464,    -1,  1459,    -1,  1456,    -1,   266,    -1,  1461,    -1,
    1461,   654,  1461,    -1,   103,  1158,    -1,  1464,    -1,    22,
      -1,    29,    -1,    31,    -1,    48,    -1,    49,    -1,    60,
      -1,    62,    -1,    68,    -1,    78,    -1,    80,    -1,    92,
      -1,   120,    -1,   142,    -1,   153,    -1,   169,    -1,   187,
      -1,   191,    -1,   209,    -1,   212,    -1,   215,    -1,   238,
      -1,   257,    -1,   359,    -1,   372,    -1,   374,    -1,   384,
      -1,   388,    -1,   400,    -1,   403,    -1,   438,    -1,   441,
      -1,   447,    -1,   450,    -1,   459,    -1,   467,    -1,   472,
      -1,   479,    -1,   489,    -1,   495,    -1,   491,    -1,   496,
      -1,   518,    -1,   528,    -1,   579,    -1,   590,    -1,   591,
      -1,   629,    -1,   632,    -1,   599,    -1,     5,    -1,     7,
      -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,    14,
      -1,    19,    -1,    18,    -1,    24,    -1,    26,    -1,    25,
      -1,    27,    -1,    28,    -1,    35,    -1,    39,    -1,    42,
      -1,    44,    -1,    43,    -1,    46,    -1,    52,    -1,    55,
      -1,    56,    -1,    58,    -1,    59,    -1,    64,    -1,    67,
      -1,    66,    -1,    65,    -1,    70,    -1,    71,    -1,    73,
      -1,    77,    -1,    76,    -1,    74,    -1,    79,    -1,    81,
      -1,    82,    -1,    83,    -1,    84,    -1,    86,    -1,    87,
      -1,    89,    -1,    91,    -1,    90,    -1,    93,    -1,    97,
      -1,   100,    -1,   102,    -1,   105,    -1,   110,    -1,   109,
      -1,   111,    -1,   114,    -1,   119,    -1,   125,    -1,   126,
      -1,   128,    -1,   132,    -1,   134,    -1,   135,    -1,   136,
      -1,   137,    -1,   138,    -1,   145,    -1,   146,    -1,   147,
      -1,   154,    -1,   158,    -1,   157,    -1,   156,    -1,   161,
      -1,   162,    -1,   164,    -1,   166,    -1,   165,    -1,   167,
      -1,   168,    -1,   172,    -1,   173,    -1,   174,    -1,   175,
      -1,   176,    -1,   180,    -1,   179,    -1,   192,    -1,   151,
      -1,   194,    -1,   182,    -1,   183,    -1,   184,    -1,   198,
      -1,   200,    -1,   199,    -1,   201,    -1,   205,    -1,   203,
      -1,   210,    -1,   216,    -1,   220,    -1,   222,    -1,   230,
      -1,   226,    -1,   242,    -1,   227,    -1,   228,    -1,   232,
      -1,   246,    -1,   247,    -1,   249,    -1,   250,    -1,   237,
      -1,   254,    -1,   258,    -1,   261,    -1,   264,    -1,   265,
      -1,   271,    -1,   272,    -1,   274,    -1,   276,    -1,   278,
      -1,   279,    -1,   313,    -1,   307,    -1,   309,    -1,   291,
      -1,   295,    -1,   292,    -1,   293,    -1,   308,    -1,   294,
      -1,   297,    -1,   289,    -1,   296,    -1,   290,    -1,   305,
      -1,   299,    -1,   298,    -1,   300,    -1,   301,    -1,   302,
      -1,   303,    -1,   304,    -1,   287,    -1,   311,    -1,   312,
      -1,   314,    -1,   316,    -1,   317,    -1,   322,    -1,   323,
      -1,   324,    -1,   325,    -1,   326,    -1,   327,    -1,   330,
      -1,   331,    -1,   335,    -1,   333,    -1,   337,    -1,   338,
      -1,   339,    -1,   340,    -1,   341,    -1,   342,    -1,   344,
      -1,   343,    -1,   345,    -1,   348,    -1,   349,    -1,   353,
      -1,   352,    -1,   360,    -1,   354,    -1,   355,    -1,   364,
      -1,   366,    -1,   367,    -1,   368,    -1,   370,    -1,   371,
      -1,   385,    -1,   386,    -1,   389,    -1,   392,    -1,   391,
      -1,   393,    -1,   394,    -1,   395,    -1,   396,    -1,   397,
      -1,   398,    -1,   399,    -1,   404,    -1,   405,    -1,   407,
      -1,   409,    -1,   410,    -1,   411,    -1,   412,    -1,   413,
      -1,   415,    -1,   416,    -1,   417,    -1,   420,    -1,   424,
      -1,   425,    -1,   427,    -1,   426,    -1,   428,    -1,   431,
      -1,   432,    -1,   433,    -1,   434,    -1,   435,    -1,   437,
      -1,   440,    -1,   442,    -1,   445,    -1,   449,    -1,   452,
      -1,   453,    -1,   454,    -1,   456,    -1,   460,    -1,   461,
      -1,   462,    -1,   465,    -1,   463,    -1,   464,    -1,   466,
      -1,   468,    -1,   469,    -1,   471,    -1,   477,    -1,   476,
      -1,   478,    -1,   490,    -1,   483,    -1,   487,    -1,   492,
      -1,   494,    -1,   497,    -1,   498,    -1,   504,    -1,   505,
      -1,   506,    -1,   509,    -1,   508,    -1,   511,    -1,   514,
      -1,   517,    -1,   520,    -1,   521,    -1,   522,    -1,   519,
      -1,   523,    -1,   529,    -1,   531,    -1,   532,    -1,   533,
      -1,   534,    -1,   536,    -1,   535,    -1,   539,    -1,   540,
      -1,   541,    -1,   542,    -1,   548,    -1,   550,    -1,   544,
      -1,   549,    -1,   545,    -1,   551,    -1,   552,    -1,   555,
      -1,   556,    -1,   558,    -1,   574,    -1,   575,    -1,   559,
      -1,   560,    -1,   561,    -1,   562,    -1,   567,    -1,   568,
      -1,   569,    -1,   570,    -1,   572,    -1,   571,    -1,   580,
      -1,   581,    -1,   582,    -1,   196,    -1,   584,    -1,   585,
      -1,   588,    -1,   587,    -1,   594,    -1,   597,    -1,   601,
      -1,   602,    -1,   603,    -1,   613,    -1,   617,    -1,   610,
      -1,   619,    -1,   618,    -1,   620,    -1,   628,    -1,   621,
      -1,   631,    -1,   633,    -1,   636,    -1,    -1,   481,  1466,
    1469,    -1,    -1,   481,   519,  1467,  1468,   190,   662,    -1,
    1484,    -1,  1468,   649,  1484,    -1,    -1,  1485,  1470,  1475,
      -1,    -1,   574,  1471,  1488,    -1,    -1,  1481,  1472,  1473,
      -1,    -1,  1484,  1474,  1475,    -1,   574,  1488,    -1,    -1,
     649,  1476,    -1,    -1,  1477,  1479,    -1,    -1,  1476,   649,
    1478,  1479,    -1,    -1,  1481,  1480,  1484,    -1,  1485,    -1,
     203,    -1,   274,    -1,   478,    -1,    -1,   203,    -1,   274,
      -1,   478,    -1,    -1,   203,   655,    -1,   274,   655,    -1,
     478,   655,    -1,  1487,  1333,  1494,    -1,    -1,  1487,  1333,
    1486,  1494,    -1,   654,  1461,  1333,  1159,    -1,   654,   654,
    1483,  1487,  1333,  1494,    -1,   974,   979,    -1,   343,  1333,
    1159,    -1,   343,   976,   981,    -1,   393,  1333,  1493,    -1,
     393,   190,  1462,  1333,  1493,    -1,  1459,    -1,  1459,   655,
    1459,    -1,   124,   655,  1459,    -1,  1489,    -1,  1490,    -1,
    1489,   649,  1490,    -1,  1490,   649,  1489,    -1,  1491,    -1,
     249,   265,  1492,    -1,   421,   371,    -1,   421,   630,    -1,
     421,   584,    -1,   421,    79,    -1,   442,   421,    -1,   476,
      -1,   554,    -1,   393,   647,   554,   648,    -1,   368,   647,
     554,   648,    -1,  1159,    -1,   124,    -1,   369,    -1,    12,
      -1,    34,    -1,   277,  1496,    -1,    35,   190,    29,    -1,
     544,   190,    29,    -1,    -1,  1498,  1497,  1499,    -1,   547,
      -1,   544,    -1,  1500,    -1,  1499,   649,  1500,    -1,  1451,
    1254,  1501,    -1,   421,    -1,   630,    -1,   285,   630,    -1,
     421,   274,    -1,   595,  1503,    -1,    35,    -1,  1498,    -1,
     209,  1451,   372,  1254,    -1,   209,  1453,    68,    -1,    -1,
     209,  1453,   421,  1505,  1506,  1256,  1273,    -1,  1507,    -1,
    1459,  1508,    -1,   183,    -1,   353,    -1,   183,    -1,   353,
      -1,   405,    -1,   258,    -1,    -1,  1510,  1509,   647,  1338,
     648,    -1,   159,    -1,   197,    -1,   259,    -1,   208,    -1,
     286,    -1,    -1,   457,   707,  1512,  1513,    -1,  1518,   369,
    1517,  1529,   193,  1531,    -1,  1518,   369,   196,  1529,   193,
    1531,    -1,  1518,   369,   408,  1529,   193,  1531,    -1,    12,
    1519,   649,   204,   375,   193,  1531,    -1,   413,   369,  1462,
     193,  1531,    -1,    -1,   204,   707,  1515,  1516,    -1,  1518,
     369,  1517,  1529,   566,  1531,  1536,  1537,    -1,  1518,   369,
     196,  1529,   566,  1531,  1536,  1537,    -1,  1518,   369,   408,
    1529,   566,  1531,  1536,  1537,    -1,   413,   369,  1462,   566,
    1531,  1538,    -1,    -1,   547,    -1,  1520,    -1,    12,  1519,
      -1,    -1,   407,    -1,  1521,    -1,  1520,   649,  1521,    -1,
      -1,   473,  1522,  1533,    -1,    -1,   236,  1523,  1533,    -1,
      -1,   598,  1524,  1533,    -1,    -1,   429,  1525,  1533,    -1,
     129,    -1,   600,    -1,   229,    -1,    13,    -1,    98,    -1,
     143,    -1,   169,    -1,   437,    -1,   487,    -1,   409,    -1,
     182,    -1,   204,   375,    -1,   486,   108,    -1,   539,    -1,
      98,   551,   544,    -1,   277,   544,    -1,   445,   491,    -1,
     445,    66,    -1,    98,   617,    -1,   486,   617,    -1,    98,
     461,    -1,    13,   461,    -1,    98,   601,    -1,   166,    -1,
     576,    -1,    98,   545,    -1,    -1,    17,    -1,  1528,  1526,
    1527,    -1,  1528,    -1,   534,   554,    -1,   250,   554,    -1,
      64,   554,    -1,   642,    -1,  1459,   655,   642,    -1,   642,
     655,   642,    -1,  1451,    -1,  1462,    -1,  1530,   649,  1462,
      -1,  1532,    -1,  1531,   649,  1532,    -1,  1462,   222,    47,
     554,    -1,  1462,   222,    47,   393,   554,    -1,  1462,   222,
     625,  1461,    -1,  1462,   222,   625,  1461,    20,  1456,    -1,
    1462,    -1,    -1,   647,  1534,   648,    -1,  1534,   649,  1535,
      -1,  1535,    -1,  1459,    -1,    -1,   446,  1527,    -1,   446,
     515,    -1,   446,   631,    -1,   446,   355,    -1,    -1,   625,
    1539,    -1,    -1,   625,   204,   375,    -1,  1539,  1540,    -1,
    1540,    -1,   204,   375,    -1,   312,  1278,    -1,   316,  1278,
      -1,   311,  1278,    -1,   317,  1278,    -1,    -1,    31,  1542,
    1543,    -1,    -1,   628,    -1,    -1,    17,   359,    56,    -1,
      17,    56,    -1,    -1,   436,    -1,   359,   436,    -1,    -1,
     467,    -1,    80,  1543,  1544,  1545,    -1,   459,  1543,  1544,
    1545,    -1,   459,  1543,   566,  1546,  1459,    -1,   467,  1459,
      -1,   436,   467,  1459,    -1,    -1,  1552,    -1,    -1,   592,
    1559,  1553,  1139,    -1,    -1,  1552,    -1,  1556,    -1,    -1,
    1556,    -1,    -1,  1557,  1558,    -1,  1268,  1272,    -1,  1274,
      -1,    -1,   139,    -1,    12,    -1,   473,  1224,    -1,   647,
    1141,   648,    -1,  1560,  1555,    -1,    -1,  1561,   592,  1559,
    1562,  1560,  1555,    -1,  1564,  1561,  1565,    -1,    -1,    -1,
      -1,  1567,    -1,  1567,  1568,    -1,  1568,    -1,   530,    -1,
     214,    -1,   139,    -1,   512,    -1,   507,    -1,   508,    -1,
     510,    -1,    12,    -1,  1574,  1570,    -1,  1573,  1571,    -1,
    1575,  1572,  1579,    -1,  1579,    -1,  1591,    -1,  1602,    -1,
    1596,    -1,   694,    -1,  1579,    -1,  1591,    -1,  1602,    -1,
    1596,    -1,  1595,    -1,   694,    -1,  1573,    -1,  1574,    -1,
      -1,   126,   159,  1462,    -1,  1576,    -1,  1576,  1577,    -1,
    1577,    -1,   380,   444,    -1,    11,   159,   585,    -1,    11,
     159,   324,    -1,    11,   159,   552,    -1,    -1,   513,   472,
     126,    -1,   513,   472,   242,    -1,    -1,  1578,   617,  1451,
    1580,  1581,    20,  1583,    -1,    -1,   647,  1582,   648,    -1,
    1459,    -1,  1582,   649,  1459,    -1,    -1,  1584,  1585,  1590,
      -1,    -1,  1588,  1586,  1551,    -1,   647,  1587,   648,  1554,
      -1,  1588,    -1,   647,  1587,   648,    -1,    -1,   473,  1589,
    1144,    -1,    -1,   625,    63,   375,    -1,   625,    52,    63,
     375,    -1,   625,   274,    63,   375,    -1,    -1,    -1,    -1,
     576,  1155,   708,   814,   815,   369,  1155,  1592,  1451,   190,
    1155,  1593,   148,   464,  1594,   763,    -1,    10,  1155,   196,
    1459,   454,   936,   496,  1456,    -1,  1155,   196,  1459,   454,
     936,   496,  1456,    -1,    -1,    -1,    -1,    -1,    -1,  1155,
     196,   708,   647,  1597,   719,   648,  1598,   454,  1599,   971,
    1600,   710,  1601,   763,    -1,    -1,    -1,    -1,    -1,   408,
    1155,   708,  1603,   647,  1604,   723,   648,  1605,   710,  1606,
     763,    -1,   632,  1609,  1608,  1610,    -1,   632,   153,  1608,
    1612,    -1,   632,   403,  1608,    -1,   632,    80,  1608,  1611,
      -1,   632,   459,  1608,    -1,   632,   425,    -1,  1438,    -1,
    1438,   649,  1438,    -1,  1438,   649,  1438,   649,  1278,    -1,
      31,    -1,   518,    -1,    -1,   252,    -1,   452,    -1,    -1,
     370,   394,    -1,    -1,    -1,   540,  1613,  1614,    -1,    -1,
     190,   327,    -1,   238,   396,  1459,   496,  1456,    -1,   591,
     396,  1459,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1986,  1986,  1999,  1998,  2023,  2030,  2032,  2036,  2037,
    2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,
    2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,
    2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,
    2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,
    2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,
    2092,  2093,  2097,  2107,  2108,  2112,  2132,  2139,  2150,  2149,
    2160,  2162,  2166,  2167,  2171,  2184,  2183,  2203,  2202,  2220,
    2221,  2225,  2229,  2233,  2237,  2242,  2246,  2250,  2255,  2268,
    2273,  2277,  2281,  2285,  2289,  2293,  2298,  2302,  2307,  2338,
    2343,  2350,  2353,  2355,  2356,  2360,  2374,  2378,  2394,  2398,
    2411,  2410,  2456,  2461,  2455,  2468,  2473,  2466,  2480,  2485,
    2478,  2491,  2490,  2503,  2502,  2510,  2514,  2518,  2522,  2529,
    2542,  2543,  2547,  2551,  2555,  2559,  2563,  2568,  2572,  2580,
    2579,  2611,  2610,  2617,  2624,  2625,  2631,  2637,  2647,  2653,
    2659,  2661,  2668,  2669,  2673,  2679,  2688,  2689,  2697,  2697,
    2752,  2753,  2754,  2755,  2756,  2757,  2758,  2759,  2760,  2761,
    2762,  2763,  2764,  2769,  2783,  2797,  2816,  2817,  2821,  2822,
    2827,  2829,  2831,  2833,  2835,  2837,  2839,  2845,  2846,  2847,
    2851,  2855,  2863,  2862,  2875,  2877,  2880,  2882,  2886,  2890,
    2897,  2899,  2903,  2904,  2909,  2928,  2958,  2960,  2964,  2965,
    2969,  2998,  2999,  3000,  3001,  3005,  3006,  3010,  3011,  3016,
    3019,  3046,  3045,  3129,  3146,  3145,  3220,  3219,  3292,  3293,
    3298,  3300,  3305,  3328,  3339,  3343,  3365,  3366,  3370,  3374,
    3387,  3393,  3399,  3408,  3423,  3449,  3455,  3456,  3462,  3465,
    3469,  3477,  3497,  3499,  3517,  3523,  3525,  3527,  3529,  3531,
    3533,  3535,  3537,  3539,  3541,  3543,  3545,  3550,  3566,  3582,
    3583,  3588,  3594,  3603,  3609,  3618,  3626,  3655,  3664,  3666,
    3675,  3680,  3686,  3695,  3703,  3705,  3707,  3709,  3711,  3713,
    3715,  3717,  3719,  3721,  3723,  3725,  3727,  3732,  3752,  3776,
    3778,  3777,  3784,  3785,  3786,  3787,  3788,  3789,  3790,  3791,
    3792,  3793,  3794,  3795,  3796,  3801,  3800,  3811,  3811,  3868,
    3867,  3924,  3924,  3946,  4005,  4055,  4080,  4079,  4105,  4128,
    4130,  4131,  4135,  4153,  4174,  4183,  4219,  4174,  4248,  4250,
    4251,  4255,  4256,  4261,  4272,  4260,  4323,  4322,  4336,  4337,
    4341,  4342,  4347,  4356,  4346,  4405,  4414,  4404,  4458,  4471,
    4476,  4475,  4513,  4514,  4519,  4518,  4552,  4552,  4571,  4570,
    4620,  4637,  4646,  4636,  4700,  4709,  4699,  4749,  4751,  4756,
    4758,  4760,  4777,  4782,  4788,  4795,  4796,  4804,  4810,  4819,
    4825,  4831,  4832,  4836,  4836,  4841,  4842,  4843,  4847,  4848,
    4849,  4852,  4854,  4858,  4859,  4860,  4864,  4865,  4866,  4867,
    4868,  4869,  4870,  4871,  4874,  4876,  4880,  4881,  4882,  4886,
    4887,  4888,  4889,  4890,  4893,  4895,  4899,  4900,  4901,  4905,
    4906,  4907,  4908,  4909,  4910,  4911,  4914,  4916,  4920,  4921,
    4922,  4926,  4927,  4928,  4933,  4941,  4949,  4957,  4969,  4981,
    4986,  4991,  4999,  5007,  5015,  5023,  5031,  5039,  5047,  5060,
    5073,  5087,  5092,  5105,  5106,  5157,  5158,  5161,  5176,  5194,
    5199,  5197,  5204,  5206,  5205,  5209,  5208,  5214,  5251,  5252,
    5257,  5256,  5275,  5294,  5293,  5310,  5314,  5322,  5321,  5324,
    5326,  5328,  5330,  5335,  5336,  5342,  5343,  5360,  5361,  5365,
    5366,  5370,  5389,  5399,  5410,  5419,  5420,  5436,  5438,  5437,
    5442,  5440,  5451,  5452,  5456,  5474,  5490,  5491,  5507,  5522,
    5544,  5545,  5550,  5549,  5573,  5583,  5605,  5604,  5622,  5621,
    5641,  5663,  5667,  5696,  5708,  5709,  5714,  5725,  5713,  5750,
    5751,  5755,  5768,  5789,  5802,  5828,  5829,  5834,  5833,  5870,
    5875,  5876,  5880,  5881,  5885,  5887,  5893,  5895,  5897,  5899,
    5901,  5903,  5913,  5928,  5912,  5942,  5943,  5947,  5948,  5952,
    5953,  5957,  5958,  5962,  5963,  5967,  5968,  5972,  5976,  5977,
    5980,  5982,  5986,  5987,  5991,  5992,  5993,  5997,  6002,  6007,
    6012,  6017,  6022,  6027,  6032,  6047,  6053,  6068,  6073,  6088,
    6094,  6112,  6117,  6122,  6127,  6132,  6138,  6137,  6163,  6164,
    6165,  6170,  6175,  6180,  6182,  6184,  6186,  6192,  6200,  6218,
    6235,  6261,  6279,  6280,  6281,  6282,  6283,  6284,  6285,  6286,
    6287,  6288,  6289,  6290,  6294,  6295,  6296,  6300,  6301,  6305,
    6306,  6307,  6308,  6313,  6320,  6321,  6325,  6326,  6330,  6331,
    6338,  6343,  6349,  6355,  6368,  6387,  6393,  6395,  6399,  6403,
    6404,  6408,  6413,  6412,  6435,  6436,  6437,  6438,  6443,  6447,
    6452,  6457,  6461,  6466,  6471,  6477,  6482,  6488,  6492,  6497,
    6502,  6520,  6522,  6524,  6540,  6542,  6547,  6552,  6564,  6569,
    6574,  6579,  6581,  6583,  6585,  6587,  6589,  6591,  6593,  6596,
    6595,  6600,  6599,  6603,  6605,  6614,  6615,  6616,  6622,  6623,
    6624,  6625,  6626,  6630,  6634,  6635,  6639,  6640,  6644,  6645,
    6646,  6647,  6648,  6652,  6653,  6654,  6655,  6656,  6660,  6665,
    6667,  6673,  6674,  6676,  6681,  6691,  6692,  6696,  6697,  6698,
    6706,  6707,  6711,  6712,  6716,  6717,  6718,  6722,  6723,  6724,
    6725,  6728,  6729,  6733,  6734,  6738,  6739,  6743,  6744,  6748,
    6749,  6750,  6751,  6752,  6753,  6759,  6765,  6774,  6783,  6784,
    6797,  6803,  6809,  6815,  6820,  6825,  6834,  6855,  6863,  6864,
    6869,  6870,  6874,  6882,  6886,  6887,  6891,  6892,  6896,  6905,
    6909,  6910,  6914,  6922,  6923,  6927,  6928,  6932,  6933,  6938,
    6939,  6943,  6950,  6959,  6964,  6972,  6973,  6974,  6975,  6976,
    6977,  6982,  6990,  6991,  6996,  6995,  7008,  7009,  7013,  7016,
    7017,  7018,  7019,  7023,  7031,  7038,  7039,  7043,  7053,  7054,
    7058,  7059,  7062,  7064,  7068,  7080,  7081,  7085,  7092,  7105,
    7106,  7108,  7110,  7116,  7121,  7127,  7133,  7140,  7150,  7151,
    7152,  7153,  7154,  7158,  7162,  7163,  7168,  7169,  7173,  7174,
    7178,  7179,  7180,  7184,  7185,  7189,  7193,  7200,  7204,  7208,
    7215,  7219,  7223,  7227,  7240,  7252,  7253,  7257,  7258,  7262,
    7263,  7267,  7268,  7272,  7273,  7277,  7278,  7282,  7283,  7287,
    7288,  7292,  7294,  7298,  7299,  7303,  7307,  7308,  7321,  7322,
    7323,  7327,  7328,  7332,  7338,  7352,  7353,  7357,  7358,  7362,
    7363,  7371,  7370,  7416,  7415,  7429,  7441,  7440,  7459,  7458,
    7477,  7476,  7495,  7489,  7509,  7508,  7541,  7546,  7551,  7556,
    7561,  7568,  7575,  7580,  7588,  7589,  7590,  7591,  7595,  7596,
    7608,  7609,  7613,  7614,  7617,  7619,  7627,  7635,  7637,  7639,
    7640,  7648,  7649,  7653,  7662,  7660,  7674,  7688,  7687,  7701,
    7699,  7713,  7720,  7731,  7732,  7760,  7767,  7771,  7776,  7775,
    7791,  7793,  7798,  7806,  7805,  7821,  7825,  7824,  7836,  7837,
    7841,  7856,  7857,  7861,  7870,  7874,  7879,  7885,  7884,  7895,
    7904,  7894,  7919,  7928,  7937,  7946,  7955,  7961,  7967,  7976,
    7985,  8013,  8034,  8044,  8048,  8053,  8054,  8057,  8059,  8060,
    8061,  8062,  8065,  8070,  8081,  8086,  8097,  8098,  8102,  8103,
    8107,  8108,  8109,  8113,  8114,  8119,  8127,  8128,  8129,  8130,
    8135,  8134,  8163,  8173,  8190,  8193,  8200,  8204,  8211,  8215,
    8221,  8225,  8232,  8237,  8240,  8247,  8250,  8257,  8260,  8267,
    8270,  8278,  8281,  8288,  8292,  8299,  8303,  8310,  8311,  8336,
    8337,  8338,  8343,  8348,  8356,  8355,  8367,  8368,  8369,  8374,
    8373,  8395,  8396,  8400,  8401,  8405,  8406,  8407,  8412,  8411,
    8433,  8442,  8441,  8468,  8469,  8473,  8474,  8478,  8479,  8480,
    8481,  8482,  8483,  8488,  8487,  8509,  8510,  8511,  8516,  8515,
    8521,  8528,  8533,  8541,  8542,  8546,  8560,  8559,  8572,  8573,
    8577,  8578,  8582,  8592,  8602,  8603,  8608,  8607,  8618,  8619,
    8623,  8624,  8628,  8638,  8649,  8648,  8656,  8656,  8667,  8668,
    8673,  8674,  8683,  8692,  8693,  8697,  8702,  8707,  8712,  8717,
    8716,  8736,  8744,  8736,  8751,  8752,  8753,  8754,  8755,  8759,
    8766,  8773,  8775,  8786,  8787,  8791,  8792,  8820,  8850,  8852,
    8858,  8868,  8869,  8870,  8885,  8892,  8917,  8923,  8929,  8930,
    8931,  8932,  8933,  8937,  8938,  8943,  8994,  9001,  9044,  9050,
    9056,  9062,  9068,  9074,  9080,  9086,  9090,  9096,  9102,  9108,
    9114,  9120,  9124,  9130,  9140,  9146,  9154,  9160,  9170,  9176,
    9185,  9195,  9201,  9211,  9217,  9226,  9230,  9236,  9242,  9248,
    9254,  9260,  9266,  9272,  9278,  9284,  9290,  9296,  9302,  9308,
    9314,  9318,  9319,  9323,  9324,  9328,  9329,  9333,  9334,  9338,
    9339,  9340,  9341,  9342,  9343,  9347,  9348,  9352,  9353,  9354,
    9355,  9356,  9357,  9369,  9370,  9371,  9372,  9373,  9379,  9383,
    9389,  9395,  9401,  9407,  9409,  9416,  9423,  9429,  9470,  9479,
    9486,  9494,  9500,  9507,  9513,  9527,  9534,  9550,  9556,  9562,
    9570,  9576,  9582,  9588,  9594,  9609,  9621,  9627,  9633,  9639,
    9645,  9651,  9657,  9663,  9669,  9675,  9681,  9687,  9693,  9699,
    9705,  9711,  9717,  9725,  9746,  9753,  9759,  9766,  9773,  9780,
    9787,  9793,  9799,  9804,  9810,  9817,  9823,  9829,  9835,  9841,
    9847,  9865,  9871,  9877,  9884,  9891,  9906,  9912,  9918,  9924,
    9930,  9937,  9943,  9949,  9955,  9961,  9967,  9974,  9987,  9993,
    9999, 10005, 10011, 10019, 10025, 10037, 10043, 10049, 10057, 10067,
   10073, 10089, 10095, 10102, 10109, 10116, 10123, 10130, 10134, 10154,
   10153, 10226, 10266, 10268, 10273, 10274, 10278, 10279, 10283, 10284,
   10288, 10295, 10303, 10329, 10335, 10341, 10347, 10353, 10359, 10368,
   10375, 10377, 10374, 10384, 10395, 10401, 10407, 10413, 10419, 10425,
   10431, 10437, 10443, 10450, 10449, 10469, 10468, 10483, 10494, 10502,
   10518, 10519, 10524, 10529, 10532, 10535, 10534, 10551, 10553, 10559,
   10558, 10575, 10577, 10579, 10581, 10583, 10585, 10587, 10589, 10591,
   10593, 10595, 10600, 10601, 10605, 10612, 10620, 10621, 10625, 10632,
   10640, 10641, 10645, 10646, 10650, 10658, 10669, 10670, 10679, 10690,
   10691, 10697, 10698, 10718, 10720, 10724, 10722, 10739, 10737, 10755,
   10753, 10760, 10769, 10767, 10785, 10784, 10794, 10805, 10803, 10822,
   10821, 10832, 10843, 10844, 10845, 10853, 10854, 10858, 10873, 10873,
   10888, 10928, 11001, 11012, 11017, 11009, 11036, 11056, 11064, 11056,
   11073, 11072, 11095, 11112, 11095, 11119, 11123, 11149, 11150, 11155,
   11158, 11159, 11160, 11164, 11165, 11170, 11169, 11175, 11174, 11182,
   11183, 11186, 11188, 11188, 11192, 11192, 11197, 11198, 11202, 11204,
   11209, 11210, 11214, 11225, 11238, 11239, 11240, 11241, 11242, 11243,
   11244, 11245, 11246, 11247, 11248, 11249, 11253, 11254, 11255, 11256,
   11257, 11258, 11259, 11260, 11261, 11265, 11266, 11267, 11268, 11271,
   11273, 11274, 11278, 11279, 11287, 11289, 11293, 11295, 11294, 11308,
   11311, 11310, 11325, 11331, 11346, 11348, 11352, 11354, 11359, 11360,
   11380, 11411, 11415, 11416, 11420, 11433, 11435, 11440, 11439, 11474,
   11476, 11481, 11482, 11483, 11488, 11494, 11498, 11499, 11503, 11514,
   11521, 11528, 11538, 11565, 11569, 11575, 11581, 11591, 11595, 11609,
   11610, 11611, 11612, 11613, 11614, 11618, 11619, 11620, 11621, 11622,
   11626, 11627, 11628, 11629, 11630, 11634, 11635, 11636, 11637, 11641,
   11646, 11647, 11650, 11653, 11652, 11686, 11687, 11691, 11699, 11712,
   11712, 11722, 11723, 11727, 11746, 11786, 11785, 11798, 11806, 11797,
   11808, 11820, 11832, 11831, 11849, 11848, 11859, 11860, 11859, 11876,
   11883, 11904, 11925, 11937, 11942, 11941, 11951, 11957, 11964, 11969,
   11974, 11984, 11985, 11989, 12000, 12013, 12014, 12018, 12029, 12030,
   12034, 12035, 12038, 12040, 12043, 12044, 12045, 12049, 12050, 12058,
   12066, 12057, 12076, 12083, 12075, 12093, 12105, 12106, 12119, 12123,
   12124, 12140, 12141, 12145, 12154, 12155, 12156, 12158, 12157, 12168,
   12169, 12173, 12174, 12176, 12175, 12179, 12178, 12184, 12185, 12189,
   12190, 12194, 12204, 12205, 12209, 12210, 12215, 12214, 12228, 12229,
   12233, 12238, 12246, 12247, 12255, 12257, 12257, 12265, 12273, 12264,
   12295, 12296, 12300, 12308, 12309, 12313, 12323, 12324, 12331, 12330,
   12346, 12345, 12359, 12358, 12370, 12369, 12383, 12384, 12388, 12401,
   12417, 12418, 12422, 12423, 12427, 12428, 12429, 12434, 12433, 12455,
   12457, 12460, 12462, 12465, 12466, 12469, 12473, 12477, 12481, 12485,
   12489, 12493, 12497, 12501, 12509, 12512, 12522, 12521, 12536, 12543,
   12551, 12559, 12567, 12575, 12583, 12590, 12592, 12594, 12603, 12607,
   12612, 12611, 12617, 12616, 12621, 12630, 12637, 12642, 12644, 12646,
   12648, 12650, 12658, 12669, 12677, 12679, 12687, 12694, 12701, 12711,
   12718, 12724, 12733, 12741, 12745, 12750, 12755, 12759, 12766, 12773,
   12780, 12787, 12794, 12801, 12808, 12814, 12821, 12828, 12833, 12838,
   12846, 12848, 12850, 12855, 12856, 12859, 12861, 12865, 12866, 12870,
   12871, 12875, 12876, 12880, 12881, 12885, 12886, 12889, 12891, 12898,
   12909, 12908, 12924, 12923, 12930, 12931, 12932, 12933, 12934, 12938,
   12939, 12944, 12948, 12954, 12960, 12982, 12983, 12984, 12999, 12998,
   13011, 13020, 13010, 13022, 13026, 13027, 13039, 13038, 13060, 13061,
   13066, 13068, 13070, 13072, 13074, 13076, 13078, 13080, 13082, 13084,
   13086, 13088, 13090, 13092, 13094, 13096, 13098, 13100, 13102, 13107,
   13108, 13113, 13112, 13122, 13123, 13127, 13127, 13129, 13130, 13131,
   13136, 13137, 13142, 13141, 13152, 13153, 13160, 13164, 13168, 13178,
   13183, 13195, 13205, 13206, 13207, 13213, 13225, 13237, 13247, 13257,
   13224, 13265, 13266, 13270, 13271, 13275, 13276, 13288, 13292, 13293,
   13294, 13297, 13299, 13303, 13304, 13308, 13313, 13320, 13325, 13332,
   13334, 13338, 13339, 13343, 13348, 13356, 13357, 13360, 13362, 13370,
   13372, 13376, 13377, 13378, 13382, 13384, 13389, 13390, 13399, 13400,
   13404, 13405, 13409, 13429, 13453, 13465, 13476, 13495, 13503, 13515,
   13530, 13551, 13552, 13553, 13562, 13563, 13564, 13565, 13572, 13578,
   13584, 13590, 13596, 13625, 13656, 13666, 13676, 13682, 13691, 13703,
   13709, 13715, 13731, 13732, 13736, 13745, 13761, 13765, 13816, 13820,
   13838, 13842, 13922, 13947, 13978, 13979, 13995, 14005, 14009, 14015,
   14021, 14031, 14037, 14046, 14056, 14057, 14087, 14100, 14116, 14132,
   14149, 14150, 14161, 14162, 14173, 14174, 14175, 14179, 14206, 14239,
   14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262, 14263,
   14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272, 14273,
   14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282, 14283,
   14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291, 14292, 14293,
   14294, 14295, 14296, 14297, 14298, 14299, 14300, 14301, 14302, 14303,
   14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322,
   14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332,
   14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342,
   14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351, 14352,
   14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14365, 14366,
   14367, 14368, 14369, 14370, 14371, 14372, 14373, 14374, 14375, 14376,
   14377, 14378, 14379, 14380, 14381, 14382, 14383, 14384, 14385, 14386,
   14387, 14388, 14389, 14390, 14391, 14392, 14393, 14394, 14395, 14396,
   14397, 14398, 14399, 14400, 14401, 14402, 14403, 14404, 14405, 14406,
   14407, 14408, 14409, 14410, 14411, 14412, 14413, 14414, 14415, 14416,
   14417, 14418, 14419, 14420, 14421, 14422, 14423, 14424, 14425, 14426,
   14427, 14428, 14429, 14430, 14431, 14432, 14433, 14434, 14435, 14436,
   14437, 14438, 14439, 14440, 14441, 14442, 14443, 14444, 14445, 14446,
   14447, 14448, 14449, 14450, 14451, 14452, 14453, 14454, 14455, 14456,
   14457, 14458, 14459, 14460, 14461, 14462, 14463, 14464, 14465, 14466,
   14467, 14468, 14469, 14470, 14471, 14472, 14473, 14474, 14475, 14476,
   14477, 14478, 14479, 14480, 14481, 14482, 14483, 14484, 14485, 14486,
   14487, 14488, 14489, 14490, 14491, 14492, 14493, 14494, 14495, 14496,
   14497, 14498, 14499, 14500, 14501, 14502, 14503, 14504, 14505, 14506,
   14507, 14508, 14509, 14510, 14511, 14512, 14513, 14514, 14515, 14516,
   14517, 14518, 14519, 14520, 14521, 14522, 14523, 14524, 14525, 14526,
   14527, 14528, 14529, 14530, 14531, 14532, 14533, 14534, 14535, 14536,
   14537, 14538, 14539, 14540, 14541, 14542, 14543, 14544, 14545, 14546,
   14547, 14548, 14549, 14550, 14551, 14552, 14553, 14554, 14555, 14556,
   14557, 14558, 14559, 14560, 14561, 14562, 14563, 14564, 14565, 14566,
   14567, 14568, 14569, 14570, 14571, 14572, 14573, 14574, 14575, 14576,
   14577, 14578, 14579, 14580, 14581, 14582, 14583, 14584, 14585, 14586,
   14587, 14588, 14589, 14590, 14591, 14592, 14593, 14594, 14595, 14596,
   14597, 14598, 14599, 14600, 14601, 14602, 14603, 14604, 14605, 14606,
   14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614, 14615, 14616,
   14617, 14618, 14619, 14620, 14621, 14622, 14623, 14624, 14625, 14626,
   14627, 14628, 14629, 14630, 14631, 14643, 14642, 14657, 14656, 14684,
   14685, 14690, 14689, 14696, 14695, 14705, 14704, 14715, 14714, 14720,
   14728, 14730, 14735, 14735, 14744, 14743, 14757, 14756, 14761, 14765,
   14766, 14767, 14771, 14772, 14773, 14774, 14778, 14779, 14780, 14781,
   14786, 14820, 14819, 14919, 14930, 14943, 14959, 14972, 14994, 15029,
   15071, 15099, 15145, 15159, 15160, 15161, 15162, 15166, 15184, 15202,
   15203, 15207, 15208, 15209, 15210, 15214, 15215, 15233, 15246, 15247,
   15248, 15254, 15260, 15271, 15282, 15286, 15291, 15290, 15299, 15300,
   15304, 15305, 15309, 15322, 15323, 15324, 15329, 15333, 15344, 15348,
   15359, 15375, 15392, 15391, 15430, 15431, 15435, 15436, 15440, 15441,
   15442, 15443, 15445, 15444, 15458, 15459, 15460, 15461, 15462, 15468,
   15468, 15473, 15478, 15488, 15498, 15502, 15511, 15511, 15516, 15522,
   15533, 15544, 15552, 15554, 15558, 15565, 15572, 15574, 15578, 15579,
   15584, 15583, 15587, 15586, 15590, 15589, 15593, 15592, 15595, 15596,
   15597, 15598, 15599, 15600, 15601, 15602, 15603, 15604, 15605, 15606,
   15607, 15608, 15609, 15610, 15611, 15612, 15613, 15614, 15615, 15616,
   15617, 15618, 15619, 15620, 15624, 15625, 15629, 15630, 15634, 15644,
   15654, 15667, 15682, 15695, 15708, 15720, 15725, 15733, 15738, 15746,
   15764, 15784, 15796, 15809, 15818, 15822, 15826, 15827, 15831, 15858,
   15860, 15864, 15868, 15872, 15879, 15880, 15884, 15885, 15889, 15890,
   15894, 15895, 15901, 15907, 15913, 15923, 15922, 15932, 15933, 15938,
   15939, 15940, 15945, 15946, 15947, 15951, 15952, 15956, 15968, 15977,
   15987, 15996, 16010, 16011, 16016, 16015, 16031, 16032, 16033, 16037,
   16038, 16042, 16042, 16066, 16067, 16071, 16072, 16073, 16077, 16081,
   16088, 16091, 16089, 16105, 16112, 16133, 16150, 16152, 16156, 16157,
   16161, 16162, 16170, 16171, 16172, 16173, 16179, 16185, 16195, 16197,
   16199, 16204, 16205, 16206, 16207, 16208, 16212, 16213, 16214, 16215,
   16216, 16217, 16227, 16228, 16233, 16246, 16259, 16261, 16263, 16268,
   16273, 16275, 16277, 16283, 16284, 16286, 16292, 16291, 16309, 16310,
   16314, 16319, 16327, 16327, 16353, 16352, 16369, 16373, 16378, 16383,
   16382, 16394, 16395, 16397, 16399, 16417, 16423, 16428, 16410, 16491,
   16509, 16534, 16566, 16571, 16579, 16602, 16530, 16668, 16688, 16701,
   16711, 16667, 16732, 16736, 16740, 16744, 16748, 16752, 16759, 16766,
   16773, 16783, 16784, 16788, 16789, 16790, 16794, 16795, 16800, 16802,
   16801, 16807, 16808, 16812, 16822
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "ARCHIVED_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED",
  "CHANGED_PAGE_BITMAPS_SYM", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM",
  "CLIENT_STATS_SYM", "CLOSE_SYM", "CLUSTERING_SYM", "COALESCE",
  "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM",
  "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM",
  "MASTER_BIND_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "NOLOCK_SYM", "NONBLOCKING_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_STATS_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "THREAD_STATS_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM",
  "TOKU_UNCOMPRESSED_SYM", "TOKU_ZLIB_SYM", "TOKU_QUICKLZ_SYM",
  "TOKU_LZMA_SYM", "TOKU_FAST_SYM", "TOKU_SMALL_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM", "WARNINGS",
  "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'",
  "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'",
  "'.'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "execute", "$@2", "execute_using",
  "execute_var_list", "execute_var_ident", "help", "$@3", "change", "$@4",
  "master_defs", "master_def", "ignore_server_id_list", "ignore_server_id",
  "master_file_def", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "$@11", "$@12", "$@13", "server_def", "server_options_list",
  "server_option", "event_tail", "$@14", "ev_schedule_time", "$@15",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "$@16",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@17",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19", "$@20",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "get_diagnostics", "which_area", "diagnostics_information",
  "statement_information", "statement_information_item",
  "simple_target_specification", "statement_information_item_name",
  "condition_number", "condition_information",
  "condition_information_item", "condition_information_item_name",
  "sp_decl_idents", "sp_opt_default", "$@21", "sp_proc_stmt",
  "sp_proc_stmt_if", "$@22", "sp_proc_stmt_statement", "$@23",
  "sp_proc_stmt_return", "$@24", "sp_proc_stmt_unlabeled", "$@25",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@26", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@27", "$@28", "$@29", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@30", "$@31",
  "searched_case_stmt", "$@32", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@33", "$@34",
  "searched_when_clause", "$@35", "$@36", "else_clause_opt",
  "sp_labeled_control", "$@37", "sp_opt_label", "sp_labeled_block", "$@38",
  "sp_unlabeled_block", "$@39", "sp_block_content", "$@40",
  "sp_unlabeled_control", "$@41", "$@42", "$@43", "$@44",
  "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@46",
  "create3", "$@47", "$@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@49", "have_partitioning", "partition_entry", "$@50",
  "partition", "part_type_def", "$@51", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "$@52", "$@53", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@54", "part_name",
  "opt_part_values", "$@55", "$@56", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@57", "$@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@60", "$@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@63", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_combo_clustering",
  "unique_combo_clustering", "unique_opt_clustering", "unique",
  "clustering", "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@67", "$@68",
  "$@69", "$@70", "$@71", "$@72", "$@73", "alter_user_list",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@74", "$@75", "$@76",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@77", "add_part_extra", "reorg_partition_rule", "$@78",
  "reorg_parts_rule", "$@79", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@80", "$@81", "$@82",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@83", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "$@84", "opt_checksum_type", "repair",
  "$@85", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@86", "binlog_base64_event", "check", "$@87",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@88", "opt_no_write_to_binlog", "rename", "$@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@92", "cache_keys_spec", "$@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@94",
  "select_part2", "$@95", "$@96", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@97", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@98", "$@99", "$@100",
  "variable", "$@101", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@102", "gorder_list",
  "in_sum_expr", "$@103", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@104", "$@105", "$@106", "$@107", "$@108", "$@109",
  "$@110", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@111", "select_derived_union", "$@112", "$@113",
  "select_init2_derived", "select_part2_derived", "$@114", "$@115",
  "select_derived", "$@116", "select_derived2", "$@117", "$@118",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@119",
  "$@120", "index_hints_list", "opt_index_hints_list", "$@121",
  "opt_key_definition", "$@122", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@123", "having_clause", "$@124", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@125", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@126",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@127", "select_var_list", "select_var_ident",
  "into", "$@128", "into_destination", "$@129", "$@130", "do", "$@131",
  "drop", "$@132", "$@133", "$@134", "$@135", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@136", "$@137",
  "replace", "$@138", "$@139", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@140", "fields",
  "insert_values", "$@141", "$@142", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@143",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@144",
  "update", "$@145", "$@146", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@147", "single_multi", "$@148", "$@149", "$@150", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@151", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@152", "show_param",
  "$@153", "$@154", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@155", "$@156", "explanable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@157", "flush_options", "$@158", "$@159", "opt_flush_lock",
  "$@160", "flush_options_list", "flush_option", "opt_table_list", "reset",
  "$@161", "reset_options", "reset_option", "$@162", "slave_reset_options",
  "purge", "$@163", "purge_options", "purge_option",
  "purge_archive_option", "kill", "kill_option", "use", "load", "$@164",
  "$@165", "$@166", "$@167", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys_nonewline",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@168", "$@169",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@170", "$@171", "$@172",
  "start_option_value_list_following_option_type", "$@173",
  "option_value_list_continued", "option_value_list", "$@174", "$@175",
  "option_value", "$@176", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@177", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "lock_variant",
  "$@178", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "unlock_variant", "handler", "$@179",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@180", "handler_rkey_mode", "revoke", "$@181", "revoke_command",
  "grant", "$@182", "grant_command", "opt_table", "grant_privileges",
  "opt_privileges", "object_privilege_list", "object_privilege", "$@183",
  "$@184", "$@185", "$@186", "opt_and", "require_list",
  "require_list_element", "grant_ident", "user_list", "grant_list",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@187", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@188",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@189",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@190", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@191",
  "view_list_opt", "view_list", "view_select", "$@192", "view_select_aux",
  "$@193", "create_view_select_paren", "create_view_select", "$@194",
  "view_check_option", "trigger_tail", "$@195", "$@196", "$@197",
  "udf_tail", "sf_tail", "$@198", "$@199", "$@200", "$@201", "$@202",
  "sp_tail", "$@203", "$@204", "$@205", "$@206", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@207", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   124,    38,
      45,    43,    42,    47,    37,    94,   126,    40,    41,    44,
      33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   657,   658,   659,   658,   658,   660,   660,   661,   661,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   663,   664,   664,   665,   666,   666,   668,   667,
     669,   669,   670,   670,   671,   673,   672,   675,   674,   676,
     676,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   678,   678,   678,   679,   680,   680,   680,   680,
     682,   681,   683,   684,   681,   685,   686,   681,   687,   688,
     681,   689,   681,   690,   681,   681,   681,   681,   681,   691,
     692,   692,   693,   693,   693,   693,   693,   693,   693,   695,
     694,   697,   696,   696,   698,   698,   698,   698,   699,   699,
     700,   700,   701,   701,   702,   702,   703,   703,   705,   704,
     706,   706,   706,   706,   706,   706,   706,   706,   706,   706,
     706,   706,   706,   707,   708,   708,   709,   709,   710,   710,
     711,   711,   711,   711,   711,   711,   711,   712,   712,   712,
     713,   713,   715,   714,   716,   716,   717,   717,   718,   718,
     719,   719,   720,   720,   721,   722,   723,   723,   724,   724,
     725,   726,   726,   726,   726,   727,   727,   728,   728,   729,
     729,   731,   730,   730,   732,   730,   733,   730,   734,   734,
     735,   735,   736,   737,   737,   738,   739,   739,   740,   740,
     740,   740,   740,   741,   742,   742,   743,   743,   744,   744,
     745,   745,   746,   746,   746,   747,   747,   747,   747,   747,
     747,   747,   747,   747,   747,   747,   747,   748,   749,   750,
     750,   751,   751,   752,   752,   753,   754,   754,   755,   755,
     756,   757,   757,   758,   759,   759,   759,   759,   759,   759,
     759,   759,   759,   759,   759,   759,   759,   760,   760,   761,
     762,   761,   763,   763,   763,   763,   763,   763,   763,   763,
     763,   763,   763,   763,   763,   765,   764,   767,   766,   769,
     768,   771,   770,   772,   773,   774,   776,   775,   777,   778,
     778,   778,   779,   779,   781,   782,   783,   780,   784,   784,
     784,   785,   785,   787,   788,   786,   790,   789,   791,   791,
     792,   792,   794,   795,   793,   797,   798,   796,   799,   799,
     801,   800,   802,   802,   804,   803,   806,   805,   808,   807,
     809,   810,   811,   809,   812,   813,   809,   814,   814,   815,
     815,   815,   816,   817,   818,   819,   819,   820,   820,   821,
     822,   823,   823,   825,   824,   826,   826,   826,   827,   827,
     827,   828,   828,   829,   829,   829,   830,   830,   830,   830,
     830,   830,   830,   830,   831,   831,   832,   832,   832,   833,
     833,   833,   833,   833,   834,   834,   835,   835,   835,   836,
     836,   836,   836,   836,   836,   836,   837,   837,   838,   838,
     838,   839,   839,   839,   840,   841,   842,   843,   844,   845,
     845,   845,   846,   847,   848,   849,   850,   851,   852,   853,
     854,   855,   855,   856,   856,   857,   857,   857,   857,   858,
     859,   858,   860,   861,   860,   862,   860,   863,   864,   864,
     866,   865,   867,   869,   868,   870,   871,   872,   871,   871,
     871,   871,   871,   873,   873,   874,   874,   875,   875,   876,
     876,   877,   878,   879,   880,   881,   881,   882,   883,   882,
     884,   882,   885,   885,   886,   887,   888,   888,   889,   889,
     890,   890,   892,   891,   893,   894,   895,   894,   896,   894,
     897,   897,   898,   898,   899,   899,   901,   902,   900,   903,
     903,   904,   904,   905,   905,   906,   906,   908,   907,   909,
     910,   910,   911,   911,   912,   912,   912,   912,   912,   912,
     912,   912,   914,   915,   913,   916,   916,   917,   917,   918,
     918,   919,   919,   920,   920,   921,   921,   922,   923,   923,
     924,   924,   925,   925,   926,   926,   926,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   928,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   929,   930,
     931,   932,   933,   933,   933,   933,   933,   933,   933,   933,
     933,   933,   933,   933,   934,   934,   934,   935,   935,   936,
     936,   936,   936,   937,   938,   938,   939,   939,   940,   940,
     941,   941,   941,   941,   941,   941,   942,   942,   943,   944,
     944,   945,   947,   946,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   949,
     948,   950,   948,   948,   948,   951,   951,   951,   951,   951,
     951,   951,   951,   952,   953,   953,   954,   954,   955,   955,
     955,   955,   955,   956,   956,   956,   956,   956,   957,   957,
     957,   958,   958,   958,   959,   960,   960,   961,   961,   961,
     962,   962,   963,   963,   964,   964,   964,   965,   965,   965,
     965,   966,   966,   967,   967,   968,   968,   969,   969,   970,
     970,   970,   970,   970,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   971,   972,   973,   973,
     974,   974,   975,   975,   976,   976,   977,   977,   978,   978,
     979,   979,   980,   981,   981,   982,   982,   983,   983,   984,
     984,   984,   985,   985,   985,   986,   986,   986,   986,   986,
     986,   986,   987,   987,   989,   988,   990,   990,   991,   992,
     992,   992,   992,   993,   994,   995,   995,   996,   997,   997,
     998,   998,   999,   999,  1000,  1001,  1001,  1002,  1002,  1003,
    1003,  1003,  1003,  1004,  1004,  1004,  1004,  1004,  1005,  1005,
    1005,  1005,  1005,  1006,  1007,  1007,  1008,  1008,  1009,  1009,
    1010,  1010,  1010,  1011,  1011,  1012,  1012,  1013,  1013,  1013,
    1014,  1015,  1016,  1017,  1018,  1019,  1019,  1020,  1020,  1021,
    1021,  1022,  1022,  1023,  1023,  1024,  1024,  1025,  1025,  1026,
    1026,  1027,  1027,  1028,  1028,  1029,  1030,  1030,  1031,  1031,
    1031,  1032,  1032,  1033,  1033,  1034,  1034,  1035,  1035,  1036,
    1036,  1038,  1037,  1039,  1037,  1037,  1040,  1037,  1041,  1037,
    1042,  1037,  1043,  1037,  1044,  1037,  1037,  1037,  1037,  1037,
    1037,  1037,  1045,  1045,  1046,  1046,  1046,  1046,  1047,  1047,
    1048,  1048,  1049,  1049,  1050,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1050,  1050,  1051,  1050,  1050,  1052,  1050,  1053,
    1050,  1050,  1050,  1050,  1050,  1054,  1055,  1055,  1057,  1056,
    1058,  1058,  1058,  1060,  1059,  1061,  1062,  1061,  1063,  1063,
    1064,  1065,  1065,  1066,  1067,  1067,  1067,  1068,  1067,  1069,
    1070,  1067,  1067,  1067,  1067,  1067,  1067,  1067,  1067,  1067,
    1067,  1067,  1067,  1067,  1067,  1067,  1067,  1071,  1071,  1071,
    1071,  1071,  1072,  1072,  1073,  1073,  1074,  1074,  1075,  1075,
    1076,  1076,  1076,  1077,  1077,  1077,  1078,  1078,  1078,  1078,
    1080,  1079,  1079,  1081,  1082,  1082,  1083,  1083,  1084,  1084,
    1084,  1084,  1085,  1086,  1086,  1087,  1087,  1088,  1088,  1089,
    1089,  1090,  1090,  1091,  1091,  1092,  1092,  1093,  1093,  1094,
    1094,  1094,  1094,  1094,  1096,  1095,  1097,  1097,  1097,  1099,
    1098,  1100,  1100,  1101,  1101,  1102,  1102,  1102,  1104,  1103,
    1105,  1107,  1106,  1108,  1108,  1109,  1109,  1110,  1110,  1110,
    1110,  1110,  1110,  1112,  1111,  1113,  1113,  1113,  1115,  1114,
    1114,  1116,  1116,  1117,  1117,  1118,  1120,  1119,  1121,  1121,
    1122,  1122,  1123,  1124,  1125,  1125,  1127,  1126,  1128,  1128,
    1129,  1129,  1130,  1131,  1133,  1132,  1135,  1134,  1136,  1136,
    1137,  1137,  1138,  1139,  1139,  1140,  1140,  1141,  1141,  1143,
    1142,  1145,  1146,  1144,  1147,  1147,  1147,  1147,  1147,  1148,
    1148,  1149,  1149,  1150,  1150,  1151,  1151,  1151,  1152,  1152,
    1152,  1153,  1153,  1153,  1154,  1154,  1155,  1156,  1157,  1157,
    1157,  1157,  1157,  1158,  1158,  1159,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1159,  1159,  1160,  1160,  1160,  1160,
    1160,  1160,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,
    1161,  1161,  1161,  1161,  1161,  1161,  1162,  1162,  1162,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,
    1162,  1163,  1163,  1164,  1164,  1165,  1165,  1166,  1166,  1167,
    1167,  1167,  1167,  1167,  1167,  1168,  1168,  1169,  1169,  1169,
    1169,  1169,  1169,  1169,  1169,  1169,  1169,  1169,  1169,  1169,
    1169,  1169,  1169,  1169,  1169,  1169,  1169,  1169,  1169,  1169,
    1169,  1169,  1169,  1169,  1169,  1169,  1169,  1170,  1170,  1170,
    1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,
    1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,
    1170,  1170,  1170,  1170,  1171,  1171,  1171,  1171,  1171,  1171,
    1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,
    1171,  1171,  1171,  1171,  1171,  1171,  1172,  1172,  1172,  1172,
    1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,
    1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,
    1172,  1173,  1173,  1173,  1173,  1173,  1173,  1173,  1173,  1175,
    1174,  1174,  1176,  1176,  1177,  1177,  1178,  1178,  1179,  1179,
    1180,  1180,  1181,  1182,  1182,  1182,  1182,  1182,  1182,  1182,
    1183,  1184,  1182,  1182,  1182,  1182,  1182,  1182,  1182,  1182,
    1182,  1182,  1182,  1185,  1182,  1187,  1186,  1188,  1188,  1188,
    1189,  1189,  1190,  1190,  1191,  1192,  1191,  1193,  1193,  1195,
    1194,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,
    1196,  1196,  1197,  1197,  1198,  1198,  1199,  1199,  1200,  1200,
    1201,  1201,  1202,  1202,  1203,  1203,  1204,  1204,  1205,  1206,
    1206,  1207,  1207,  1208,  1208,  1209,  1208,  1210,  1208,  1211,
    1208,  1208,  1212,  1208,  1213,  1208,  1208,  1214,  1208,  1215,
    1208,  1208,  1216,  1216,  1216,  1217,  1217,  1218,  1220,  1219,
    1219,  1219,  1221,  1222,  1223,  1221,  1224,  1226,  1227,  1225,
    1229,  1228,  1231,  1232,  1230,  1233,  1234,  1235,  1235,  1236,
    1236,  1236,  1236,  1237,  1237,  1239,  1238,  1240,  1238,  1241,
    1241,  1242,  1243,  1242,  1245,  1244,  1246,  1246,  1247,  1247,
    1248,  1248,  1249,  1249,  1250,  1250,  1250,  1250,  1250,  1250,
    1250,  1250,  1250,  1250,  1250,  1250,  1251,  1251,  1251,  1251,
    1251,  1251,  1251,  1251,  1251,  1252,  1252,  1252,  1252,  1253,
    1253,  1253,  1254,  1254,  1255,  1255,  1256,  1257,  1256,  1258,
    1259,  1258,  1260,  1260,  1261,  1261,  1262,  1262,  1263,  1263,
    1263,  1264,  1265,  1265,  1266,  1267,  1267,  1269,  1268,  1270,
    1270,  1271,  1271,  1271,  1272,  1272,  1273,  1273,  1274,  1275,
    1275,  1275,  1276,  1276,  1276,  1276,  1276,  1277,  1277,  1278,
    1278,  1278,  1278,  1278,  1278,  1279,  1279,  1279,  1279,  1279,
    1280,  1280,  1280,  1280,  1280,  1281,  1281,  1281,  1281,  1282,
    1283,  1283,  1284,  1285,  1284,  1286,  1286,  1286,  1287,  1289,
    1288,  1290,  1290,  1291,  1291,  1293,  1292,  1295,  1296,  1294,
    1294,  1294,  1298,  1297,  1300,  1299,  1301,  1302,  1299,  1299,
    1299,  1299,  1299,  1299,  1303,  1299,  1299,  1299,  1299,  1299,
    1299,  1304,  1304,  1305,  1306,  1307,  1307,  1308,  1309,  1309,
    1310,  1310,  1311,  1311,  1312,  1312,  1312,  1313,  1313,  1315,
    1316,  1314,  1318,  1319,  1317,  1320,  1320,  1320,  1320,  1321,
    1321,  1322,  1322,  1323,  1324,  1324,  1324,  1325,  1324,  1326,
    1326,  1327,  1327,  1328,  1327,  1329,  1327,  1330,  1330,  1331,
    1331,  1332,  1333,  1333,  1334,  1334,  1336,  1335,  1337,  1337,
    1338,  1338,  1339,  1339,  1340,  1341,  1340,  1343,  1344,  1342,
    1345,  1345,  1346,  1347,  1347,  1348,  1349,  1349,  1351,  1350,
    1353,  1352,  1354,  1352,  1355,  1352,  1356,  1356,  1357,  1357,
    1358,  1358,  1359,  1359,  1360,  1360,  1360,  1362,  1361,  1363,
    1363,  1364,  1364,  1365,  1365,  1366,  1366,  1366,  1366,  1366,
    1366,  1366,  1366,  1366,  1367,  1367,  1369,  1368,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1371,  1370,  1372,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,  1370,
    1373,  1373,  1373,  1374,  1374,  1375,  1375,  1376,  1376,  1377,
    1377,  1378,  1378,  1379,  1379,  1380,  1380,  1381,  1381,  1381,
    1383,  1382,  1384,  1382,  1385,  1385,  1385,  1385,  1385,  1386,
    1386,  1387,  1387,  1387,  1387,  1388,  1388,  1388,  1390,  1389,
    1392,  1393,  1391,  1391,  1394,  1394,  1395,  1394,  1396,  1396,
    1397,  1397,  1397,  1397,  1397,  1397,  1397,  1397,  1397,  1397,
    1397,  1397,  1397,  1397,  1397,  1397,  1397,  1397,  1397,  1398,
    1398,  1400,  1399,  1401,  1401,  1403,  1402,  1402,  1402,  1402,
    1404,  1404,  1406,  1405,  1407,  1407,  1407,  1408,  1408,  1409,
    1409,  1410,  1411,  1411,  1411,  1412,  1414,  1415,  1416,  1417,
    1413,  1418,  1418,  1419,  1419,  1420,  1420,  1420,  1421,  1421,
    1421,  1422,  1422,  1423,  1423,  1424,  1424,  1424,  1424,  1425,
    1425,  1426,  1426,  1427,  1427,  1428,  1428,  1429,  1429,  1430,
    1430,  1431,  1431,  1431,  1432,  1432,  1433,  1433,  1434,  1434,
    1435,  1435,  1436,  1437,  1437,  1437,  1437,  1438,  1438,  1438,
    1439,  1440,  1440,  1440,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1442,  1442,  1442,  1442,  1442,  1443,
    1443,  1443,  1444,  1444,  1445,  1445,  1446,  1447,  1447,  1448,
    1448,  1449,  1449,  1449,  1450,  1450,  1450,  1450,  1451,  1451,
    1451,  1452,  1452,  1453,  1454,  1454,  1455,  1456,  1457,  1458,
    1459,  1459,  1460,  1460,  1461,  1461,  1461,  1462,  1462,  1462,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1466,  1465,  1467,  1465,  1468,
    1468,  1470,  1469,  1471,  1469,  1472,  1469,  1474,  1473,  1473,
    1475,  1475,  1477,  1476,  1478,  1476,  1480,  1479,  1479,  1481,
    1481,  1481,  1482,  1482,  1482,  1482,  1483,  1483,  1483,  1483,
    1484,  1486,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,
    1487,  1487,  1487,  1488,  1488,  1488,  1488,  1489,  1490,  1491,
    1491,  1492,  1492,  1492,  1492,  1493,  1493,  1493,  1494,  1494,
    1494,  1494,  1494,  1495,  1496,  1496,  1497,  1496,  1498,  1498,
    1499,  1499,  1500,  1501,  1501,  1501,  1501,  1502,  1503,  1503,
    1504,  1504,  1505,  1504,  1506,  1506,  1507,  1507,  1508,  1508,
    1508,  1508,  1509,  1508,  1510,  1510,  1510,  1510,  1510,  1512,
    1511,  1513,  1513,  1513,  1513,  1513,  1515,  1514,  1516,  1516,
    1516,  1516,  1517,  1517,  1518,  1518,  1519,  1519,  1520,  1520,
    1522,  1521,  1523,  1521,  1524,  1521,  1525,  1521,  1521,  1521,
    1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,
    1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,  1521,
    1521,  1521,  1521,  1521,  1526,  1526,  1527,  1527,  1528,  1528,
    1528,  1529,  1529,  1529,  1529,  1530,  1530,  1531,  1531,  1532,
    1532,  1532,  1532,  1532,  1533,  1533,  1534,  1534,  1535,  1536,
    1536,  1536,  1536,  1536,  1537,  1537,  1538,  1538,  1539,  1539,
    1540,  1540,  1540,  1540,  1540,  1542,  1541,  1543,  1543,  1544,
    1544,  1544,  1545,  1545,  1545,  1546,  1546,  1547,  1548,  1548,
    1549,  1550,  1551,  1551,  1553,  1552,  1554,  1554,  1554,  1555,
    1555,  1557,  1556,  1558,  1558,  1559,  1559,  1559,  1560,  1560,
    1561,  1562,  1561,  1563,  1564,  1565,  1566,  1566,  1567,  1567,
    1568,  1568,  1568,  1568,  1568,  1568,  1568,  1568,  1569,  1569,
    1569,  1570,  1570,  1570,  1570,  1570,  1571,  1571,  1571,  1571,
    1571,  1571,  1572,  1572,  1573,  1574,  1575,  1575,  1575,  1576,
    1577,  1577,  1577,  1578,  1578,  1578,  1580,  1579,  1581,  1581,
    1582,  1582,  1584,  1583,  1586,  1585,  1585,  1587,  1587,  1589,
    1588,  1590,  1590,  1590,  1590,  1592,  1593,  1594,  1591,  1595,
    1595,  1597,  1598,  1599,  1600,  1601,  1596,  1603,  1604,  1605,
    1606,  1602,  1607,  1607,  1607,  1607,  1607,  1607,  1608,  1608,
    1608,  1609,  1609,  1610,  1610,  1610,  1611,  1611,  1612,  1613,
    1612,  1614,  1614,  1615,  1616
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     1,     0,     1,     3,     1,     3,     3,     3,     3,
       0,     7,     0,     0,    14,     0,     0,    14,     0,     0,
      14,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     0,     6,     1,     1,
       1,     3,     1,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     3,     1,     1,     0,     1,     0,     2,
       3,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       1,     1,     3,     1,     3,     3,     1,     2,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     0,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     0,     2,     0,
       3,     0,     2,     2,     2,     2,     0,     6,     2,     0,
       2,     1,     1,     3,     0,     0,     0,     7,     0,     2,
       2,     1,     1,     0,     0,     8,     0,     6,     1,     2,
       1,     2,     0,     0,     6,     0,     0,     6,     0,     2,
       0,     5,     0,     1,     0,     5,     0,     2,     0,     5,
       4,     0,     0,     8,     0,     0,     8,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     1,     1,     1,     1,     2,     3,     2,     4,     5,
       0,     5,     0,     0,     5,     0,     7,     1,     0,     1,
       0,     4,     0,     0,     3,     5,     6,     0,     4,     2,
       2,     2,     2,     0,     1,     0,     3,     0,     1,     1,
       3,     1,     4,     5,     5,     0,     2,     0,     0,     7,
       0,    10,     1,     3,     1,     1,     0,     2,     0,     3,
       1,     3,     0,     6,     1,     0,     0,     5,     0,     4,
       1,     1,     1,     3,     1,     3,     0,     0,     5,     1,
       3,     1,     1,     0,     3,     1,     3,     0,     4,     1,
       0,     1,     2,     1,     3,     4,     3,     3,     3,     4,
       4,     3,     0,     0,     6,     0,     1,     0,     1,     1,
       2,     1,     1,     0,     1,     1,     2,     1,     0,     3,
       0,     1,     1,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
       7,     8,     8,     8,     8,     2,     0,     1,     4,     0,
       1,     2,     0,     4,     3,     3,     3,     1,     2,     1,
       1,     3,     2,     3,     2,     2,     1,     3,     3,     2,
       3,     1,     2,     2,     2,     1,     2,     1,     1,     1,
       2,     3,     2,     3,     2,     2,     3,     3,     3,     0,
       6,     0,     6,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     2,     1,
       2,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     5,     0,     3,     0,     2,     3,
       0,     1,     2,     1,     1,     1,     1,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     1,     2,     1,     1,
       2,     2,     3,     1,     3,     2,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     0,     1,     1,
       2,     2,     1,     2,     2,     0,     1,     1,     1,     3,
       1,     3,     0,     1,     0,     4,     1,     1,     1,     0,
       1,     2,     1,     1,     2,     1,     3,     3,     1,     1,
       0,     2,     0,     1,     5,     0,     3,     3,     1,     0,
       2,     2,     2,     0,     3,     3,     6,     6,     1,     1,
       2,     2,     2,     1,     2,     2,     1,     1,     0,     1,
       1,     1,     1,     0,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     0,     1,     2,     0,     1,     0,
       1,     0,     1,     1,     2,     1,     2,     1,     2,     2,
       2,     3,     2,     1,     1,     1,     1,     3,     1,     1,
       1,     4,     2,     1,     4,     0,     1,     0,     2,     1,
       3,     0,     6,     0,     5,     7,     0,     5,     0,     5,
       0,     5,     0,     4,     0,    10,     3,     4,     3,     3,
       7,     4,     3,     5,     0,     3,     1,     4,     0,     3,
       0,     2,     0,     1,     0,     2,     2,     2,     2,     1,
       1,     1,     3,     4,     0,     6,     4,     0,     5,     0,
       6,     4,     3,     1,     7,     3,     1,     1,     0,     5,
       0,     3,     2,     0,     5,     0,     0,     6,     1,     3,
       1,     1,     3,     2,     3,     2,     4,     0,     6,     0,
       0,     8,     4,     4,     3,     3,     2,     2,     6,     5,
       3,     5,     1,     1,     1,     1,     1,     0,     1,     1,
       2,     2,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     1,     0,     2,     1,     0,     1,     1,     1,
       0,     6,     3,     3,     0,     1,     1,     3,     3,     6,
       2,     2,     4,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     1,     1,     3,     1,     1,     0,     2,     1,
       3,     3,     3,     1,     0,     5,     0,     1,     1,     0,
       6,     0,     1,     1,     2,     1,     1,     1,     0,     5,
       2,     0,     5,     0,     1,     1,     2,     1,     1,     1,
       1,     1,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     2,     3,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     0,     2,
       4,     3,     1,     1,     3,     4,     0,     0,     0,     2,
       2,     1,     1,     0,     2,     3,     3,     3,     2,     3,
       4,     3,     4,     3,     4,     1,     3,     4,     3,     3,
       6,     1,     5,     6,     5,     7,     6,     8,     5,     6,
       4,     4,     5,     3,     4,     1,     3,     3,     3,     3,
       3,     3,     5,     5,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     3,     2,     2,
       2,     2,     3,     3,     5,     6,     4,     4,     7,     2,
       6,     5,     6,     6,     4,     4,     5,     4,     6,     2,
       4,     4,     4,    10,     6,     8,     6,     4,     4,     6,
       4,     4,     4,     6,     4,     7,     7,     7,     6,     6,
       6,     6,     3,     4,     6,     8,     2,     2,     8,     8,
       6,     6,     1,     6,     6,     8,     8,     6,     8,     6,
       2,     8,     8,     2,     2,     2,     4,     4,     4,     4,
       3,     8,     6,     8,     4,     6,     4,     4,     4,     6,
       8,     4,     3,     6,     4,     6,     5,     8,     7,    10,
       1,     6,     4,     4,     4,     4,     4,     6,     4,     0,
       5,     6,     2,     3,     0,     4,     0,     3,     0,     1,
       1,     3,     4,     4,     5,     4,     4,     4,     5,     4,
       0,     0,     7,     4,     5,     4,     5,     4,     4,     4,
       4,     4,     5,     0,     8,     0,     3,     3,     1,     4,
       0,     1,     0,     2,     0,     0,     4,     4,     2,     0,
       3,     2,     3,     2,     1,     2,     1,     2,     1,     2,
       2,     2,     0,     1,     1,     3,     1,     3,     1,     3,
       0,     1,     0,     2,     4,     5,     1,     1,     1,     1,
       4,     1,     3,     3,     3,     0,     6,     0,     6,     0,
       8,     4,     0,     8,     0,    10,     6,     0,     8,     0,
      10,     6,     1,     2,     2,     0,     1,     5,     0,     5,
       3,     5,     2,     0,     0,     7,     1,     0,     0,     6,
       0,     3,     0,     0,     5,     0,     1,     0,     1,     0,
       2,     3,     3,     1,     1,     0,     7,     0,     7,     1,
       2,     0,     0,     2,     0,     2,     0,     1,     1,     1,
       1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     0,     2,     0,     1,     0,     0,     3,     0,
       0,     3,     2,     0,     0,     4,     4,     2,     0,     1,
       1,     3,     3,     1,     2,     0,     1,     0,     4,     4,
       2,     0,     1,     1,     0,     1,     0,     1,     2,     1,
       3,     3,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     0,     6,     0,     1,     3,     1,     0,
       2,     3,     1,     2,     1,     0,     3,     0,     0,     7,
       2,     1,     0,     3,     0,     7,     0,     0,     8,     4,
       6,     4,     4,     4,     0,     6,     4,     4,     4,     5,
       4,     1,     3,     1,     2,     1,     3,     1,     0,     2,
       0,     1,     0,     1,     1,     2,     3,     1,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     7,     0,     5,     0,     6,     1,     3,     2,     4,
       0,     2,     0,     2,     1,     1,     1,     0,     4,     0,
       1,     0,     1,     1,     3,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     0,     3,     0,     3,     2,     4,
       4,     3,     4,     4,     1,     3,     3,     6,     2,     2,
       0,     6,     0,     6,     5,     2,     1,     5,     5,     2,
       2,     1,     4,     3,     2,     3,     2,     2,     1,     3,
       4,     3,     3,     2,     2,     3,     3,     2,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     0,     1,     0,     2,     0,
       1,     1,     1,     0,     2,     0,     2,     0,     2,     2,
       0,     4,     0,     4,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     1,     3,     0,     1,     1,     0,     4,
       0,     0,     5,     1,     0,     3,     0,     3,     3,     1,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     0,     3,     3,     1,     0,     3,     1,     2,     1,
       0,     1,     0,     3,     3,     3,     3,     2,     2,     2,
       2,     3,     0,     1,     1,     2,     0,     0,     0,     0,
      22,     1,     1,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     4,     0,     3,     1,
       1,     0,     3,     2,     3,     1,     1,     2,     0,     2,
       3,     1,     5,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     2,     1,     1,     3,     5,     1,     1,     1,     1,
       1,     3,     4,     5,     1,     5,     3,     2,     1,     3,
       2,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     0,     6,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     2,
       0,     2,     0,     2,     0,     4,     0,     3,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     2,     2,     2,
       3,     0,     4,     4,     6,     2,     3,     3,     3,     5,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     2,
       2,     2,     2,     2,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     2,     3,     3,     0,     3,     1,     1,
       1,     3,     3,     1,     1,     2,     2,     2,     1,     1,
       4,     3,     0,     7,     1,     2,     1,     1,     1,     1,
       1,     1,     0,     5,     1,     1,     1,     1,     1,     0,
       4,     6,     6,     6,     7,     5,     0,     4,     8,     8,
       8,     6,     0,     1,     1,     2,     0,     1,     1,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     2,     0,     1,     3,     1,     2,     2,
       2,     1,     3,     3,     1,     1,     3,     1,     3,     4,
       5,     4,     6,     1,     0,     3,     3,     1,     1,     0,
       2,     2,     2,     2,     0,     2,     0,     3,     2,     1,
       2,     2,     2,     2,     2,     0,     3,     0,     1,     0,
       3,     2,     0,     1,     2,     0,     1,     4,     4,     5,
       2,     3,     0,     1,     0,     4,     0,     1,     1,     0,
       1,     0,     2,     2,     1,     0,     1,     1,     2,     3,
       2,     0,     6,     3,     0,     0,     0,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     1,     2,     1,     2,
       3,     3,     3,     0,     3,     3,     0,     7,     0,     3,
       1,     3,     0,     3,     0,     3,     4,     1,     3,     0,
       3,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2654,  1095,  2585,     0,     0,     0,     0,     0,     0,
    2587,   123,    63,  1718,  1839,  1840,  1622,  1650,     2,     0,
    1095,   269,   173,     0,    75,  1659,     0,  1902,     0,     0,
    1095,   483,     0,  1892,     0,     0,  1095,  1662,  1881,   246,
     173,  2587,     0,  1141,  2385,  1756,     0,     0,     0,  1739,
       0,     0,  1707,     0,     0,     0,     0,     3,     8,    19,
       0,    39,    24,    29,    14,    18,    13,    52,    46,    26,
      37,    10,    54,    55,    16,    43,    11,    12,    15,    35,
      42,    36,    38,    50,  1132,    22,    23,    30,    44,    59,
      20,    56,    53,    21,  1841,    25,    45,    40,    32,    60,
      33,    51,    34,    58,    28,    47,    27,     9,    17,    48,
      49,    41,    61,    31,    57,     0,   942,     0,     0,  1019,
       0,     0,     0,     0,   173,     0,   922,  2652,  2653,  2654,
    1097,  1096,     0,  2587,  2007,  1080,  1106,  2070,  2071,  2072,
    2073,  2074,  2075,  2076,  2078,  2077,  2021,  2079,  2081,  2080,
    2082,  2083,  2022,  2023,  2084,  2085,  2086,  2088,  2087,  2089,
    2024,  2025,  2090,  2091,  2092,  2093,  2094,  2026,  2027,  2095,
    2098,  2097,  2096,  2028,  2099,  2100,  2101,  2104,  2103,  2102,
    2029,  2105,  2030,  2106,  2107,  2108,  2109,  2110,  2111,  2112,
    2114,  2113,  2031,  2115,  2116,  2117,  2118,  2119,  2121,  2120,
    2122,  2123,  2124,  2032,  2125,  2126,  2127,  2128,  2129,  2130,
    2131,  2132,  2133,  2033,  2134,  2135,  2136,  2156,  2034,  2137,
    2140,  2139,  2138,  2141,  2142,  2143,  2145,  2144,  2146,  2147,
    2035,  2148,  2149,  2150,  2151,  2152,  2154,  2153,  2158,  2159,
    2160,  2036,  2037,  2155,  2157,  2364,  2161,  2163,  2162,  2164,
    2166,  2165,  2038,  2167,  2039,  2040,  2168,  2169,  2004,  2170,
    2005,  2172,  2174,  2175,  2171,  2176,  2181,  2041,  2173,  2177,
    2178,  2179,  2180,  2182,  2042,  2183,  2184,  2185,  2186,  2187,
    2188,  2189,  2190,  2191,  2192,  2214,  2203,  2205,  2196,  2198,
    2199,  2201,  2197,  2204,  2202,  2208,  2207,  2209,  2210,  2211,
    2212,  2213,  2206,  2194,  2200,  2195,  2215,  2216,  2193,  2217,
    2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,  2227,
    2229,  2228,  2230,  2231,  2232,  2233,  2234,  2235,  2237,  2236,
    2238,  2239,  2240,  2242,  2241,  2244,  2245,  2043,  2243,  2246,
    2247,  2248,  2249,  2250,  2251,  2044,  2045,  2046,  2252,  2253,
    2047,  2254,  2256,  2255,  2257,  2258,  2259,  2260,  2261,  2262,
    2263,  2048,  2049,  2264,  2265,  2266,  2267,  2268,  2269,  2270,
    2271,  2272,  2273,  2274,  2275,  2276,  2277,  2279,  2278,  2280,
    2281,  2282,  2283,  2284,  2285,  2286,  2050,  2287,  2051,  2288,
    2289,  2052,  2290,  2053,  2291,  2292,  2293,  2294,  2054,  2295,
    2296,  2297,  2299,  2300,  2298,  2301,  2055,  2302,  2303,  2304,
    2056,  2306,  2305,  2307,  2057,  2309,  2310,  2058,  2308,  2060,
    2311,  2312,  2059,  2061,  2313,  2314,  2315,  2316,  2317,  2319,
    2318,  2320,  2321,  2322,  2062,  2326,  2323,  2324,  2325,  2327,
    2063,  2328,  2329,  2330,  2331,  2332,  2334,  2333,  2335,  2336,
    2337,  2338,  2341,  2343,  2339,  2342,  2340,  2344,  2345,  2346,
    2347,  2348,  2351,  2352,  2353,  2354,  2355,  2356,  2357,  2358,
    2360,  2359,  2349,  2350,  2064,  2361,  2362,  2363,  2365,  2366,
    2368,  2367,  2065,  2066,  2369,  2370,  2069,  2371,  2372,  2373,
    2376,  2374,  2375,  2378,  2377,  2379,  2381,  2380,  2067,  2382,
    2068,  2383,  2384,   192,  2010,   175,  2011,  2020,     0,  2459,
    2458,  1064,  1081,  2588,  2589,   871,   578,   872,     0,     0,
     873,     0,   577,   870,   173,  2654,   128,     0,   574,   575,
       0,   864,   866,   867,   865,     0,     0,  1732,     0,  1648,
    1648,  1648,     0,     0,  1648,  1648,     0,  1651,  1648,   173,
    1648,     0,    68,  1848,   270,     0,  2496,     0,     0,     0,
    2003,     0,  1665,     0,  1903,  1904,     0,  1911,     0,  1912,
    1906,     0,  2459,  2453,  2456,     0,     0,     0,     0,     0,
     173,  1098,     0,  1716,     0,   236,   245,   247,   248,   244,
    2489,  2589,  2600,  1133,  1139,  1151,  2387,     0,  1819,   248,
    1051,  1034,  1051,  1740,  1737,     0,  2468,  2469,  2467,  1716,
    1905,  2711,     0,     0,     0,  2707,     0,  2712,     0,  1141,
       0,     0,     1,     5,     0,     0,  2151,  2037,  2256,  1832,
    1830,  1998,     0,   913,   943,     0,   918,     0,   916,  2016,
    2015,  2014,     0,   929,   928,   926,     0,   447,     0,     0,
       0,  2663,   920,  1078,  2586,     0,   194,     0,    77,     0,
       0,     0,  2592,     0,     0,     0,     0,   127,     0,     0,
       0,   124,  1166,  1166,  2654,  2656,  2658,   578,   576,     0,
     868,   869,     0,     0,  1736,  1735,  1734,     0,  1732,  2071,
    2021,  2083,     0,  1971,     0,     0,     0,  1420,     0,  2026,
       0,  2099,  2101,  2031,     0,     0,  1173,  1173,   737,     0,
       0,     0,  2123,  2124,  1977,     0,     0,     0,  1968,  1978,
    2037,  2163,  2164,     0,  1970,  2169,     0,     0,     0,     0,
    2187,  1975,     0,     0,  2224,  2226,     0,     0,  2230,  2231,
    2232,  2233,  1954,  1228,     0,   737,  1967,  1974,  2249,  1960,
    2257,  2262,  2263,     0,  2272,     0,     0,  2294,     0,  2300,
    2298,  2304,     0,     0,  2331,     0,     0,   737,  1953,  2351,
    2352,  2353,  2354,     0,  1969,  2064,  1976,     0,  2371,  1173,
     737,   737,     0,     0,     0,  2379,  2381,  2384,     0,     0,
       0,  2624,  1227,     0,  1385,     0,  1302,  1414,  1185,  1191,
    1205,     0,  1220,  1238,  1239,  1241,  1340,  1240,  1246,  1245,
    1623,  1964,  1244,  1243,  1965,  1966,  1237,  1988,  2010,  1987,
       0,     0,     0,     0,     0,     0,     0,     0,  1652,     0,
       0,  1634,  1648,    70,     0,     0,     0,  2000,  1529,  2471,
    2472,     0,    76,  1667,  1668,  1666,  1018,     0,  1901,     0,
    1915,     0,     0,     0,  1093,   493,   484,     0,     0,  1814,
       0,  1813,     0,  1893,  2601,     0,     0,  1069,  1670,  1717,
       0,  1669,  1889,  1887,     0,  1885,  1882,  1884,   237,     0,
       0,   267,     0,  2595,  2592,  2602,  2637,  2632,  2631,  2634,
    2635,  1157,  2636,  1156,  2633,  2630,  1166,  1152,  1154,  1155,
       0,   781,     0,     0,  2409,  2410,  2237,  2257,  2411,  2349,
       0,     0,  2430,  2386,  2395,  2391,     0,     0,   781,  1827,
    1827,     0,     0,  1827,     0,  1564,  1817,  1820,     0,  2413,
    1788,   862,   861,  1827,   860,  2414,  1813,     0,  1764,  1776,
       0,  1741,  1781,     0,  2415,     0,  1816,     0,  1827,  1827,
    1827,  1564,  1827,     0,  1757,     0,     0,     0,     0,   243,
    1056,  1055,  1030,  1052,  1053,     0,     0,  1033,  1035,  1036,
    1032,     0,  2724,  1018,  1959,  1958,  2008,  2708,  1957,  2716,
    2718,  2704,  2706,  2713,  1135,     0,  2606,     6,    62,     0,
       0,  1845,  2661,  2662,  2660,   797,     0,  1173,  2017,  2655,
     176,   927,     0,   448,   176,     0,     0,     0,     0,     0,
     449,   450,   382,   931,     0,   911,   924,     0,     0,   923,
    2663,     0,     0,  1108,  1110,  1109,  1126,   196,   193,   174,
       0,  1066,  1641,  1643,  1083,  2591,     0,     0,  2593,  2597,
    1226,  1225,     0,   121,   126,     0,     0,     0,  2563,   125,
    2557,  2659,  1166,  1166,  1166,  2651,     0,  2639,  2646,  2647,
    2650,  2649,  2648,  2645,     0,  2638,  2641,  2642,  2644,  2643,
    2663,  2657,     0,   874,   874,   874,     0,  1719,  1722,  1726,
    1730,  1733,     0,     0,  1534,  1259,  1534,  1534,  1534,  1421,
       0,     0,     0,     0,     0,     0,     0,     0,  1534,     0,
    1296,  1269,     0,  1297,     0,     0,     0,  1979,     0,     0,
       0,  2624,     0,     0,     0,     0,  1390,     0,     0,     0,
    2624,     0,     0,     0,     0,     0,  1416,  1418,  1987,  1534,
       0,     0,  1534,     0,     0,     0,     0,     0,  1178,   777,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1534,  1534,     0,     0,  1534,  1310,  1981,
       0,     0,     0,  1980,     0,     0,     0,  1973,  1972,  1955,
       0,  1313,  1315,  1314,     0,  1534,  1534,     0,     0,     0,
    1249,  1248,  1250,     0,     0,     0,     0,     0,     0,  1224,
    1223,  1222,  1221,     0,     0,     0,  1229,     0,  1230,  1231,
       0,  1232,  1233,  1234,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1251,     0,     0,     0,  1956,  1349,     0,
    1649,  1629,  1636,  1631,     0,  1652,  1632,  1640,   462,   461,
    1657,  1658,  1638,  1653,  1654,     0,  1637,  2555,  1633,     0,
    1624,     0,    69,     0,  1878,  1871,  1876,     0,     0,     0,
    1867,  1875,  1869,  1868,     0,     0,  1877,     0,  1870,  1874,
    1873,  1872,  1849,  1853,  1859,  1850,     0,     0,   268,   271,
     273,     0,   276,  2506,  2521,  2522,  2518,  2523,  2541,  2524,
    2528,     0,  2520,  2512,     0,  2527,     0,  2516,  2525,     0,
    2510,     0,  2526,  2531,  2542,  2514,  2519,  2497,     0,  2504,
    2508,  1530,  1531,     0,  2470,     0,  1999,     0,     0,  1116,
    1916,  1917,  1913,  2454,  2455,  1529,  2457,  2460,     0,   494,
       0,     0,   505,     0,     0,    65,    66,     0,     0,     0,
    1100,     0,  1099,  1103,     0,     0,     0,  1673,  1663,  1672,
    1455,  1888,  1890,     0,   235,   260,   255,   263,   257,   259,
     258,   264,   265,   266,   261,   256,   262,   249,     0,  2506,
       0,  2490,     0,  2596,     0,  2598,  2615,  1140,  2603,  1163,
    1142,  1162,     0,  1153,     0,  2389,     0,   780,     0,   783,
     785,  1692,  1693,   784,   793,     0,   782,     0,     0,     0,
    2416,     0,   789,   791,   790,  2425,   788,     0,     0,  2400,
    2421,  1823,     0,     0,  1797,  1787,     0,   578,     0,     0,
       0,     0,     0,     0,  1758,     0,     0,   621,     0,  1780,
    1565,  1821,  1822,  1827,     0,     0,  1827,     0,  1801,  1793,
    1817,     0,  1827,  1753,     0,     0,  1745,  1750,  1746,     0,
    1752,  1751,  1754,  1742,  1743,  1823,  1769,  1794,  1817,  1800,
    1799,  1798,  1779,  1786,     0,  1768,  1775,     0,  1784,  1817,
    1817,  1827,  1827,  1057,     0,  1040,  1041,     0,     0,  1738,
    1458,     0,     0,  2705,  2719,  2703,  2714,  2715,  2702,  1136,
    2607,  1134,  2608,     0,     7,     4,  1844,  1834,  1835,  1836,
    1837,  1838,  1833,  1831,  1846,  1847,   798,   797,   569,   572,
     571,     0,     0,  2019,     0,   919,     0,   436,   917,     0,
       0,   414,   393,   414,   451,     0,     0,   797,   934,     0,
       0,   921,  1079,     0,     0,   482,  1126,  1112,  1128,     0,
     197,   199,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    78,    79,   101,  1068,
    1067,     0,  1065,  1091,  1090,  1088,     0,  1089,  1087,  1082,
    1084,  1085,  2590,  2594,   579,   797,   424,     0,   385,     0,
       0,     0,     0,     0,   578,     0,     0,  2640,   110,   875,
       0,     0,     0,  1724,  1645,  1455,  1647,  1998,     0,     0,
       0,  1728,     0,     0,  1535,  1534,     0,  1399,     0,     0,
       0,     0,  1422,     0,     0,     0,     0,     0,     0,     0,
    1370,     0,  1399,  1174,     0,   738,  1320,     0,     0,     0,
       0,     0,     0,  1505,  1506,  1507,  1508,  1516,  1509,  1510,
    1511,  1518,  1523,  1512,  1513,  1519,  1520,  1521,  1514,  1522,
    1517,  1515,  1524,     0,  1504,     0,     0,  1528,  1525,  1527,
    1526,     0,  1391,  1383,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1534,     0,     0,     0,  1534,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1332,     0,     0,
       0,     0,     0,  1534,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1292,     0,  1990,  1989,     0,     0,
       0,   830,     0,  1253,     0,  1252,  1467,     0,  2609,  2625,
       0,  2416,  1386,  1388,     0,  1176,  1175,  1177,  1188,  1181,
    1186,  1179,  1183,     0,  1235,  2078,  1189,     0,     0,  1217,
    2624,  1543,  1218,  1203,  1208,  1209,     0,  1206,  1207,     0,
    1211,     0,  1210,  1214,  1215,  1216,  1219,     0,     0,     0,
       0,  1242,  1247,  1415,  1166,  1991,     0,  1626,  1639,  1815,
    1655,  1694,     0,  1020,     0,     0,    71,    73,  1864,  1861,
    1860,  1862,  1866,  1865,  1863,     0,  1879,  2123,  2351,  2354,
     280,     0,   253,   252,   254,   277,     0,     0,  2507,  2505,
    2539,  2538,  2543,     0,  2540,  2536,  2529,  2564,  2533,     0,
    2564,  2535,  2534,  2564,  2530,  2537,  2564,  2502,     0,  1533,
    2159,  2241,     0,  1536,  2474,  1660,  2723,     0,  1914,     0,
       0,     0,  1094,     0,  1166,   492,   491,   490,   489,     0,
     507,   487,   495,    67,     0,     0,  1896,  1600,  1601,  1597,
    1595,  1596,  1895,  1598,  1599,     0,     0,  1894,     0,     0,
       0,     0,  1071,  1671,     0,     0,  1644,  1456,  1891,  1886,
    1883,     0,     0,  2505,     0,  2502,  2599,  2617,  2616,  2604,
    1166,  1555,  1167,  1167,  1987,     0,     0,     0,  2432,     0,
    2427,  2426,     0,     0,     0,  2445,  2428,     0,     0,  2394,
    2433,  2434,  2437,     0,     0,     0,     0,     0,  2431,  2349,
    2396,  2397,  2402,  2392,     0,     0,  1825,  1828,  1829,     0,
       0,  1809,  1803,  1802,  1791,  1804,  1792,  1812,  1811,  1810,
    1766,  1765,  1575,  1576,  1574,  1568,  1569,  1573,  1572,  1761,
    1818,  1808,  1806,  1789,  1827,  1807,  1805,  1747,  1748,  1749,
       0,  1564,     0,  1825,  1795,  1796,  1827,  1817,     0,  1827,
    1827,  1783,  1785,     0,  1043,  1054,  1038,  1037,  1476,  1475,
       0,  1429,     0,  1431,  1428,  1427,  1426,     0,  1475,  2709,
    2717,  2721,     0,  1564,  2614,  2612,   570,  1694,  1694,     0,
    2018,     0,     0,     0,     0,     0,     0,     0,   177,   186,
       0,     0,   391,   392,  1694,   390,   437,   438,   441,   442,
     443,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     444,  1694,  1694,   387,   415,   416,   419,   420,   421,   422,
     423,   383,     0,   388,     0,   932,  1016,  1694,  1016,     0,
    1694,  1694,  1016,  1694,     0,     0,  1694,  1694,     0,     0,
    1694,     0,     0,  1016,     0,  1694,     0,  1003,     0,     0,
    1694,  1694,  1694,  1694,  1694,  1016,     0,     0,  1694,   482,
    1694,     0,     0,  1026,     0,     0,  1694,  1694,  1694,  1694,
       0,     0,  1694,     0,  1694,   950,  1002,   582,   608,   609,
     912,   949,   951,   963,   478,     0,   981,  1005,  1006,  1004,
       0,   936,   938,  2664,  2665,  2666,  1115,  1107,  1114,  1111,
    1126,  1124,  1113,   857,   856,     0,  1127,   195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1642,  1092,  1086,   122,   797,  1694,
    1694,  1694,  1694,   389,   425,   426,   429,   430,   431,   432,
     435,   433,   434,     0,     0,   401,     0,     0,  2558,     0,
    2697,     0,     0,     0,   175,   580,     0,     0,   876,     0,
       0,     0,     0,     0,  1720,     0,  2001,  1727,  1458,  1731,
    1730,     0,  1316,     0,  1363,     0,  1365,  1366,  1367,     0,
       0,     0,     0,     0,  1317,     0,  1267,  1318,  1319,     0,
       0,     0,     0,  1369,     0,   739,     0,     0,  1270,  1271,
    1264,  1256,     0,     0,  1342,     0,     0,  1272,     0,     0,
       0,     0,     0,  1343,  1417,     0,  1419,  1991,     0,  1375,
    1324,  1277,     0,  1373,     0,  1278,  1344,  1345,  1346,  1326,
    1327,     0,  1348,     0,  1328,     0,     0,  1331,     0,     0,
    1280,  1379,  1377,     0,     0,     0,     0,  1381,  1282,     0,
       0,     0,  1281,     0,     0,     0,     0,     0,     0,     0,
    1284,     0,  1265,  1378,  1380,  1334,     0,     0,     0,     0,
       0,  1293,     0,  2618,  1466,  2626,  1467,     0,     0,  2620,
    2610,  2615,  2623,  1257,     0,     0,  1992,  1182,  1187,  1180,
    1184,  2624,     0,     0,     0,     0,  1201,  1200,     0,     0,
       0,  2624,  1543,  1204,     0,     0,  1359,  1360,  1412,     0,
    1630,  1627,  1656,  1695,     0,  2556,  1022,  1021,  1635,  1020,
      74,     0,  1858,  1880,  1851,     0,   272,   281,   274,   278,
     279,   275,  2532,     0,  2513,     0,  2517,  2511,  2515,     0,
       0,  2503,     0,  2509,  2484,  2478,  2485,  2487,  2481,  2486,
    2488,  2479,  2480,  2475,  2482,  1537,  1566,     0,  1117,  1119,
    1120,  1118,  1126,     0,     0,  2463,  2464,  2462,  2461,   497,
       0,  1586,  1587,  1585,  1588,   506,  1589,     0,   518,     0,
       0,     0,  1900,  1899,  1898,  1897,     0,  1101,  1104,  1105,
    1076,  1075,  1077,  1070,  1072,  1073,   562,  1677,     0,     0,
       0,  1683,  1664,  1674,     0,     0,   250,     0,     0,     0,
       0,     0,     0,  1161,  1458,  1615,  1158,  1146,  1566,  1556,
    1145,  1168,  1164,     0,  2388,  2390,  2451,  2452,  2449,  2450,
    2448,  2420,   796,   795,   794,   792,     0,     0,     0,     0,
    2439,  2440,     0,     0,  2417,  2418,  2419,     0,  2423,  2399,
    2400,  2401,     0,  2422,  1824,     0,  1770,     0,  1790,     0,
       0,  1763,     0,  1782,  1744,  1772,  1762,  1536,  1817,  1759,
    1760,     0,  1063,     0,  1059,  1058,     0,  1031,  1045,     0,
    1475,  1458,     0,     0,  1452,  1477,     0,  1477,  1458,  1458,
       0,  1458,  1455,  1472,     0,     0,  2720,  1557,  2613,     0,
       0,   915,   180,   183,   181,     0,   182,     0,     0,   446,
     445,     0,  1815,   439,   134,   133,   135,   136,  1583,  1584,
    1580,  1581,  1579,  1582,   138,   137,   132,   930,     0,     0,
       0,  1815,   417,   394,   395,   398,   399,   400,     0,  1017,
     905,  1095,   985,     0,   660,   905,   853,   858,   858,   983,
       0,     0,  1095,     0,     0,     0,     0,     0,  1095,     0,
       0,     0,  1694,     0,   996,   945,     0,     0,     0,     0,
       0,   997,     0,     0,   946,  1694,     0,     0,     0,     0,
       0,     0,  1095,     0,     0,   480,     0,  1095,   482,  1029,
    1028,  1027,     0,  1095,  1095,     0,     0,     0,     0,   614,
     615,   613,     0,     0,   606,   583,   797,   947,   479,   948,
     659,     0,  1023,   656,   662,  1994,     0,     0,     0,   144,
    2668,     0,  1496,   198,   102,   100,    82,  2006,    86,    88,
      81,   106,  1593,  1594,  1592,  1590,  1591,   107,    84,    85,
      87,    91,    90,    92,    93,    96,    97,    94,    89,    95,
      83,    98,   108,   109,    80,     0,     0,     0,     0,  1815,
     427,     0,     0,  1694,   384,   402,   403,   406,   407,   408,
     409,   410,   413,   411,   412,     0,  2559,  2561,     0,     0,
     378,   377,     0,   139,  2691,     0,     0,   659,   111,   478,
     581,   584,   898,   900,   899,   890,   889,   112,   115,   118,
    1646,  1730,  1458,  1536,  1999,  1536,     0,  1729,     0,     0,
    1364,  1400,     0,  1423,     0,  1261,   751,   751,   735,  1408,
     731,   751,  1404,   735,  1406,     0,     0,     0,     0,     0,
    1371,  1368,     0,     0,     0,     0,     0,  1394,     0,     0,
       0,  1266,     0,  1354,  1376,  1374,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1382,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   819,   825,   828,   829,   831,   823,     0,  1336,
    1254,  1166,  2627,  2629,  1137,     0,  2619,  2621,   907,  1387,
       0,  1198,  1194,     0,  1192,  1542,  1213,  1212,     0,     0,
       0,  1202,  1167,  1350,  1166,     0,  1413,  1993,  1007,   460,
     620,  1625,    72,  1854,     0,     0,  2568,     0,  2567,     0,
    2551,  2554,  1998,     0,     0,     0,     0,     0,  2473,  1567,
    1704,     0,  1126,  1130,  2009,  1907,  2465,  2466,     0,   498,
     499,   501,  1167,   515,   493,     0,   485,   488,     0,   497,
       0,  1074,  1151,     0,  1696,  1681,  1688,  1682,     0,     0,
       0,  1680,  1983,  1982,  1989,  2602,     0,  1502,     0,     0,
       0,     0,     0,     0,  2605,  1536,  1536,  1609,     0,     0,
    1143,  1148,  1144,  1147,     0,  1165,  1172,  1171,  1984,  1991,
    2429,     0,     0,     0,     0,  2444,  2438,  2435,  2436,     0,
    2398,  2404,  2403,  2406,  2408,  1826,  1564,  1778,  1777,  1571,
    1570,  1755,  1564,  1774,  1827,     0,     0,     0,     0,     0,
    1047,     0,     0,  2609,  1470,     0,  1454,  1453,  1478,     0,
    1458,  1477,  1477,     0,  1434,  1433,  1708,  1711,     0,  1432,
    1529,  1460,  1151,  2710,  2722,     0,   619,   618,   185,   184,
     190,   191,   452,   463,   464,   440,   131,   453,   454,   418,
       0,   396,   933,   661,   906,   968,     0,     0,     0,   655,
     905,   858,   874,   859,   905,   905,  1012,  1013,     0,     0,
     593,   590,   987,   602,   966,   957,   967,   978,   980,     0,
     592,   616,     0,     0,   604,     0,   952,   994,   995,  1020,
     587,     0,     0,   635,   636,   634,   610,   617,  1014,  1015,
     588,   589,   989,     0,  1551,  1553,  1561,   595,   594,     0,
     591,     0,   965,  1000,   973,     0,   627,   625,   622,   624,
     623,   626,   628,   629,   630,   631,   632,   633,   605,   597,
     596,   599,   598,   601,   600,   603,   962,     0,  1016,  1016,
     982,     0,   643,   644,   646,   647,  1997,     0,  1025,   984,
       0,   648,   657,   649,     0,     0,     0,   154,     0,     0,
     935,     0,   147,   145,   156,     0,     0,     0,  1499,     0,
    1500,  1497,  1498,     0,   103,   105,   459,   458,   457,   456,
     428,     0,     0,     0,  1815,   404,  2560,     0,     0,  2698,
     381,   379,   380,     0,     0,   200,   641,   642,   640,   639,
       0,   467,     0,   465,     0,   477,     0,  1918,   797,   585,
       0,     0,     0,     0,  1536,  1555,  2002,  1723,     0,  1294,
    1424,     0,     0,   752,  1401,   805,     0,  1410,     0,  1411,
     733,   732,  1403,  1405,  1409,  1407,  1260,  1268,  1341,  1263,
    1262,     0,     0,     0,  1300,  1322,     0,  1301,     0,  1392,
       0,     0,  1274,     0,  1276,     0,     0,  1356,  1325,  1347,
    1303,  1329,     0,  1279,  1255,     0,  1304,     0,  1309,  1307,
       0,  1283,     0,     0,  1290,     0,  1288,     0,  1289,     0,
    1291,  1333,  1335,     0,     0,   830,   816,   817,   818,     0,
     820,   822,   824,     0,     0,  1468,  2628,  1138,     0,     0,
    1389,  1190,     0,  1199,  1196,     0,  1193,  1168,  1361,  1351,
    1628,  1009,  1008,  1856,     0,  1852,   289,   284,   292,   286,
     288,   287,   293,   294,   295,   296,   290,   285,   291,   283,
     282,  2565,     0,  2576,     0,     0,     0,     0,     0,     0,
    1538,     0,  1661,  1121,  1126,  1130,     0,  1122,  1918,   502,
       0,     0,     0,   522,     0,   520,   496,     0,  1102,  1166,
    1678,  1690,     0,  1698,     0,     0,  1675,  1685,     0,     0,
       0,  1684,   482,     0,   251,     0,  2495,     0,     0,     0,
    1566,  1544,     0,     0,  1621,     0,  1616,  1159,     0,  1170,
    1169,     0,  2447,  2446,  2442,  2441,  2443,  2424,     0,     0,
    1771,  1773,  1767,  1062,  1061,  1060,  1044,     0,     0,  1049,
    1039,  2615,  1529,  1462,  1458,  1430,  1458,  1441,     0,     0,
    1458,  1437,  1435,  1439,     0,  1536,     0,  1494,  1166,  1986,
    1558,  1561,   397,   970,     0,   905,   854,   874,   855,     0,
     874,   874,     0,     0,   956,     0,  1083,     0,   961,   793,
     611,   993,   992,     0,   612,     0,   954,     0,  1562,  1563,
    1554,   481,   953,   975,   959,  1879,   986,   659,  1024,   835,
     727,   676,   667,   751,   670,   669,   713,   735,   681,   731,
     729,   699,   731,   731,   706,   705,   723,   709,   689,   805,
     805,   688,   726,   805,   710,   708,   712,     0,   714,   731,
     719,   707,   711,   728,   704,   701,   725,   751,   735,   735,
     685,   724,   805,     0,   717,   751,   755,   687,   805,   812,
       0,     0,   751,   753,  1996,   155,   143,     0,     0,   937,
     939,     0,     0,   940,  2670,     0,  2672,     0,  1129,     0,
      99,     0,     0,   386,   455,   405,  2562,     0,   211,  1166,
       0,     0,   201,   203,   204,     0,     0,     0,   580,  1920,
    1919,   466,   565,   586,     0,     0,     0,  1730,  1725,  1577,
       0,  1425,     0,     0,     0,     0,   799,   810,   808,   802,
       0,   806,   807,  1402,     0,     0,  1372,     0,     0,     0,
    1395,     0,     0,     0,     0,     0,     0,     0,  1258,     0,
    1352,     0,     0,     0,     0,     0,     0,  1287,  1285,  1286,
     814,  1338,     0,   827,   821,   819,   826,     0,  1566,  2609,
     908,  1195,     0,  1362,  1011,  1010,     0,     0,  2566,     0,
    2501,  2553,  2552,  2569,  2569,  2569,  1703,  1702,     0,  1701,
    1705,  1123,  1131,     0,   500,   503,     0,   495,     0,   519,
       0,   486,   563,     0,     0,     0,  1699,  1687,  2606,  1676,
    1679,  1991,  1457,  1503,     0,  2492,  2493,  2491,  1150,     0,
    1539,  1620,  1617,     0,  1610,  1612,  1614,     0,  1985,  2405,
    2407,  1046,     0,     0,  1042,  1463,  1461,  1471,     0,  1426,
    1458,  1458,     0,  1426,     0,     0,     0,  1710,  1555,  1712,
    1459,  1491,  1473,     0,  1560,     0,     0,   969,     0,     0,
       0,     0,     0,     0,   999,     0,  1023,   958,   979,  1001,
       0,   755,  1095,  1552,   974,   976,  1071,     0,   645,     0,
     839,   675,   668,   686,   684,   740,   730,     0,   740,   740,
     695,   713,   690,     0,   805,   703,   694,   715,   718,   720,
     722,   740,     0,   805,   683,   682,   692,   679,   740,   763,
       0,     0,     0,     0,   759,     0,   833,     0,     0,   663,
     756,   758,     0,   766,     0,   716,   805,   672,   813,   812,
     674,   805,   812,   740,     0,   754,   740,     0,   141,   146,
     157,   158,   925,  2669,     0,  2667,     0,  1125,  1501,   104,
       0,     0,   214,   212,   213,     0,   207,   209,   204,  2685,
       0,  2692,     0,     0,  2690,   468,   470,   478,   566,     0,
       0,  1561,   903,     0,     0,     0,  1721,  1295,   749,   747,
     750,   748,   801,   800,   804,     0,   803,   812,   736,     0,
    1298,  1299,  1323,     0,  1393,  1384,  1321,     0,  1275,  1353,
       0,     0,  1330,  1305,  1308,  1306,  1311,  1312,     0,  1337,
       0,  1158,  1158,   637,  2622,  1197,  1857,  1855,     0,     0,
    2574,  2574,  2574,  2483,     0,     0,     0,  1166,   508,     0,
     525,   524,   521,  1566,  1689,  1691,  1697,  1686,  2494,     0,
    1540,  1555,   786,  1613,     0,  1160,  1048,     0,     0,  1442,
       0,  1446,  1451,  1447,     0,  1438,  1436,     0,  1577,  1495,
       0,  1566,  1561,   972,     0,   658,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   998,  1961,   988,   482,
     990,   955,     0,   960,   607,     0,   838,     0,   843,   744,
     745,   746,   696,   741,   743,     0,   698,   666,   691,   721,
     697,     0,   693,   680,   769,   770,   772,   771,   768,   778,
     761,   779,     0,     0,   773,   774,   775,   757,   765,   767,
     760,   671,   673,   677,   678,   664,     0,   665,  1995,   148,
     941,   317,  2671,  2679,     0,  2681,  2674,   129,  2689,  2699,
     211,     0,     0,   152,     0,   202,   793,   205,  2606,  1918,
       0,   473,   877,     0,   902,     0,   879,   881,  1578,   811,
     809,     0,  1396,  1561,     0,  1355,  1357,   815,     0,  1469,
     638,  2577,     0,     0,  2573,  2571,     0,  2572,  2570,  2544,
       0,  2499,  2500,  2498,  1700,     0,     0,     0,   516,     0,
       0,   550,   564,  1548,  1561,     0,  1566,     0,  1618,  1611,
    1050,  1464,     0,     0,     0,     0,     0,  1709,  1483,  1484,
       0,     0,  1489,  1493,  1474,  1559,   971,     0,     0,   877,
       0,     0,  1963,  1962,   964,  1023,     0,   836,     0,   840,
     841,   842,     0,   834,   742,     0,   909,     0,   762,   764,
       0,   150,   343,     0,   329,   315,     0,     0,     0,   319,
     159,   162,   160,     0,   161,   167,     0,   168,   169,   170,
     171,   172,   163,   341,   342,   166,   164,   165,     0,  2012,
       0,  2013,  1141,     0,     0,  2677,     0,  2673,  2602,   178,
     208,     0,     0,   144,   153,  2693,   776,   471,   469,     0,
    2602,     0,  1694,   113,   878,   894,   893,   883,  1561,     0,
       0,   116,   880,   896,   887,   119,   882,   895,   885,   734,
       0,  1398,  1273,  1339,  2550,  2549,  2548,  2545,     0,     0,
       0,     0,     0,     0,  2575,  2579,     0,  1455,  1167,     0,
     509,     0,   512,   514,   528,     0,  1694,     0,     0,  1694,
    1694,  1694,  1694,   543,   551,   553,     0,  1549,  1550,     0,
    1545,  1547,  1541,  1602,   787,  1921,  2609,  1443,     0,  1448,
       0,  1440,  1479,  1479,  1490,     0,   877,   650,   879,   881,
     991,     0,   837,     0,     0,   805,     0,   805,   149,     0,
     142,     0,     0,   328,   331,     0,     0,   334,   324,   323,
     325,     0,   318,   317,   317,   371,   322,   368,   367,   360,
    2680,     0,  2606,     0,     0,     0,  2675,  2700,   210,  1166,
     156,     0,   475,   474,   892,     0,  1007,   884,   901,   904,
       0,  1007,   888,  1007,   886,  1561,  2546,  2580,  2583,  2581,
    2582,  2584,  2578,  1706,  1714,     0,  1908,     0,   517,   510,
       0,     0,   526,     0,  1694,  1694,     0,     0,     0,     0,
       0,   523,   552,  1694,  1561,     0,  1149,     0,  1929,  1465,
       0,     0,     0,  1487,  1485,   654,   653,   651,   652,     0,
     849,     0,   848,     0,   845,   844,   700,   910,   702,   151,
     344,   355,   358,   350,   330,     0,     0,     0,   320,   317,
       0,   304,   302,   303,   309,   310,   311,   312,   313,   314,
     305,   308,   306,   307,   317,     0,   219,     0,     0,  2678,
    2676,     0,  2682,     0,   188,   187,   179,     0,   317,  2686,
       0,  2694,  2606,   891,   114,   897,   117,   120,  1397,     0,
       0,   786,   504,   516,   513,   536,   529,   532,     0,   561,
       0,     0,   557,   558,   556,   554,   547,     0,   545,     0,
    1546,  1603,     0,     0,     0,     0,  1922,  1924,     0,  1619,
    1445,  1450,     0,  1480,     0,     0,     0,   977,   851,   852,
     850,     0,     0,     0,     0,   317,   351,     0,   326,     0,
     335,     0,     0,   217,   374,   372,   215,   362,   362,  2683,
    2684,   189,  2701,     0,   158,   178,   476,  1713,  1715,  1909,
     511,   536,     0,   534,     0,   530,   527,   531,   559,   560,
       0,   544,     0,   555,     0,     0,     0,     0,     0,  1923,
       0,     0,  1930,  1932,  1482,  1481,  1496,     0,     0,     0,
     352,   358,   348,   356,   317,     0,     0,   316,     0,   370,
     218,     0,     0,     0,   317,     0,   361,   363,   365,     0,
     140,  2695,  1935,   533,     0,   541,   537,   539,   542,   550,
     549,   546,  1605,  1927,  1928,     0,  1925,     0,     0,  1931,
       0,     0,   847,   846,     0,   349,     0,     0,   347,   327,
     332,   317,   375,   317,   229,   228,     0,   221,   297,   369,
       0,   220,  2687,   317,     0,  1921,   535,     0,     0,   548,
    1608,     0,  1606,  1926,  1934,  1933,  1488,  1486,   353,     0,
     317,     0,   317,     0,   317,     0,     0,     0,     0,     0,
     216,   317,  2696,     0,  1929,   540,   538,  1604,     0,     0,
     345,   317,   333,   338,     0,     0,   224,   298,   299,     0,
     226,  2688,     0,  1937,  1607,   317,   317,   334,   337,   376,
     373,     0,   300,   222,   223,   234,   233,     0,  1936,     0,
    1941,   317,   317,   339,   242,   240,   317,   230,   238,   232,
       0,   239,     0,   227,     0,     0,  1948,     0,   225,   241,
     301,  1939,  1940,  1938,  1943,     0,     0,  1945,  1946,     0,
    1910,   231,  1947,  1942,     0,  1949,  1951,     0,  1944,     0,
    1166,  1950,     0,  1167,  1952
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   624,  1495,    57,    58,    59,    60,    61,  1335,
      62,   833,  1252,  1796,  1797,    63,   561,    64,  1030,  1566,
    1567,  3123,  3124,  1568,    65,  2195,  3160,  4216,  3161,  4221,
    3162,  4223,  1585,   525,   526,  2038,  2039,  1055,  3144,  3110,
    3929,  3114,  4041,  4180,  4083,  2121,  3483,  3930,  3931,  4050,
     556,  2193,  1515,  4207,  2018,  4316,  2019,    66,   656,  1028,
    1539,  1540,  3501,  3502,  3763,  3503,  3755,  3756,  3757,  3758,
    4444,  4289,  4386,  4445,  4517,  4551,  4557,  4486,  4566,  4567,
    4568,  4555,   879,  4569,    67,   587,   588,   881,  1367,  1810,
    1368,    68,    69,   555,  1278,  1279,  1280,  1281,  2371,  1811,
    2366,  2367,  3279,  4487,  4553,  4572,  4290,  4291,  4187,  4292,
    4053,  4293,  4191,  4294,  4056,  4295,  4296,  4297,  4298,  4436,
    4299,  4186,  4479,  4286,  4287,  4438,  4533,  4548,  4300,  4063,
    4181,  4373,  4064,  4182,  4431,  4282,  4432,  4474,  4529,  4283,
    4374,  4477,  4377,  4301,  4307,  4446,  4302,  4308,  4303,  4068,
    4198,  4306,  4196,  4305,  4442,  4441,  4513,  2722,  3143,   643,
     644,   667,  2185,   645,  1044,  1001,  1517,  2051,  2052,  2573,
    2574,  2704,  2705,  2706,  2043,  2044,  2045,  2173,  2174,  2175,
    2025,  2026,  2027,  1521,  2022,  2023,   646,  1002,  1012,  2046,
    2047,  2048,  2710,  2177,  2178,  2179,  2180,  1240,  1241,  2992,
    2728,  3153,  3948,  3511,  4090,  4322,  3154,  3155,  2648,  3059,
    2131,    70,   576,   856,  1332,  2419,  1333,  2421,  2878,  2879,
    2880,  1855,  1856,  3828,  1860,  2418,  3988,  4333,  4131,  4132,
    2882,  4130,  2886,  3304,  3305,  3598,  3830,  3991,  4338,  4241,
    4406,  4336,  4402,  4337,  4404,  4498,  4456,  4457,  4251,  4347,
    4348,  4410,  4459,  4143,  4144,  4145,  2441,  2892,  3833,  3769,
    2167,  1507,  1508,   527,   528,   529,   664,  2729,  2106,  2730,
    2731,  3087,  2108,  2109,  2849,  1426,  3078,  3046,  3811,  3150,
    3091,  3092,  3093,  3094,  3095,  3101,  3009,  2583,  2584,  2653,
    3104,  3946,  3687,  3702,  3467,  3468,  3469,  3470,  3471,  3472,
    3473,  3179,  3180,  3177,  1103,  3892,  3893,  3894,  3173,  3174,
    3736,  3719,  3720,  3721,  3947,   796,  3910,  3530,  1393,  1394,
    3998,  1404,  1405,  2473,  1910,  2474,  1511,  3531,  3532,  3533,
    3730,  3234,  3808,  3240,  3241,  3242,  2812,  2813,  2814,  2815,
    2816,  2310,  3722,  3103,  3680,  3885,  3888,  4033,  4274,  2585,
    3010,  2586,  3014,   953,   530,  3723,   532,   533,   534,  2587,
    2588,  1599,  1600,  4093,  4101,  4105,  4094,  4106,  4102,  4095,
    4096,  4097,  4108,  4104,  2735,  3770,  3771,  3003,  3250,  4035,
      71,  1527,   995,  1004,  1000,  1020,   651,  1528,  1013,  2122,
    2659,  3742,   633,  2110,  3672,  3396,  3676,  2111,  3025,  2112,
    3383,  3657,  2113,  3413,  3674,  3882,  3026,  3027,  2114,  2115,
    2116,  3395,  3405,  4025,  3260,  3261,  3262,  2589,   125,  2358,
    3099,  2632,    72,  1473,    73,   967,   968,   969,  2517,  2518,
    2960,  3359,  3634,   962,   963,   964,  1984,  2515,    74,   659,
    1572,    75,  1345,  2433,  2434,  2435,    76,  1021,    77,    78,
     660,  1579,  1580,  1581,    79,  1328,   132,    80,   866,  1340,
    1342,  1343,    81,   655,  1022,  1023,  1024,  1025,  2127,    82,
    1847,  2398,  2399,  2400,  2401,  1536,  2661,  1537,  1538,  2136,
    3297,    83,    84,   621,  2318,   593,   885,   594,   595,  1901,
    2456,  3812,   896,   897,   898,  2920,  1380,  1381,  1382,  2461,
    2925,  1100,   797,   798,   799,   800,  1194,  1195,  3724,   801,
    1204,  1757,   802,   803,   804,   805,   806,   807,  1784,  3206,
    3207,  3550,  2345,  2346,  2347,   808,  2232,  3191,  2246,   809,
    1187,  1742,  1673,  3542,  3199,  3793,  3962,  1616,  2215,  2765,
    2845,  2312,  1125,  1126,  1090,  2222,  1622,  1991,  1992,  1993,
    1994,  1995,  3645,  3644,  3646,  4002,  3850,  4004,  3854,  2529,
    1886,  1887,  1996,  1997,  2962,  3848,  4156,  2313,  2314,  2315,
    3568,  2963,  3364,  2981,  2982,  3861,  2520,  1998,  2969,  4263,
    4011,  4012,  4366,  4365,  4013,  3859,  3860,  3650,  3651,  3119,
    3120,  3121,  2906,  1663,  1664,  1671,  1313,  1314,  1617,  2396,
    2867,  3841,  3995,  2336,  3620,  3993,  4150,  2119,  3054,  3055,
    2458,  2459,  2985,  3380,  3410,  1429,  3813,  2869,  1955,  1956,
    3776,  4556,  2817,  2677,  2993,  2416,  1874,  4256,  4414,  4501,
    4502,  3334,  3335,  3624,  3625,  2460,  2917,  3336,  3842,  4155,
      85,   538,    86,  1794,  2351,  2848,  1249,  2363,  1032,  1347,
    1603,  1604,   821,   551,  1242,  1243,  1244,    87,   562,  2397,
      88,   583,  1884,   846,   870,  1348,  1349,  2442,  2893,  2900,
    2443,  2905,  3608,  2895,  3310,  3311,  2353,  2354,  2896,  3313,
    3605,  3588,  3589,  3292,  3825,    89,   609,  3375,  2976,  2977,
    4233,  4234,   871,    90,   537,  1077,  2743,  1609,  2203,  1078,
    1079,  2206,   687,   688,    91,   971,   604,  1452,  1453,  1454,
    1971,    92,   598,   954,  2946,  2952,  1950,   862,  1245,  1433,
     957,  1434,  1936,  2496,  1414,    93,   991,   990,  1502,    94,
     629,  1503,    95,   834,  1272,  1806,  2853,  3265,  3576,  1273,
    1274,  2364,    96,   584,   876,   877,  1352,  1889,    97,   578,
     863,  1877,  1866,    98,   566,    99,   100,   850,  3298,  4331,
    4452,   570,  1849,  1322,  3512,  4258,  4356,  4357,  4359,  4422,
    4423,  4495,  4560,  4583,  4576,  4586,  4587,  4590,  4595,  4596,
     811,   977,   812,  3876,   813,   814,   815,  2901,  2902,  3381,
     816,  2903,   817,  3004,  1033,  1606,   559,   504,  2666,   640,
     978,  2875,   819,  4070,   998,  1048,   506,   507,   101,   597,
     900,  1384,   913,  1409,  1399,  1408,  1930,  2490,  1933,  2491,
    2492,  3348,  2942,  3349,  2943,   958,  1926,  1385,  2944,  1934,
    1386,  1919,  1920,  1921,  1922,  2936,  1916,  2471,   102,   573,
     853,   511,  1326,  1327,  2407,   103,   608,   104,  1315,  1843,
    1844,  2393,  2866,  2394,   105,   882,  1371,   106,   836,  1307,
    2382,  1308,  1819,  1309,  1310,  1833,  1827,  1836,  1830,  4118,
    3978,  3979,  2863,  1248,  1049,  1050,  2374,  2857,  2858,  3820,
    3981,  3580,  4124,  4125,   107,   133,   514,   662,  1039,  1374,
     108,   109,   110,   111,  1377,  1490,  2452,  1491,  2319,  1492,
    1493,  2005,  1899,  1738,  1739,  3248,  1184,  1185,  2322,  2821,
    2822,   899,   671,  1065,  1057,   126,   127,   128,   674,   675,
     129,  1018,  1019,  2660,  3116,  3485,  3745,  3746,  3935,  4078,
    4074,  4075,  4072,  4077,  1059,  3942,  4393,  4521,  1060,  1061,
    3145,  3944,  4211,  4395,  4493,  1062,  2719,  3498,  4079,  4318,
     112,   979,   618,  1488,  1483,  1485,  2001,  2536,   113,   114
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3904
static const int yypact[] =
{
    4593,  2586,   845, -3904,  -139,   225, 49271,   667,  1292,  1292,
    -164,  2541, -3904, -3904, -3904, -3904, -3904,  3233, -3904, 49271,
     845,   946, -3904, 24671, -3904, -3904,   732,   919,   223,   314,
     845, -3904, 49271, -3904,   733,  1210,   845, -3904, -3904, 42971,
   -3904,  -164, 49271, -3904,   691, -3904, 42971,  -112,   773,   731,
    1064,   327, -3904, 49271,  1833,   531,  1445,  1322, -3904, -3904,
    1150, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, 25303, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,  1418, 49271,  1504, 49271, -3904,
    1442, 49271, 41081, 49271, -3904,  1143,  1668, -3904, -3904,  1722,
   -3904, -3904,  1292,  -164, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,  1226, -3904, -3904,  1325, -3904,
   -3904, -3904, -3904, -3904,  1890, -3904,  1688, -3904,  1716, 41081,
   -3904, 49271, -3904, -3904, -3904,   924, -3904,  1412, -3904,  1429,
    1736, -3904, -3904,  1925,  1424,  1784,  1874,  1156, 11821,  1835,
    1835,  1835, 49271,  1859,  1835,  1835, 49271, -3904,  1835, -3904,
    1835,  1292, -3904, -3904, -3904,  1978, -3904, 49271,  1751,   160,
    -108, 41081,  1353, 49271, -3904, -3904, 11821, -3904,  1891, -3904,
   -3904,  1951,  1953, -3904, -3904,  1292,  2074,  1972,  1692, 49271,
   -3904, -3904,  1292,   210,   550,  1545, -3904, -3904,  1707, -3904,
   -3904,   165, -3904, -3904, -3904,  1955, -3904, 27199,  5951,  1707,
     652,  -121,   652, -3904, -3904, 49271, -3904, -3904, -3904,  1893,
   -3904, -3904,   405,   405,   405, -3904,   405, -3904,   405, -3904,
     531,  1544, -3904, -3904,  1549, 49271,   429,  2051,  1096, -3904,
   -3904,  1579,   -44, -3904,  1641, 37931, -3904, 49271, -3904, -3904,
   -3904, -3904,  1871, -3904, -3904, -3904,  1970, -3904, 37931, 24671,
   49271,  1734, -3904, -3904, -3904, 24671,  1605, 49271, -3904, 24671,
   24671,   203,    -9,  1599, 49271, 49271,  2067, -3904,  2261, 37931,
    1827, -3904,   337,  1523,  1722,  2272, -3904,  1688, -3904, 49271,
   -3904, -3904, 49271, 49271, -3904, -3904, -3904, 43601,  1156,  1660,
    1665,  1670, 16378, -3904,  1678,  1681,  1683, 11821,  1686,  1703,
    1725,  1730,  1733,  1738,  1753,  1759,  1766,  1766,  1770,  1776,
    1778,  1781,   500,  1788, -3904,  1795,  1799,  1809, -3904, -3904,
    1821,  1840,  1848,  1876, -3904,  1878,  1892,  1904, 12472,  1906,
    1909, -3904, 21503,  1917,  1936,  1943,  1947,  1971,  1987,  1992,
    2000,  2006, -3904, -3904, 11821,  1770, -3904, -3904,  2012, -3904,
    2027,  2035,  2037,  2055,  2058,  2064,  2070,  2072,  2076,  2088,
    2090,  2101,  2107,  2126,  2131,  2137,  2141,  1770, -3904,   682,
    2143,  2153,  1002,  2168, -3904,  2187, -3904,   424,  2188,  1766,
    1770,  1770,  2189,  2190,  2191,  2193,  2194,  2195, 16378, 16378,
   16378, 11821, -3904, 49271, -3904, 49271, -3904,  1933,  2732, -3904,
    2847, 16378,   191, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
    1687,  1800, -3904, -3904, -3904, -3904, -3904, -3904,  2197,  1705,
    2174, 49271, 49271, 49271,  1994, 49271, 49271, 41081,   991, 49271,
   37931, -3904,  1835,  1761,  4075, 30364,  3167, -3904,   172, -3904,
   -3904, 49271, -3904, -3904, -3904, -3904,  2173,  1872,  1933,  2355,
     221,  2477,  2489, 24671, -3904,  1400, -3904,   834,  2256, -3904,
    2578, -3904,  2412, -3904, -3904, 37931, 24671, -3904, -3904, -3904,
   22135, -3904, -3904, -3904,  2659, -3904,  2103, -3904, -3904,  1800,
    3631, -3904,  4305,  2328,    -9,  2253, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904,  2208,  1955, -3904, -3904,
   44231,   357,  2370,  2201,   448,   452, 35411,   927,   482,  1028,
   27832, 36041,  2202, -3904, -3904, -3904,   132,  2694, -3904,   -13,
     -13,  2216,  1629,   -13, 38561,  2598,  1437, -3904,   134, -3904,
    2678, -3904, -3904,   -13, -3904, -3904,  2347,  2330, -3904, -3904,
     303,  2469, -3904,  2707, -3904,   739, -3904,  2352,   -13,   -13,
     -13,  2598,   -13,  1437, -3904,  2601,  2725,   898,   826, -3904,
   -3904, -3904, -3904,  2239, -3904,   -35,  2798, -3904,  2250, -3904,
   -3904, 24671, -3904,  2173, -3904, -3904, -3904,  2252, -3904,  2533,
    2368, -3904, -3904,   770, -3904,  2262,  1066,  2754, -3904, 41081,
    1230, 39191, -3904, -3904, -3904,  2788,  2806,  1766,  2263, -3904,
   -3904, -3904,  2920, -3904, -3904,  2285,  2825,  2825,  2825,  2931,
   -3904, -3904, -3904,  2287,  2545, -3904, -3904,  2481,  2332, -3904,
    1734, 24671,  2714,  2311, -3904, -3904,  2571, 11821, -3904, -3904,
    4584,    39, -3904, -3904,   117, -3904,  2906,  2528, -3904, -3904,
   -3904, -3904,  2795, -3904, -3904,  2920,  2856,  2825,  2749,  2320,
   -3904, -3904, -3904, -3904, -3904, -3904,   224, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904,  1666, -3904, -3904, -3904, -3904, -3904,
    1734, -3904, 24671, -3904, -3904, -3904, 24671, -3904,  2326, -3904,
    2321, -3904, 11821, 11821,   343,  2907,  2969,  2969,  2969,  1933,
    2361, 11821, 11821, 11821, 11821, 11821, 11821, 11821,   344,  2336,
   -3904, -3904,   -76, -3904,  2337, 11821, 11821, -3904, 11821, 11821,
   25935, -3904,  5835, 11821, 11821,  1165,  2849, 11821, 11821, 11821,
   11821,  4029, 11821, 11821, 25935,  2988,  2350, -3904,  2346,  1032,
   11821, 11821,  1218, 11821, 11821, 11821, 11821, 11821, -3904, -3904,
   11821, 11821, 11821, 11821, 16378, 11821, 11821, 11821, 11821, 11821,
   11821,  2354, 11821,  2969,  2969, 11821, 11821,  1346, -3904, -3904,
   11821,   918,   918, -3904, 11821,  8566, 11821, -3904, -3904, -3904,
    2363, -3904, -3904, -3904, 25935,  2969,  2969, 11821, 11821, 11821,
    2907,  2907,  2907,   322,  2364,  1026, 11821, 28465,  2348, -3904,
   -3904, -3904, -3904, 11821, 11821, 11821, -3904, 16378, -3904, -3904,
    2236, -3904, -3904, -3904, 13123, 16378, 16378,  2369, 16378, 16378,
   16378, 16378, 16378,  2748, 16378, 16378, 17029, 17680, 16378, 16378,
   16378, 16378,   206,  2907, 41081, 16378, 11821, -3904, -3904, 49271,
   -3904, -3904, -3904,  2362, 24671,   991, -3904, -3904, -3904, -3904,
   -3904, -3904,  2372,   991, -3904,  2866, -3904, -3904,  2375, 24671,
   -3904,  2371, -3904,  2752, -3904, -3904, -3904,  2757,  2758,  2759,
   -3904, -3904, -3904, -3904,  2978,  2760, -3904,  2763, -3904, -3904,
   -3904, -3904, -3904,  2394, -3904, -3904, 18331, 41081, -3904,  2396,
   -3904,  2887, -3904,  2645,  2596,  1534, -3904, -3904, -3904, -3904,
   -3904,  2683, -3904, -3904,  2516, -3904,  2692, -3904, -3904,   412,
   -3904,   215, -3904, -3904, -3904, -3904, -3904, -3904,  2698,  2419,
   -3904, -3904, -3904, 49271, -3904, 49901, -3904, 22135,  -139, -3904,
   -3904, -3904,  2796, -3904, -3904,   150,  2420, -3904, 24671, -3904,
      67,    67,  2682,   814, 41081, -3904, -3904,   149,  1024,   197,
    2430,  2518,  2438, -3904,  2530, 24671, 24671, -3904, -3904, -3904,
    2695, -3904,  3089,   550, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  2454,  2947,  2645,
    2738, -3904,  2739, -3904, 49271, -3904,  1361, -3904, -3904, -3904,
    2461, -3904, 11821, -3904,    18, -3904,   132, -3904, 49271, -3904,
   -3904, -3904, -3904, -3904,  3041, 11821, -3904, 37931,   -67,  1104,
     808,   132, -3904, -3904, -3904, -3904, -3904, 49271, 44861,  2468,
   -3904,  2878,  -139, 11821, -3904, -3904,  2482,  1688, 49271, 49271,
   49271, 24671, 49271, 24671, -3904,   112,   112, -3904, 36671, -3904,
   -3904, -3904, -3904,   -13, 49271, 49271,   -13, 37931, -3904, -3904,
    1437, 49271,   -13, -3904,  2879,  2588, -3904, -3904, -3904,  2956,
   -3904, -3904,  2948,  2491, -3904,  2878, -3904,  1507,  1437, -3904,
   -3904, -3904, -3904, -3904, 24671, -3904, -3904,  1437, -3904,  1437,
    1437,   -13,   -13,  2544,   652, -3904, -3904,  2649,  -121, -3904,
     965,   405,  2751, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904,    96, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,   193, -3904, -3904,
   -3904,  2148,  3016, -3904, 41081,  2841,  -101,  2167,  2841,  2105,
    -139,   200, -3904,   200, -3904, 37931,  2980,  3948,  2792,   239,
   24671, -3904,  2513, 45491, 24671, -3904, -3904, -3904,   167,  2517,
    2520,  1933,  3009,  3011,  3012,  3015,  3017,  3019,  3025,  3026,
    3037,  3038,  3039,  3040,  3042,  3043,  3046,  3056,  3057,  3058,
    3062,  3063,  3064,  3068,  3071,  3074,  2593, -3904, -3904, -3904,
   -3904, 24671, -3904, -3904, -3904, -3904,  2636, -3904, -3904, -3904,
   -3904,  1810, -3904, -3904, -3904,   198,  1669,  2615,  2641,   127,
   37931,  3051, 49271, 49271,  1688, 49271, 49271, -3904, -3904,  1352,
    2881,  2884,  2885,  2606, -3904,  2695, -3904,  -211, 49271,  3066,
   32261, -3904,   350,  1181, -3904,  2969,  2608, -3904,  2609,  2613,
    2618, 11821,    58,   250,  1215,  1019,  1398,  1217,   463,   326,
   -3904,  2619,  2621, -3904,  2622, -3904, -3904,   512,   516,  1237,
    1249,  2625,  2627, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904,  3076, -3904,   568,  1422, -3904, -3904, -3904,
   -3904,  2629, -3904, -3904,  1280,   669,   745,   361,  2642,   756,
    1440,  1449,  2639, 25935, 49271,  2969,  2637,  1282,  1304,  2969,
    2644,   881,  1320,  1526,  1552,  1584,  1327,  1339,   892,  1600,
    2550,  1345,   908,   936,  1354,  1003,  1016, -3904,  1382,  2647,
    2651,  1074,   342,  2969,  2652,   369,  2648,  2653,  1404,  9868,
   10519, 11170,   359,  1079, -3904,  2655, -3904,  2346,  2658,  2660,
     391,   312,  1410, -3904, 11821, -3904, -3904,  1036,   116,  2701,
     123,   808, -3904,  2805, 49271,  2155,   133, -3904, -3904, -3904,
   -3904, -3904, -3904,  1049, -3904,  2654, -3904,  2662,  1902,  2667,
   11821,   190,  2667,  3483,  2181,  2181, 16378,  2569,  2890, 12472,
    1011, 12472,  1011,  2667,  2667,  2667, -3904, 16378,  2668, 16378,
   16378, -3904,  2907,  1933,  2670,  -234, 49271, -3904,  2372,   -81,
   -3904,   132, 37931,   145, 24671, 41081,  2671, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,  3502, 24671,  2753,  2762,  2765,
   -3904, 30997, -3904, -3904, -3904, -3904, 30997,    53, -3904, -3904,
   -3904, -3904, -3904,  2780, -3904, -3904, -3904,  2679, -3904, 37931,
    2679, -3904, -3904,  2679, -3904, -3904,  2679,    76,  3513, -3904,
     406,   858,  2747,  2702, -3904, -3904, -3904, 24671, -3904,  3096,
     780, 24671,  2513,  2681, -3904, -3904, -3904, -3904, -3904,  1843,
    2794, -3904,  3326, -3904, 11821,  -139, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, 11821,  -139, -3904, 37931, 37931,
   24671, 24671,   196, -3904,  1444,  2691, -3904, -3904, -3904, -3904,
   -3904,  3631, 18331,  2696, 37931,   984, -3904, -3904, -3904, -3904,
   -3904,  1619,  1933, -3904,  2686,  5336, 44231,  9217, -3904, 39821,
   -3904,  1933,   132,  2699,  2700, -3904, -3904,  3083,   680, -3904,
    2704,  2709, -3904,  2705,  2710,  2712, 44231, 11821, -3904,  1104,
   -3904, -3904, -3904, -3904,  9217,  -139,  3157, -3904,  1933,  2703,
   49271, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904,   -74, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904,   -13, -3904, -3904, -3904, -3904, -3904,
    2943,  2598,  2469,  3157, -3904, -3904,   -13,  1437, 24671,   -13,
     -13, -3904, -3904,  2857,  2768, -3904,  3177, -3904, -3904, -3904,
   49271,  3413,  2892, -3904,  2727, -3904, -3904, 24671, -3904,  2729,
   -3904,  3193,  3340,  2598, -3904, -3904, -3904,   132,   132,  3044,
   -3904,  -139,  2877,  2880,  2882,  2889,  2891,  2922, -3904, -3904,
    -139,  -139, -3904, -3904,   132, -3904,  1697, -3904, -3904, -3904,
   -3904,  -139,  -139,  -139,  -139,  2769,  -139,  -139,  1625, -3904,
   -3904,   132,   132, -3904,   577, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904,  1013, -3904,  2999, -3904,  2638,   132,  3323,  3010,
     132,   132,  3323,   132,  3020,  3022,   132,   132,  2839,  3271,
     132,  3161,  2868,  1521,  3163,   132,  3027, -3904,  2873,  3287,
     132,   132,   132,   132,   132,  3323,  3035,  3379,   132, -3904,
     132,  3045,  3047,   157,  3050,  3059,   132,   132,   132,   132,
    1022, 49271,   132,  3060,   132, -3904, -3904,  6001, -3904, -3904,
   -3904, -3904, -3904, -3904,   -75, 22767, -3904, -3904, -3904, -3904,
     129, -3904,  2991, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,  2784, -3904, -3904, 11821,  2785,
    2769,  -139,  2769,  2769,  -139,  -139,  1642,  -139,  2769,  2769,
    -139,  -139,  -139,  -139,  -139,  -139,  -139,  2769,  2769,  -139,
    1676,  -139,  2769,  4584, -3904, -3904, -3904, -3904,   264,   132,
     132,   132,   132, -3904,  1386, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, 41081,  3156,  2448,   -63, 41081, -3904, 49271,
   -3904,  1611, 49271,  2789,   591,  2719,   194,   194, -3904, 24671,
   24671, 24671, 49271,  2836, -3904, 32261, -3904, -3904,   965, -3904,
    2797, 13774, -3904,  2803, -3904, 11821, -3904, -3904, -3904,   510,
   11821, 11821,  3300,  2093, -3904, 40451, -3904, -3904, -3904, 11821,
   40451,  2093, 11821, -3904,  2807, -3904,  3215,  3217, -3904, -3904,
   -3904, -3904, 11821, 11821, -3904, 11821, 11821, -3904, 11821, 11821,
   11821, 11821, 11821, -3904, -3904, 16378, -3904,  2802,  2811, -3904,
   -3904, -3904,  2812, -3904, 11821, -3904, -3904, -3904, -3904, -3904,
   -3904, 11821, -3904, 11821, -3904, 11821, 11821, -3904, 11821, 11821,
   -3904, -3904, -3904, 14425, 11821, 11821,  2813, -3904, -3904, 11821,
   11821, 11821, -3904, 11821,  1728, 11821,  1790, 11821,  1805, 11821,
   -3904, 11821, -3904, -3904, -3904, -3904, 11821,  1586,  1843,  2769,
    2815, -3904,  1645, -3904, -3904,   982, -3904,  1036,  2816, -3904,
   -3904,  1361, -3904, -3904, 41081, 11821, -3904, -3904, -3904, -3904,
   -3904, -3904, 16378,   408,  2817, 16378, -3904,  3483,  4029,  4029,
    2028, 11821,   190,  3483, 11821,  2818,  2823, -3904, 11821, 49271,
   -3904, -3904, -3904, -3904, 41081, -3904, -3904, -3904, -3904,   145,
   -3904,  2371, -3904,  2513, -3904,  3308,  2824, -3904, -3904, -3904,
   -3904, -3904, -3904, 49271, -3904,  2908, -3904, -3904, -3904, 23399,
   23399, -3904, 23399, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904,  2598,  1444, -3904,  2826,
   -3904, -3904,  2571,  2923,  2846,  3204, -3904, -3904, -3904, 49271,
   16378, -3904, -3904, -3904, -3904, -3904, -3904,  3432,  2852,  2853,
    3334,  2855,  1933, -3904,  1933, -3904,  2928, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,   822, -3904, -3904,  2858,  2858,
   20229, -3904, -3904, -3904, 49271,  3344, -3904,  3302,  3314, 23399,
   23399, 23399,  1073, -3904,   561, -3904,  1267,  3274,  2598, -3904,
    3325, 41711, -3904, 32891, -3904, -3904, -3904, 16378,  1795, -3904,
    1933, -3904, -3904, -3904, -3904, -3904,   -67,  2961,  2965,  1591,
   -3904, -3904,  3272,  3102, -3904, -3904, -3904,   132,  1933, -3904,
    2468,  2888, 29098, -3904, -3904,  1642, -3904,    64, -3904, 36671,
   36671, -3904,  3164, -3904, -3904, -3904, -3904,  2702,  1437, -3904,
   -3904,  3388, -3904,  3389, -3904,  2900,  3392, -3904,  3159,  3075,
   -3904,  1102,  3304,  3305, -3904,  3173,    72,  3173,  1102,  1102,
   25935,   965,  2695, -3904,  2769,  3231, -3904, -3904, -3904, 39821,
   37301, -3904, -3904, -3904, -3904,  3449, -3904,  3452,   254, -3904,
   -3904,  1721,   712, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,  2105,  1721,
    1721,   554, -3904,   163, -3904, -3904, -3904, -3904,  3390, -3904,
   26567,   845, -3904,   349, -3904, 26567, -3904,   167,   167, -3904,
   46121, 26567,   845,  1642,  2769, 26567,  2769, 46751,   845,  -139,
    -139,  2238,   132,  2769, -3904, -3904,  3309, 49271,  3310, 26567,
   26567, -3904, 41081, 49271, -3904,   132,  1224,  2769, 47381,  1642,
    1642, 26567,   845, 25935,  1316, -3904,  -139,   845, -3904, -3904,
   -3904, -3904, 24671,   845,   845,  3496,  2514,  2519,  2564, -3904,
   -3904, -3904,  2769, 46751, -3904, -3904,  5057, -3904, -3904, -3904,
   19597, 49271,   395,   800, -3904,  2912,    57,  1006,  3002,   280,
    2924,  2926, 48011,  1933,  2769, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,  -139,  1843,  1721,  1721,  2323,
   -3904,  3201,  3372,   132, -3904,  2340, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,  3030, -3904,  3561,  3132,  2940,
   -3904, -3904,   381, -3904, -3904,   972, 24671, 18965, -3904,  3198,
   -3904,  2835, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904,  2934,   965,  2702,  1467,  2702,  2949, -3904, 12472,  1416,
   -3904,  1933, 11821,  1933,  1931, -3904,  2946,  2946,  2951, -3904,
    2952,  2946,  3349,  2951,  3353,  2953,  2954,  1453,  2955,  2957,
    1687, -3904, 11821, 11821,  1458,   426,  1470,  -104,  1099,  1118,
     430, -3904,  1480,  2901, -3904, -3904,  1490,  1516,  1518,  1555,
    1136,  1563,  1654, 12472,  1583,   450,   506, -3904,  1589,  1168,
    1170,  1671, 11821,  1689, 11821,  1701, 11821,  1713,  1749,  1757,
    2959,  2959,   130, -3904,  2960, -3904, -3904, -3904,  2964, -3904,
   -3904,  2208,   982, -3904, -3904,  2962, -3904, -3904,  2963,  1933,
    2967, -3904, -3904, 11821, -3904,   191, -3904, -3904, 16378,   508,
    2968, -3904,  1933, -3904, -3904,  2971,  1687, -3904,  1025, -3904,
   -3904, -3904, -3904,    31,  3964, 30997, -3904,  1691, -3904, 37931,
    2966, -3904,  2970,  3029,  3061,  3065,  2975, 11821, -3904, -3904,
    3255, 24671, -3904,  3401, -3904, -3904, -3904, -3904,  2981,  2979,
   -3904, -3904, -3904,  3483,  3363,  3245, -3904, -3904,  1843, 49271,
   37931, -3904,  1955, 25935, -3904,  2989, -3904,  2989,  1173,  2997,
    1704, -3904, -3904, -3904,  2984,  2253,  1740, -3904, 18331,  3273,
   37931,  3454,  3456,  3457, -3904,  2702,  2702,   781,  3053,  3409,
   -3904, -3904, -3904, -3904, 48641, -3904, -3904, -3904, -3904,  1054,
   -3904,  3014,  3018,   170,  3236, -3904, -3904, -3904, -3904,  9217,
   -3904, -3904, -3904, -3904, -3904, -3904,  2598, -3904, -3904, -3904,
   -3904, -3904,  2598, -3904,   -13,  -139,  -139,    59,  -139,  3499,
    3535, 11821,  -190,   116, -3904,  1897, -3904, -3904, -3904,  3415,
    1102,  3173,  3173,  3417,  3301,  1077,  3023, -3904,   132, -3904,
    2470, -3904,  1955, -3904, -3904, 11821, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
    1013, -3904, -3904, -3904, -3904, -3904,  3024,  3419,  3422, -3904,
   26567,   167, -3904, -3904, 26567, 26567, -3904, -3904,    99, 46751,
   -3904, -3904, -3904, -3904, -3904, -3904,  3032, -3904, -3904,  1843,
   -3904, -3904, 37301,  -139, -3904, 26567,  3032, -3904, -3904,   461,
   -3904,  3067,  -139, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, 46751,  3034, -3904,  1409, -3904, -3904,  2074,
   -3904, 46751, -3904, -3904, -3904, 46751, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  3031,  2665,  1614,
   -3904,  3036,  3048, -3904, -3904, -3904, -3904, 49271, -3904, -3904,
   24671, -3904, -3904, -3904,  5521, 49271,  3281, -3904, 11821, 11821,
    3318, 49271,  3319, -3904,  3612, 49271,  3673, 46751, -3904,  3054,
   -3904,  3049, -3904,  1771, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904,  3069, 49271,  1721,  1830, -3904, -3904,  -139,   972, -3904,
   -3904, -3904, -3904,  3336,  3341, 49271, -3904, -3904, -3904, -3904,
    3207, -3904, 24671, -3904,  3221, -3904,  3077,   755,  4583, -3904,
    3072,  3079,  3081, 32261,  2702,  3331, -3904, -3904,  4029, -3904,
    1933, 11821,   841, -3904, -3904,   339,  3348, -3904,   968, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904,  3082,  4029,  4029, -3904, -3904, 11821, -3904,  3666,  3239,
   11821, 11821, -3904, 11821, -3904,   906,  3085,  3090, -3904, -3904,
   -3904, -3904, 11821, -3904, -3904,  4029, -3904, 11821, -3904, -3904,
   11821, -3904, 11821, 11821, -3904,  1762, -3904,  1836, -3904,  1862,
   -3904, -3904, -3904,  1843,  3087,  3458, -3904, -3904, -3904,  1843,
    3268, -3904, -3904,  1843,  2769,  2461, -3904, -3904,  1026, 49271,
   -3904, -3904,  1783, -3904, -3904, 11821, -3904, 41711, -3904, -3904,
   -3904,  3460,  3718, -3904,  3324, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, 49271,   911,  3097, 33521, 37931, 37931, 37931, 15076,
    1933,  3594, -3904, -3904, -3904,  3401,  3485, -3904,    77, -3904,
   49271,  3099,  1559, -3904,  1801, -3904, -3904,  3100, -3904,  2208,
    3095, -3904,   132, 15076,  2858,  3221, -3904, -3904,  1173, 25935,
   32891, -3904, -3904, 49271, -3904,  3558,  2320, 37931, 37931, 37931,
    2598,  3546,  2923,  2923, -3904, 29731, -3904, -3904,  3275, -3904,
   -3904, 34151, -3904, -3904, -3904, -3904, -3904, -3904, 29098, 44231,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  -139,  3595,  3360,
    1933,  1361,  3924, -3904,   965, -3904,  1102, -3904,  3508,  3509,
    1102, -3904, -3904, -3904, 25935,  2702, 15076, -3904,  2208,  1933,
    3115,  1409, -3904,   -31, 11821, 26567, -3904, -3904, -3904,  3119,
   -3904, -3904,  3644,  3646, -3904, 26567,  1810, 49271, -3904,  3041,
   -3904, -3904, -3904,  3235, -3904,  5521, -3904, 25935, -3904, -3904,
   -3904, -3904, -3904, 49271, -3904, 24671, -3904, 19597, -3904,  3136,
   -3904,  2946,  2946,  2946, -3904, -3904, -3904,  2951, -3904,  2952,
    3385, -3904,  2952,  2952, -3904, -3904, -3904, -3904, -3904,   339,
     441, -3904, -3904,   339, -3904, -3904, -3904,    83,  1311,  2952,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  2946,  2951,  2951,
   -3904, -3904,   339,  2946, -3904,  2946,  3160, -3904,   411,   103,
    2946,  2946,  2946,  3144,  3137, -3904,  1933,  4029,  3713, -3904,
   -3904,  3315,  -139,  3654, -3904,  1812, -3904,  3153, -3904, 48011,
   -3904,  2769,  2105, -3904, -3904, -3904, -3904,  3311,   977, -3904,
    3337,  3170,  3182, -3904, -3904,  -139,  3185,  3194,  6001, -3904,
   -3904, -3904,  3788, -3904, 49271, 49271, 49271,  2797, -3904,  3544,
    1420,  1933,  3195,  3199,  3200,  3205,  3807,   138, -3904,  3815,
   40451, -3904, -3904, -3904,  3206,  1826, -3904,  3208,  3214,  1873,
   -3904,   405,  3219,  1888,  1175,  1828,  3522,  3611, -3904,  3453,
   -3904,  1920,  1435,  1929,  1954,  1961,  1965, -3904, -3904, -3904,
   -3904, -3904,  3222, -3904, -3904,   183, -3904,  3223,   217,   116,
   -3904, -3904,  1834, -3904, -3904, -3904,  3704,  3602, -3904,  3676,
   -3904, -3904, -3904,   728,   728,   728,  1795,  1933,  1851, -3904,
   -3904, -3904, -3904,  3641, -3904, -3904,  3246,  3326, 49271, -3904,
    3245, -3904,  2461, 25935, 15076,  3234,  3253, -3904,  1066, -3904,
   -3904,  3228, -3904, -3904, 37931,  2320,  2320,  2320, -3904,  3856,
    3696, -3904, -3904, 41081,  3259, -3904, -3904,  3577, -3904, -3904,
   -3904, -3904,  -139,  3753, -3904, -3904, -3904,  2727,  3322,  3312,
    1102,  1102,  3381,  3316, 11821, 11821,  3266, -3904,  3331, -3904,
   -3904,    48,  2461, 11821, -3904,  1843,  3245, -3904,  1998,  3267,
    3269, 49271,  3276,  3278, -3904,  2942,   395, -3904, -3904, -3904,
   24671,  3160,   845, -3904, -3904,  3032,   822,  3279, -3904, 49271,
    3605, -3904, -3904, -3904, -3904,  1119, -3904,  3284,  1119,  1119,
   -3904,  2370, -3904,  3313,   339, -3904, -3904,  3317, -3904, -3904,
   -3904,  1119,  3291,   339, -3904, -3904, -3904, -3904,  1119, -3904,
   41081,   281,  -139,  2436, -3904,  3321, -3904,  3796,  1438, -3904,
    3160, -3904,  3671,  3679,  3578, -3904,   339, -3904, -3904,  3905,
   -3904,   339,  3905,  1119,  3582, -3904,  1119, 49271, -3904, -3904,
   -3904, -3904, -3904, -3904, 49271, -3904,  1108, -3904, -3904, -3904,
    1860,  -139, -3904, -3904, -3904,  3293,  3297, -3904, -3904, -3904,
    1006, -3904, 49271,  5521, -3904, -3904, -3904,  3198, -3904,  1128,
    1881,  1409,  3306,  1889,  1910, 36671, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, 40451, -3904,  3905, -3904,  3585,
   -3904, -3904, -3904, 11821, -3904, -3904, -3904, 11821, -3904, -3904,
    3616,  3783, -3904, -3904, -3904, -3904, -3904, -3904,  3328, -3904,
    2769,  1267,  1267, -3904, -3904, -3904, -3904, -3904,  3587,   957,
    3332,  3332,  3332, -3904, 15076,  3705,  3418, -3904, -3904,  3330,
    3355, -3904, -3904,   217, -3904, -3904, -3904, -3904,  2320, 11821,
   -3904,  3331,  2238, -3904, 29731, -3904, -3904,  -139,  1026, -3904,
    3364, -3904, -3904, -3904,  3365,  1933,  1933, 49271,  3544, -3904,
     319,   217,  1409, -3904,  1912, -3904, 49271, 49271,  1979, 49271,
   49271,  2753,  2762,  2765,  1676,  1676, -3904, -3904, -3904, -3904,
   -3904, -3904,  3738, -3904, -3904,  1982, -3904,   894,  3610, -3904,
   -3904, -3904, -3904,  1119, -3904,   405, -3904, -3904, -3904, -3904,
   -3904,   405, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904,  3623,  3374, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904,  3333, -3904, -3904,  3468,
   -3904, 55571, -3904, -3904,  1130,  3362, -3904, -3904, -3904, -3904,
    1719, 49271, 24671,  3318,  3534, -3904,  3041, -3904,  1066,   755,
    3221, -3904,   115, 49271, -3904,  3626,   144,   266, -3904, -3904,
   -3904,  3342,  3343,  1409,  2002, -3904, -3904, -3904,  3345, -3904,
   -3904, -3904,  3441,  3442, -3904, -3904,  3443, -3904, -3904,   131,
    2203, -3904, -3904, -3904, -3904,  3400, 24671, 16378,  3466, 49271,
    1489,  2344, -3904,  1414,  1409, 11821,  2598, 37301, -3904, -3904,
   -3904, -3904, 11821,  3356, 11821,  3357,  1993, -3904, -3904, -3904,
     167,   167, -3904,   319, -3904, -3904, -3904,  2003,  2014,   115,
    2016,  2030, -3904, -3904, -3904,   395,  3359, -3904, 49271, -3904,
   -3904, -3904,    71, -3904, -3904,  2038, -3904,  2066, -3904, -3904,
   11821,  3848,  3386, 49271,   862, -3904, 56831, 56831, 49271, -3904,
   -3904, -3904, -3904,  5336, -3904, -3904,   -32, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,  3976, -3904,
    3358, -3904, -3904,  1130,  3361, -3904,  1080, -3904,  2253, -3904,
   -3904,  5521,  3822,   280, -3904, -3904, -3904, -3904, -3904,  3368,
    2253,  -139,   132, -3904,   115, -3904, -3904, -3904,  1409,  3369,
    3625, -3904,   144, -3904, -3904, -3904,   266, -3904, -3904, -3904,
   11821, -3904, -3904, -3904, -3904, -3904, -3904, -3904,   372,  3645,
    2769,  2769,  2769,  2769,  2203, -3904, 25935,  2695, -3904,  1843,
   -3904,  2082, -3904, -3904, -3904,  3465,   132,  3889,  3892,   132,
     132,   132,   132,  3383,  2344, -3904,  3871, -3904, -3904, 11821,
   -3904, -3904,  1933,  3624, -3904,  3957,   116,  1933, 49271,  1933,
   49271, -3904,  3843,  3843, -3904,  3606,   115, -3904,   144,   266,
   -3904,  3245, -3904,   955,   955,   339,   405,   339,  1933, 11821,
   -3904, 11821,  3414, -3904, -3904,  3845, 49271, -3904, -3904, -3904,
   -3904, 11821, -3904, 55571, 55571, -3904, -3904, -3904, -3904,  4008,
   -3904,  3396,  1066,  3977,  3672,  3985, -3904,  2915, -3904, -3904,
    3612,  5521, -3904, -3904, -3904,  2769,  1025, -3904, -3904, -3904,
    1896,  1025, -3904,  1025, -3904,  1409, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904,  3402, -3904,   132, -3904,  3408, -3904, -3904,
   49271,  3410, -3904,  -139,   132,   132,  1024,  1024,  1843, 41081,
    3523, -3904, -3904,   132,  1409,  4035, -3904,    92,  3791, -3904,
    2094,  2108,  1506, -3904, -3904, -3904, -3904, -3904, -3904,  2111,
   -3904,  4065, -3904,   137,  3702,  3708, -3904, -3904, -3904,  1933,
    1933, -3904,    85, -3904, -3904,  3833,  3921, 11821,  1933, 52421,
    3425, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, 56201, 11821, -3904,   -32,  3976, -3904,
   -3904,  3706, -3904,  3711, -3904, -3904, -3904,  3947, 55571, -3904,
    3945, -3904,  1066, -3904, -3904, -3904, -3904, -3904, -3904, 25935,
   15076,  2238, -3904,  3466, -3904,  3447, -3904, -3904,   -41, -3904,
    -139,  -139, -3904, -3904, -3904, -3904, -3904,  2115, -3904, 41081,
   -3904, -3904,  4041,  4043,  3943,  4049,    92, -3904,  -123, -3904,
   -3904, -3904,  4050, -3904,  4051,  3455,  3459, -3904, -3904, -3904,
   -3904,  3503,  3978,  3486, 11821, 55571, -3904,  3959, -3904,  3886,
    1933,  3831,  3464, -3904,  3462,  1933,  3996, 56831, 56831, -3904,
   -3904, -3904, -3904,  3981, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904,  2118, -3904, 15727, -3904, -3904, -3904, -3904, -3904,
   41081, -3904,  3523, -3904,  3484,   405,   405,  4085,   405, -3904,
    4086,  4090,  -123, -3904, -3904, -3904, 48011, 48011,   955,   955,
   -3904,   219, -3904,  1933, 53051,  4087, 49271, -3904,  3581, -3904,
   -3904, 11821,  4001, 42341, 53681,  3497, -3904, -3904, -3904,  3685,
   -3904,  2915,  3689, -3904,  3447, -3904,  3504, -3904,  3483,  2344,
   -3904, -3904,  3792, -3904, -3904,   405, -3904,   405,   405, -3904,
    3510,  2123, -3904, -3904, 11821, -3904,  4003,  3604, -3904,  3516,
   -3904, 55571,  1933, 55571, -3904, -3904,  3950,  3517,  1197, -3904,
    3514, -3904, -3904, 55571,  3946,  3957, -3904, 15727,  3524, -3904,
   -3904,  3525,  3521, -3904, -3904, -3904, -3904, -3904,  1933,  4118,
   55571, 49271, 50531,  4021, 54311,  3988, 49271,  5521,  3992,  3993,
   -3904, 55571, -3904,  4137,  3791, -3904, -3904, -3904,  3792,  3629,
   -3904, 51161, -3904,  2342,  3747,  3569, -3904, -3904,  4080,  2576,
   -3904, -3904,   405,  3983, -3904, 55571, 55571, -3904, -3904, -3904,
   -3904, 34781, -3904, -3904, -3904, -3904, -3904,  1073, -3904,  3849,
    3559, 51791, 54941, -3904, -3904, -3904, 31629, -3904, -3904, -3904,
    4019, -3904, 11821, -3904,    36, 20861,  3732, 34781, -3904, -3904,
    1933, -3904, -3904, -3904, -3904, 41081,  2127, -3904, -3904, 25935,
   -3904, -3904, -3904, -3904, 24037,  3566, -3904,   132, -3904, 25935,
   -3904, -3904, 15076, -3904, -3904
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3904, -3904, -3904, -3904, -3904, -1862, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904,  1856, -3904, -3904, -3904, -3904, -3904,
    2056, -3904,   727, -1872, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904,   729,  1652,  3549, -3904,   464,
   -3904,   140, -3904, -3904, -3904, -2985,    16,  -167, -3904, -3904,
     352,    43,  3224,  -166, -3903, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904,   472,   469, -3904, -3904,   293, -3904,
   -3904, -1742, -3904, -3904, -3904, -3904, -3904, -3904, -3904,  -342,
    -302,  2061, -3904, -3904, -3904,  4192, -3904,  3642, -3904, -1806,
    2349, -3904, -3904, -3904, -3904, -3904,  2426, -1728, -3904, -3904,
   -3904,  1389, -3904, -3904, -3904, -3904,  -352,   320, -3904,   321,
   -3904,   323, -3904,   324, -3904,   325,   328,   329,   331, -3904,
     332, -3904, -3904,  -297, -3904, -3904, -3904, -3904,   333, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904,  -186, -3904, -3904,   -29,
   -3904, -3904,  -174,   334, -3904,  -130,   335, -3904,   336, -3904,
     -40, -3904,   -38, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904,  3226, -3904, -3904, -3904,
   -2338, -3904, -3904, -2279,  2755, -3904, -1855, -3904, -3904, -1886,
   -3904, -3904, -1831,  1140, -3904, -3904,  1310,   790, -3904, -1432,
   -1972, -1965, -3904, -3904, -3904, -2072, -2071, -1336, -1252, -2352,
   -3904, -3904, -3904,   338, -3904, -3904, -2637,  2158,  2750, -3904,
   -2035, -3904, -3904,  1216, -3904, -3904,  1390,   679,  1391, -3904,
     981,  2972, -1249, -3904, -3904, -3904, -3904, -3904, -3904,    42,
     297,   -48, -3904, -3473,   686, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -2596, -3904, -3904, -3904,  -209, -3904, -3904,
    -122, -3904, -3904,  -165, -3904,   148, -2372, -3904, -3904, -3904,
   -3904,  2711, -1371, -3904,  3766, -3904,  -551,   789,  2192, -2291,
   -1452, -3904,  -919,  -917, -2557, -3904, -3904, -3904, -2240,  1160,
    1577, -3904,   890,  2196, -1959, -3904,  1655, -3904, -3904,   914,
   -3904, -2846, -3904, -3904, -3904,   870, -3904,   872, -3904, -3904,
   -3904,  -901,   840, -2605,  1515,  -573, -3904,   421, -2482, -2595,
   -3904,   644, -3904,   596, -3680, -3373, -3904,  -590, -2163, -2476,
     -12, -3904, -3904,   610, -3198,  1785, -3904, -3904, -3904, -3297,
   -2101,  1511, -3904, -3904,  1085, -3904, -1479,  1084, -3904, -3904,
   -3904,  1093, -3904,   164, -3904, -3904, -3904, -3904, -2906, -3904,
   -3904, -1507, -2091, -3904, -3904,    13, -3904,  3797,  3801,  4319,
    4324, -1033, -2789, -3678,   168,   171, -3904, -3904, -3904,  2740,
   -1337,   243,   236,   242,  2149, -1845,   392, -2447, -3904,   446,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  2234, -1551, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -2472, -2486, -3904, -3904,
    1706, -3904, -3904, -3904, -2329, -1471, -1467, -1940,   637, -2228,
   -3410, -3904, -3904, -3904, -3904, -3904, -3904,  2871, -3904, -3904,
   -3904, -3904, -3904,  3748, -3904,  2886, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904,   675,  1918, -3904, -3904, -3904, -3904, -3904,
   -3904,   960,  2781, -3904, -3904, -3904,   -11, -3904, -3904, -3904,
   -3904,  2483, -3904, -3904, -3904, -3904,  2827, -3904, -3904, -3904,
   -3904, -3904, -3904,  1493, -3904,  1963, -3904, -1486, -3904, -3904,
    1072,  -987,  1919,  3749,  2053, -3904, -3904,  -614, -3904, -3904,
   -3904, -1717, -1343, -3904,  3476, -1025, -2618,  2474,  -671, -1874,
    1120,   403,  4124, -3904, -1139, -1116, -3904, -3904,  -647, -3904,
   -3904, -3904,  -621, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904,  1531, -3904, -3904, -3904, -3904, -1213,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  1283, -3904,  2145,
   -3904,  -511, -3904,  3254, -3904, -3904, -3904, -2397, -1900,  1849,
    1015, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -1575, -3904, -2451, -3904, -3904, -3904, -3904, -3904,  2065, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -1730, -3904, -2325,   220,
   -3904,   371, -3904, -3904, -3904, -3904, -3904, -3904, -3904,   -36,
     896,   -34, -2843, -1082,  1648, -3904, -3904, -1287,  3294, -2373,
   -3904, -3904, -3904,  2049, -3904, -3904, -3904, -3904, -3904,   987,
   -3010,  2902, -3904, -3904, -3262,  -903, -2330,  -872, -3904, -2427,
     538, -1859, -1815,  -440, -1323, -1332, -3904, -3904, -3904, -3904,
    -131, -3904, -3904, -3904,   558,  1941, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904,  -552,  -824, -3904,
   -3904,  2205,  2402, -3904,  3175, -3904, -1080,  3423, -3904, -3904,
    3426, -3904, -3904, -3904, -3904,  3091,  3073,  2015, -3904, -3904,
   -2443, -3904, -3904,  1976, -3904,   815,  -896, -1851,  1109, -3904,
   -3904,  1111, -3307, -3904, -3904,  3435, -3904, -3904, -3904,  1048,
   -3904,    97,  3818,  3438, -3904, -3904, -3904, -3904, -3904, -3904,
    2821, -1046,  3743, -3904, -3904, -3904, -3904, -3904, -3904,  2460,
   -3904, -3904, -3904, -3904, -3904, -3904,  3013,  3837,  -594, -1349,
   -3904,  -767,  2983,  2463,  -638, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
    2640,  1027, -3904, -3904, -3904,  3088, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904,  1145,   -45, -3904,    91,   -72, -3904,
      33, -3904, -3904, -3904, -3904, -3904,  -141, -3904, -3904,  -143,
   -3904,  -970, -1391,   748, -1244, -2103, -3904,  1139,  3080, -2746,
    -687, -1152, -1156, -2045,    29, -3904, -3904,  2680,  2044,   125,
    -422,  -526,    -6, -2754,  -110,  -589, -3904, -2870, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,  1973, -3904,
   -3904, -3904,  1116, -3904,  3870, -3904,  2731, -1357,  3876, -3904,
    -574,  2547,  1995,  1997, -3904, -3904,  2004, -1828, -3904, -3904,
   -3904,   143, -3904,  2630, -3904, -3904, -3904, -3904, -3904, -3904,
   -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
    2589,  3601,  3116, -3904,  2650, -3904, -3904, -3904, -3904, -3904,
     368, -3904,  -441, -3904, -2616,  2899,   496, -3904,  1208,  -772,
   -1004, -3904, -3904,   370, -3904, -3904,  1147,  3901,  3614, -3904,
   -3904, -3904, -3904, -3904, -2831,  -871, -3904, -3478, -2882, -1703,
   -3904, -3904, -2237, -3089, -3904, -3904, -1050, -3904, -3904, -3904,
   -3904, -2118, -3904, -3904, -3904,   128,  3970,  3979, -3904, -3904,
     546, -3904,   255, -3904, -3904, -3904, -3904, -3904, -3904, -3904,
     428,   757, -3904, -3904,  3829, -3904, -3904, -3904, -3904,  3834,
   -3904, -3904, -3904, -3904, -3904,  3835, -3904, -3904, -3904, -3904,
   -3904,  1962, -3904, -3904, -3904, -3904, -3904, -3904, -3904, -3904
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2664
static const yytype_int16 yytable[] =
{
     505,  1056,  1064,  1497,   956,   984,  1873,   911,   952,   553,
    1395,  1398,   642,   552,  1378,  1872,  1042,   560,  1726,   575,
    1410,  1504,  1725,   916,   531,   582,   577,   810,  1700,  2462,
    2204,  2135,  1813,   589,  1611,  2320,   592,  1957,  1850,  1678,
     589,  1601,  1602,  2464,  2415,  1127,   999,   610,  1462,   503,
    2132,  1931,   558,  1430,  2625,  3040,  2117,  2691,  1748,  1014,
    2118,  1642,  2766,  1812,  2987,  1756,  2868,  2768,  2899,  3649,
    2654,  1085,  2949,  2950,  3321,  2107,  1509,  2974,  1510,  1430,
    2576,  3363,  1858,  2365,  2827,  2028,  2446,  2577,   631,  1758,
    1759,  1964,  3157,  1762,  1763,  1764,  1765,  2582,  1767,  1768,
    1770,  1772,  1773,  1774,  1775,  1776,  2493,  1031,  1034,  1976,
     634,  2514,   505,  2711,  2712,   505,   641,   647,  2591,  3654,
    1979,  1980,  2595,   630,  2965,  3479,  1072,  3041,  2922,   135,
    3837,  2851,  2975,  2610,  2953,  3036,  2006,  3728,  3012,  1189,
    1190,  1853,  3690,  3695,  3697,  2621,  3696,  1479,  4117,  1189,
    1190,  3236,   512,  1222,  2176,  3519,  2539,  2540,  3184,  3569,
    3783,   636,  3175,  1790,   638,  3706,  3182,  1180,  1181,  1182,
    1311,  3727,   574,  2551,  2186,  1573,  2564,  2629,   581,  1864,
    1223,  2029,   661,  3864,  2457,  2049,  1464,  2049,  2041,  2572,
    2569,  2570,  1311,  4091,   607,  2553,  2356,  2823,   918,   902,
    4173,  3669,  2973,  3245,  3236,  1435,  2590,  2220,  1905,  2593,
    2594,  2656,  2596,  2708,  1569,  2599,  2600,  2997,  2998,  2603,
    2709,  3263,  4091,  3389,  2612,  2041,  2947,  1875,   839,  2616,
    2617,  2618,  2619,  2620,  4375,  3001, -1492,  2624,  1777,  2626,
    2732,  1247,  3392,  3283,  4352,  2635,  2636,  2637,  2638,  3344,
    2181,  2642,  4193,  2644,  1412,  4353,  3878,   652,  3466,  1035,
    3237,  4369,  1224,  1224, -1998,  2030,  1189,  1190,  2533,  2050,
    2223,  2050,  2379, -1492,  3198,   653,  1341,  4405,  3181,  1238,
     992,  2665,  1415,  2668,  2669,  1424, -2547,  1634,  2700,  2679,
    2680,  1391,  1574,  2499,  3326,  1438,  1575,  3835,  2688,  2689,
     965,  1913,  3509,  2693,  4315,  1320,  4581,  1576,  2745,  1312,
    1459,  1460,  1461,  3237,  1463,  2089,  2630,  1506,  2695,  2696,
    2697,  2698,  1506,  1834,  2970,  2020,  1914, -1532,  1189,  1190,
    2715,  1312,  2307,   567,  2182,  2971,  1475,   868,  1189,  1190,
    3909,  4167,  1189,  1190,  4091,  3128,  3129,  1052,  -914,   571,
    1037,  1548,  1549,  -567,  2335,  1614,  1614, -1815,  1189,  1190,
    3655,  3526,   606,  2092,  1428,  2123,  1189,  1190,  4375,  4092,
    3165,  2430,  3167,  3527,  1441,  1189,  1190,  1189,  1190,   600,
    2990,  1591,  1592,  1593, -2611,  1189,  1190,  3528,  1506,  1227,
    1594,  1947,   590,  4420, -1730,  2024,  2133,  3898,  4092,   918,
     902,  4208,  3361,  3097,  2733,  3905,  3902,  1189,  1190,   666,
    2454,  4194,  3006,  2348,  3106,   134,  3112,  2369,   515,  -568,
    1595,  2349,  2134,  1641,  1189,  1190,  3135,  1038,  3906,  3921,
    4421,  3113,  2024,  3526,  3923, -1532,  3972,  1127, -1730,  1577,
    3159,   974,  1189,  1190,  2205,  3527,  1189,  1190,   946,  1778,
    2818,   842,   568,  1948,   136,  3316,  1570,  1354,  3362,  3528,
    1167,  3107,   601,  3526,   513,  3907,  1189,  1190,  4354,  1532,
    4087,   918,   902,  1779,  2002,  3527,   648,  2042,  1831,  1189,
    1190,  2124,  1615,  1630,  2380,  1428,  2021,  1915,  4266,  3528,
    1907,  2716,  1564,  1565, -2611,   869,  2991,  3015,  4582,  4370,
    1191,   918,  3691,  1192,   966,  1927,  1321,  4008,   993,  3954,
    3140,  1999,  2356,   641,  2042,   647, -2026,  3984,  2370,  3367,
    4092,  3510,  1189,  1190,  1189,  1190,  1189,  1190,  1189,  1190,
    2972,  4321,  1189,  1190,  1578,  2284,   824,  1239,  3007,  4038,
     647,   994,  3330,  3331,  4009,  1226,  3018,   841,  4315,  2465,
    3022,   837,  2299,  1753,  2916,   641,  3399,   847, -1842,  3671,
    1238, -2476,  1036,  3387,  3038,  3039,  2609,  3390,  3391,  1225,
    1225, -1532,  1635,   864,  2646,  2500,  3052,  2308,  3098,  2041,
    3393,   840,  1625,  1626,  1189,  1190,  3238,  1761,  1509,  1814,
    1510,   912,  4195,  3062,  2028,  1476,  2357,  2657,  3660,   972,
    4015,  2576,  2041,  1666,  1782,  2654,  4401, -2166,  2577,   872,
    1413, -2189,  1680,  2431,  1392,  4170,  3656,  3141,   975,   988,
    2575,  2004,  3973,  2381,  1693,  1694,  1695,  1191,  2507,   641,
    1192,  1003,  1699,  2711,  2712,  1949,  1780,  1168,  3858,  3238,
    3217, -2307,   641,   631,   505,  4355,  3368,  3369,  1813,   631,
    2337,  1029, -1492,   631,   631,  2107,  3264,  1436,  1043,  1003,
    2734,  2340,  3382,   641,  2343, -1842,  1509,  1906,  1510,  4174,
    3583,  3584,  3585,  1073, -2476,  2983,  1074,  1075,  1015,  1812,
    2221,  1080,  2654,  2948,  1026,  1189,  1190,  3814,  1571,  1191,
    2029,  3602,  1192,  1016,   832,  3698,  2196,  1793,  4269,  1191,
    1978,  4111,  1192,  1191,  3246,  2915,  1192,  4281,  2049,  2352,
    2334,  3615,  3616,  3617,  1854,  1865,  2999,  1237,   854,  1191,
    2197,  2995,  1192,  2631,  4310,   867,  1128,  1191,  3784,   946,
    1192,   883,  4151,  2708, -1815,  3021,  1191,  3023,  1191,  1192,
    2709,  1192,  2176,  2923,  3034,  1053,  1191,  2164,  4086,  1192,
    3172,  3033,  2187,  2707,  3345,  3008, -2547,  1193,  3047,  4001,
    3652,  1189,  1190,  1876,  3042,  3058,  1571,  1193,  1191,  4100,
    3239,  1192,  1189,  1190,  2030,  2323,  1852,  3080,  3082,  3084,
   -1532,  3494,  3507,  3085, -2547,  1191,  2024,  1186,  1192,  1188,
    2964,  3518,  2050,  1882,  1571,  1959,  1396,  2006,  1962,  2432,
    1401,  1406,  1070,  1191,  1966,  3125,  1192,  1191,  1912,  2024,
    1192,  3402,  3000,  3130,  1427,  1231,   505,  1233,  1239,  1003,
     505,   641,  3684,   505,   641, -1532,  1442,  1191,  3683,  1282,
    1192,  3996,  1835,  1981,  1982,  1316,  4218,  4538,  2181, -2026,
    1191,  4430,  3164,  1192,  4396,  1571,  -914,   631,  1963,  2713,
    1017,  -567,  3133,  3704,  3705,  3495,   569,   873,   572,   641,
     631,   510,  3703,  3006,   631,  1232,  1940,  3513,  2042,  1236,
    3708,   509,  1246, -1842,   510,  3609,   669,  3733,  4276,  1496,
    4278,  3127,  1325,  1191,  1193,  1191,  1192,  1191,  1192,  1191,
    1192,  2042,  1192,  1191,   912,  1344,  1192,  1189,  1190,  1350,
     641,   830, -1842,  1832,   641,   641,  3976,  3862,  1189,  1190,
    -472,  3668,  2357,  1054,  1238,  3639,  2873,  -568,   641,  3643,
    3388,  2008,  2182,  4010,  1189,  1190,  3332,  1058,  1066,  3529,
   -2166,  2230,   865,  2714, -2189,   115,  2054,  1238,  3659,  3681,
    3682,  3675,   523,  2899,  2024,  1191,  1193,  3181,  1192,  3546,
    3181,  3181,  1189,  1190, -2663,  1456,  1193,  2980,  4084,   976,
    1193,  2309,  3522,  4328, -2307,   631,   874,  3181,  3257,  3638,
    1733,  1734,  1467,  3642,   508,  2231,  1193,  1275,  1169,  3142,
    3509,  3707,  1336,   641,  1193,  1505,  3726,  3729,  3731,  3732,
    3401,  2285,  4350,  1193,   886,  1193,  2256,  2430,  3838,  2211,
    3618,  3529,  3648,  1193,   619,   564,  4270,  2300,  3301,  1733,
    2250,  1923, -2026, -2477,  4006,   631,  2476,  2288,  2289,  1189,
    1190,  3972,  1486,  4398,  1861,  1193,  3725, -1842,  2576, -2476,
    3108,  3529,  1189,  1190,  1988,  2577,  2057,  1647,  2041,  2305,
    2306,   875,  1193,  2192,  1614,  2725,  1191,  3963,   554,  1192,
     117,  2480,  3692,  3464,  1107,  4184,  2832,  2833,  3172, -2476,
    1193,  4071,  2711,  2712,  1193,  2404,   631,  2752,  2503,  1862,
    1607,   676,  1238,  3306,  3195,  3196, -1842,  1743,  3202,  3203,
    3013,  3013,  1924,   946,  1193,  3355,  1391,   960,  4029,  3522,
    1189,  1190,  3086,  3994,  3146,  1189,  1190,  1193,  3218,  1430,
    2538,  1598,  3324, -2166,  1128,  1605,   946, -2189,  1957,  1957,
    1101,  3347,  2229,  2344,  1781,  1189,  1190,  1397,  1128,   130,
    2028,   887,  1191,  3523,  3635,  1192, -2477,  2365,   563,  2582,
    3949,  1430,  4203,  1191,  1189,  1190,  1192, -2307,  1651,  2783,
    1193,  2575,  1193,  4204,  1193,  1867,  1193,  1108, -1815,  2610,
    1193,  1206,  1189,  1190,  3219,  3220,  3254,  3255,  2342,  2954,
    2639,  2236,  2708,  3333,  2747,  2237,   961,  1815,  1727,  2709,
    2887,  1685,  1239,  3109,  3819,  2117,  4071,  4071,   620,  2118,
    2449,   641,  1171,  2410,  1189,  1190,  1189,  1190,   591,  3851,
    3852,  1189,  1190,  2831,  2107,  1239,   888,  1189,  1190,  3510,
     579,  2405,  1193,  2355,  3524,  1814,   131,  3973,  1989,  1868,
     596,  3752,  1990,  3147,  3398,  4185,  2029,  2243,   641,  1873,
    3753,  1071,  1487,  1785,  1863, -1843,  2571,  2327,   631,  3100,
    1614,  1189,  1190,  1189,  1190,  2049,  1159,  1873,  1873,  2431,
    2375,   946,  2359,   631,  1652,  2024,   657,  4206,  1655,  1509,
    3523,  1510,  3547,  1189,  1190,  1656,  2836,  2837,  1191,  4213,
    2320,  1192,  1457,  1787,   602,  1189,  1190,  2176,  4275,  1191,
    1128,   641,  1192,  2707,  4259,  1531,  1667, -2393,   603,  1668,
     654,  2830,  4518,  4030,  1726,  1191,  1925,  3612,  1192,  2426,
    2427,  2840,  4188,  4189,  2883,  4603,  1189,  1190,  1189,  1190,
    2030,  4519,  2082,  1193,   670,  2448,  1869,  1839,  1468,  1842,
    2481,   631,  3974,  1191,  4271,  4260,  1192,  4261,  2248,  2050,
    1189,  1190,   631,  4071,  4071,  1597,  2501,  2042,   641,  1160,
    1239,  3535, -1843,  1657, -2611,   565,  1189,  1190,  2506,   631,
     631,  2509,  2510,  1189,  1190,  2640,  1350,  1209,  3958,  1471,
    2654,  1238,  2487,  1917,  4205,  1189,  1190,  1689,  1614,    13,
    3754,  1189,  1190,  2181,  4225,  1873,  1873,  3787,  1896,  2713,
    1189,  1190,  2654,  1897,  1726,  1350,  1904,  1590,  2978,  1193,
    1191,   684,  1908,  1192,  4031,  3567,  3295,  1870,   134,  1659,
    1193,   641,  2450,  1191,  2249,  3148,  1192,  3951,  1189,  1190,
    1513,  1928,   912,  4254,  2010,  2252,  4272,  3043,  -472,  1392,
    2406,  2328,   505,   505,   505,   631,   505,   631,  3560,  4071,
    1189,  1190,  1958,  2526,  3525,  2432,  1189,  1190,  1960,   505,
    3408,   641,  1189,  1190,  4071,   505,  4273,  2558,  1988,  1472,
    3057,   685,  1469,  1846, -2611,   622,  3372,  2182,  4071, -2393,
    1944,  1191,  1946,  2714,  1192,  1045,  1191,  2918,   631,  1192,
     605,  1941,  1942,  1943,  2169,  1945,    25,  1726,  3394,  1189,
    1190,  3056,  3975,  1470,  1189,  1190,  1191,   623,  1961,  1192,
     843, -2477,  3044,  1317,  1965,  1713,  1189,  1190,  1334,   889,
     890,  3976,   892,  1977,   894,  1191,  1189,  1190,  1192,  1736,
    1898,  2559,  3406,  3149,  3013,  4071,  1189,  1190,   641,  2316,
    3412, -2477,   895,  1191,  3414,  1193,  1192,  4071,  4071,   641,
     946,  4154,  4472,  4473,   631,  1918,  1193,  2128,   631,  2560,
    2264,  2381,  1189,  1190,  1189,  1190,  3579,  1937,  1660,  3409,
   -1843,  2271,  1193, -1815,  2919,  1191,    43,  1191,  1192,  3309,
    1192,  3525,  1191,   625,  1662,  1192,  1163,  2275,  1191,  2125,
    1590,  1192,  3914,  2130,  4071,   631,  3487,   844,  2575, -1843,
    1193,  1189,  1190,   686,  4071,  1988,  3915,   632,  4089,  1189,
    1190,  3933,  2609,  3045,   641,  2276,   505,   505,  3977,  2194,
     505,  2939,  1191,  3992,  1191,  1192,  2579,  1192,  2561,  1189,
    1190,  2436,  1080,  3933,  2210,  1189,  1190,  1871,  3889,  1239,
    1480,  4071,  1989,  4071,  1191,  1235,  1990,  1192,  2024,  2720,
    2810,  4014,  3959,  4071,  2225,  -206,  1191,  2329,  3922,  1192,
    1431,  3924,  3125,  4447,  4447,  2190,  2191,  1193,   845,  3378,
    4071,  2721,  4071,  2330,  4071,  2040,  2436,  2811,   637,  1164,
    1193,  4071,  2278,  1218,  1219,  1220,  1221,  1191,  1376,  1191,
    1192,  4071,  1192,   635,  1813,  2279,  4153,  2226,  1226,  1329,
    3773,  3774,  1330,  1737,    37,  4071,  4071,  1128,  2257,  2562,
    1432,  1191,  3373,  2317,  1192,  2360,  3960,  1189,  1190,  2579,
     649,  4071,  4071,  3377, -1843,  1812,  4071,  1191,  3166,  3253,
    1192,  2348,  2707,    43,  1191,  1189,  1190,  1192,  1193,  3341,
    2606,   858,  4362,  1193,  2835,  3890,  1191,  1189,  1190,  1192,
      55,  2770,  1191,  2283,  1669,  1192,   859,  1670,  2301,  1189,
    1190,  1191,  4134,  1193,  1192,  2777,  1417,  1726,  2326,  4403,
    2170,  3312,  4407, -1843,  1189,  1190,  1238,  2169,  3200,  1989,
    2133,   860,  1193,  4135,   509,  3934,  3891,   510,  4363,  1191,
    3563,  3916,  1192,  2672,  3565,  1189,  1190,  3201,  2792,  3596,
    1193,  4022,  4023,  1189,  1190,  3950,  2134,  4073,  1189,  1190,
    2350,  1191,  2438,  2439,  1192,  3212,   641,  1191,   631,   641,
    1192,  3575,  4413,  1191,  3574,  1418,  1192,   714,  2713,  2475,
     631,  1873,  1193,  2606,  1193,  1282,  1189,  1190,  2873,  1193,
    1282,   580,  2454,  2171,  3597,  1193,  3868,  3222,  1331,  3223,
    3315,  1189,  1190,   641,  3797,  1419, -1815,  2673,    52,  2212,
    1191,   668,  1594,  1192,   650,  1191,   509,  2846,  1192,   510,
    3863,   631,  1867,  2133,  4024,   631,  1085,  1191,   117,  1193,
    1192,  1193,  1189,  1190, -1815,  2041,   828,  1191,  4496,  2455,
    1192,   719,  1596,  2224,   611,  2228,  2320,  1191,  1573,  2134,
    1192,  1193,   641,   641,   631,   631,  2402,    55,  1189,  1190,
    1325,   657,  2714,  1193,  4364,  2238,  1128,  4324,   641,  1189,
    1190,   658,  4326,  1191,  4327,  1191,  1192,  2239,  1192,  2563,
     912,  2024,   911,   641,  1189,  1190,  1868,   661,  2169,  1344,
    2429,  2607,   663,   612,  1193,   946,  1193,  2436,   916,  2332,
     912,  2802,   665,  3699,  2674,  2437,  3700,  2608,  2247,  2024,
    2260,  1053,  1191,  2196,  2498,  1192,  1189,  1190,  1193,  2864,
    1191,  2865,   258,  1192,   260,  1189,  1190,  1189,  1190,  1189,
    1190,  3968,  2261,  3752,  1193,  1040,  1041,  2197,   731,   677,
    1191,  1193,  3753,  1192,  1867,   679,  1191,   886,  2265,  1192,
    1189,  1190,   631,  1193,  2172,  2269,  1006,  1189,  1190,  1193,
     522,  1189,  1190,  2804,  2521,  1574,   613,  2270,  1193,  1575,
    2423,   631,  3630,  2274,   515,  1821,  2522,  2002,  2806,   861,
    1576,  2425,  2277,  1869,  1239,  2675,  2703,  2508,  2911,  2912,
    2913,  3032,  2933,   682,  1189,  1190,  1193,   523,  1189,  1190,
    2608,  4017,  4018,  2170,  4020,  4021,  2532,  1007,  1868,  1238,
    2280,  1974,  1975,  2934,  1378,  2699,  1017,  1420,  1193,   747,
    4147,  4148,  1206,  3350,  1193,  2838,  2227,  1226,  1191,  3351,
    1193,  1192,  2292,  2438,  2439,  2945,  2411,  1238,  2311,   820,
    2494,  2251,  2024,  4149,  3169,   825,  1191,  2935,  3777,  1192,
    2244,  1226, -1730,  2701,  1430,  3636,  2251,  2717,  1191,  1822,
    1430,  1192,  3376,  3803,  1870,  1823,  3520,  1193,  2253,  1226,
    1191,  2440,  1193,  1192,   887,  2641,  2171,  2254,  1683,  1054,
     586,  3188,  3754,   683,  1193,  1191,  3194,   586,  1192,  2655,
    3537,  3538,   835,  1008,  1193,  1396, -1730,   258,  3197,   260,
    1396,   855,  2746,   838,  1193,  2412,  1191,  2756,  3204,  1192,
    2523,   849,  1577,  3552,  1191,  1824,  2542,  1192,  3208,  1191,
   -2663,   851,  1192,   852,  2042,  2549,  2550,  1522,  1523,  2524,
    1193,  1825,  1193,  3020,  2757,   878,  2554,  2555,  2556,  2557,
    2525,  2565,  2566,  1726,  3209,   857,  3210,  1191,  1206,   888,
    1192,  1189,  1190,  2344,  2266,  1226,  1421,   641,   869,  3050,
    3051,   641,  1191,  2718,  2170,  1192,   505,  1588,   880,  1193,
    1238,  4192,   986,   631,   631,   631,  2741,  1193,   946,  2744,
    2267,  1226,   987,  3211,  2758,  1422,  2413,  2759,   918,   902,
     989,  3213,  2031,  1191,  2828,  2760,  1192,  1193,  1726,   641,
    2007,  1814,  2978,  1193,   641,  2676,   946,  1578,  2737,  2738,
    2739,  3216,  2268,  1226,   841,  2723,   614,  3221,  1209,  1191,
     996,  4215,  1192,  2526,  2850,  1005,  1423,  1017,  2272,  1226,
    1191,  1726,  1027,  1192,  4237,  3056,  1046,  2172,   615,   776,
    1139,  4228,  4229,  4230,  4231,  1191,  2667,  1047,  1192,  2667,
    2667,  1051,  2667,  2567,  2568,  2667,  2667,  2667,  2667,  2667,
    2667,  2667,  1158,   115,  2667,  4243,  2667,  1239,  4246,  4247,
    4248,  4249,   616,  2820,  1226,  1172,  1173,  1191,   918,   902,
    1192,  3308,  3214,  1226,  1871,  1193,  1191,  1082,  1191,  1192,
    1191,  1192,  1083,  1192,  4238,  1239,  3352,  1084,   641,  3224,
    2032,  1206,  3252,  1193, -1815,  1086,  2376,  1009,  1087,  2377,
    1088,  1191,  2378,  1091,  1192,  1193,  1226,  3226,  1191,  3281,
    3282,  1192,  1191,  2847,  1230,  1192,  2552,  1193,   641,  3228,
    1092,   617,  3318,  3319,   976,  2527,  4323,  3662,  3663,   946,
    1229,  3230,  1193,  1234,  1209,  2041,  1251,  2856,  1318,  1618,
    1619,  1620,  1093,  2862,  2862,  1191,  2862,  1094,  1192,  1191,
    1095,  1631,  1192,  1193,  1957,  1096,  1211,  1212,  3322,  3323,
    1010,  1193,  1011,  4340,  4341,  3738,  1193,  3231,   119,  2024,
    1097,  2169,  4349,  2881,  1319,  3232,  1098,  4119,  2861,  2861,
    3557,  2861,  1686,  1099,  1749,  1690,  3604,  1102,  2169,  3490,
    3491,  3877,  4136,  1104,  1193,  1105,  2414,  2528,  1106,  2475,
    1396,  3571,  1226,  4344,  2904,  1109,  1709,  1710,  2907,  1193,
    1714,  2761,  1110,  2862,  2862,  2862,  1111,  1726,  1239,  3599,
    3600,  3312,  4304,  2320,  4137,  2927,  1112,  2929,  1728,  1729,
    3743,  3744,   889,   890,   891,   892,   893,   894,  1113,  3877,
    1193,  3166,   693,  2041,  3780,  3789,  3798,  1226,  2861,  2861,
    2861,  1443,  3815,  1226,  3558,   895,   912,  1114,  3171,  2033,
    1311,  4546,  4547,  1958,  1958,  1115,  1193, -1815,  2034,  3823,
    3824, -1815,  2850,  4162,  4163,  2035,  1323,  1193,  3937,  2568,
    3559,  1444,  1211,  1212,  4120,  4121,  2703,  1209,  1324,  4122,
    4123,  3792,  1193,  1116,  1727,  1117,  2169,  1238,  3685,  3952,
    3953,  3688,  3689,   641,   641,  1337,  3796,  3956,  3953,  1118,
    1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  3701,  3365,
    3871,  1119,  4236,  1122,  1193,  2024,  1123,   714,  3957,  3953,
    4016,  3600,  1445,  1193,  1129,  1193,  1446,  1193,  3802, -1532,
    3005,  3794,  2024,  4138,  2655,   980,   981,  3804,   982,  2655,
     983,  3019,  2762,  1130,  3017,  2655,  2926,  3029,  1193,  2655,
    1131,  3028,  1040,  1041,  1132,  1193,  3011,   115,  1750,  1193,
    2036,  3028,  3805,  2655,  2655, -1815,   641,  3028,  1338,  3806,
     515,  3053,  3049,  3807,   718,  2655,  3061,  1727,  1133,  4103,
    4107,   719,  3064,  3065,  2703, -1532,   631,  4019,  3953,  1312,
    4027,  4028,  1193,  4434,  1134,  2558,  1193,  3028,  3079,  1135,
    2558,  4161,  3323,  3081,  2655,  3096,  3865,  1136,   516,   724,
    4112,  4165,  3953,  1137,  2042,  2763,  3122,  4139, -1532,  1140,
   -1532,  3063,  4166,  3953,  4168,  3953,  1214,  1215,  1216,  1217,
    1218,  1219,  1220,  1221,  1141,  4140, -1532,  2170,  4169,  3953,
    2024, -1532,  1142,  1238,  1143,  2558,  4175,  4176,  3083,  2764,
    1206,  1339,  3545,   116,  2170, -1532,   946,  2558,  4141,  2559,
    1238,  -659,  1144, -1532,  2559,  1145,  2037,  -659,  1351,  1206,
   -1532,  1146,   117,  2579,  4177,  4176,  1447,  1147,   731,  1148,
     631,  2655, -1532,  1149,  3030,  3031,  2580,  2560,  -659,  4604,
    4239,  4240,  2560, -1532,  -659,  1150,   517,  1151, -1532,  4512,
    2579,  4514,  4360,  3323,  3572,  2060,  2061, -1532,  1152,  2559,
    2171,  3060,  1353,  2580,  1153,  3151,  4361,  3323,   911,  4367,
    3600,  2559,  2042,  4411,  4412,  4103,  4453,  4454,  4531,  4107,
    -863,  4507,  3489,  1154,   916,  4593,  4594,  2560,  1155,  -797,
    -797,  2063,   118,   742,  1156,  1239,  3969,  3970,  1157,  2560,
    1161,  -797,  1448,  2273,   745,  1373,  2561,  2066,   746,   747,
    1162,  2561,  2170,  4561,  4562,  2067,  3621,  3622,  1238,  1716,
    1717,   119,  3821,  3822,  1751,  1165, -1532,  3982,  3983,   518,
    3126,  1216,  1217,  1218,  1219,  1220,  1221,  -659,  3759,  2069,
    1752,  4103,  4107,   517,  1166,  1170,  1174,  1175,  1176, -1532,
    1177,  1178,  1179,  1506,  1228,  1376,  2561,  2070, -1532,  1282,
    1379,  1387,   946,   641,  -659,  1449,  1388,  1407,  2561,  1411,
     517,  2060,  2061,  1416,   120,   631,  1428,  2133,  1437,   946,
    1439,  2883,  1455,   946,  1440,  1458,  2075,  2562, -1532,  1205,
    1465,  1466,  2562,  2881,   641,  1477,  1209,  1727,  1474,  4142,
    2558,  1196,  1197,  2134,  2133,  -797,  -797,  2063,  2213,  1478,
    3294,  1481,  1128,  1482,   641,  1209,  2384,  -797,  1484,  1494,
    1489,  2172,  1506,  2066,  1873,  1873,  1512,  1514,  3340,  2011,
    2134,  2067,  1396,  4342,  4343,  4036,  1516,  2562, -1532,  1198,
    2385,  4036,  1519,  2012,  1520,  1524,  1525,  3785,  1526,  2562,
    1199,  1239,   822,   823,  2386,  2069,   826,   827,  2079,  1530,
     829, -1532,   831,  1529,  2559,  2387,  2080,  1533,  1239,  1506,
    1534,  1535,  1582,  2070,  1583,  1584,  1587,  1450,  2258,  1590,
    1726,  1589,  2262,  2081,  4235,  1608,  1610,   946,   693,  1224,
    1200,  1614,  2560,  1621,  1633,  1636,  2726,  1206,  1672,  3134,
     768,  1201,  2075,  2011,   121,  3872,  2286,  1682,  3873,  1683,
   -1532,  1684,  1707,  1744,  2655,  2388,  2389,  2012,  2655,  2655,
    1451,  1724,  1735,  3028,   774,  1766,  1760,  1786,  1202,   776,
     519,  1789,   777,  1791,  1792,  1795,   641,  1802,  2581,  2655,
    1206,  1798,  2083,  2390,  1211,  1212,  1799,  1800,  1801,  1803,
     520,  1206,  1804,  1805,  -659,  1816,  1817,  3028,  4314,  3339,
    2084,  2561,  1818,  1211,  1212,  3028,  3871,  1820,  1826,  3028,
    1828,  1829, -1532,   714,  2079,   122,  1239,  1837,  1838,  1851,
    1848,  -659,  2080,  1859, -1532, -1532,  3874,  3875,   585,  1878,
    3353,  3354,  1203,  3356,  1879,  1885,   521,  1880,  -573,  2081,
    1207,  3418,   522, -1532,   631, -1532,  1881,  2563,  2013,  3474,
    2391,  1888,  2563,  1891,  2088,   505,  1892,  1894,  1895,  3484,
    1900,  3028,  2090,  1909,  1208,  3896,  3897,  1932, -1532, -1532,
     718,  1935, -1532, -1532,  1939,  1967,  3493,   719,  3900,  3419,
    1968,   123,  2562, -1018,   523,  3903,  1969,   520,  1970,  3504,
    1972,  1983,   524,  1986,  3205,  2000,   631,  2563,  2083,  1548,
    1549,  2009,  2392,  2055,  3480,   724,  3987,  3517,  3400,  2563,
    3925,  2120,  1571,  3927,   520,  2137,  2084,  3404,  2139,  2138,
    2140,  2141,  2013,  1726,  2142,  2014,  2143,  4235,  2144,  1283,
    1284,  3506,  2096,  1209,  2145,  2146,  3709,   124,  1214,  1215,
    1216,  1217,  1218,  1219,  1220,  1221,  2147,  2148,  2149,  2150,
    2015,  2151,  2152,  1040,  1041,  2153,  4277,  1378,  1215,  1216,
    1217,  1218,  1219,  1220,  1221,  2154,  2155,  2156,   818,  1378,
    2088,  2157,  2158,  2159,   731,  3626,  1209,  2160,  2090,   515,
    2161,  -659,  3710,  2162,  1250,  2165,  3711,  1209,  3712,  2097,
    2098,  2099,  2163,  3570,  2183,  2184,   818,  2189,  2100,  2014,
    2199,  2927,  3997,  2200,  2201,  2202,  2214,  2216,  -659,  2208,
    2016,  2217,  3496,  2234,  2101,  1285,  2218,  2233,  2102,  2242,
    2235,  1040,  1041,  2240,  2015,  2241,  2856,  1210,  2245,  1316,
     641,   641,   641,  2251,  3713,  2259,  2255,  2325,  4458,   742,
    1564,  1565,  2263,  2321,  2881,  2281,  1286,  2290,  2096,  2282,
    2287, -1236,  2291,  2302,   746,   747,  2303,  1107,  2304,  2331,
    1287,  2104,  1221,  2904,  3611,  2341,  1159,  3613, -1358,  1163,
    2361,   641,   641,   641,  2372,  2395,  2373,  2403,  2409,   641,
    2417,  1211,  1212,  1288,  2016,  2847,  1289,  2420,  2444,  4330,
     539,  2463,   912,   912,  1213,  2447,  2477,  2478,  2479,  1290,
    2495,  2497,  2563,  2482,  2017,  2097,  2098,  2099,  2483,  2502,
    2484,  2511,  2512,  2513,  2100,  2485,  2727,  2486,  1727,  2516,
    2519,  1291,   818,  2530,  1211,  1212,  2531,   818,  2534,  2655,
    2101,  4458,  2926,  2535,  2102,  1211,  1212,  2537,  2541,  2655,
    2543,  3028,  2578,  2544,  2548,  2545,  1292,  4146,  2579,   540,
    2592,  1727,  2546,  1293,  2547,  2601,  2602,  3028,   818,   631,
    2597,  2655,  2598,  2605,  2604,  -832,  2611,  2613,  2614,  1726,
    1396,  2522,  2615,  4588,   818,  2622,  2623,  2104,  2017,   541,
    2658,  2662,  2664,  1726,  2702,  2627,  2724,  4597,  1726,  2628,
    2633,  2742,  4588,  1726,  1294,  4463,  4464,  4597,  4466,  2634,
    2643,  2750,  2746,  2755,  2772,  2771,  2773,  2349,  4200,  2784,
    2785,  2797,   542,  2819,  2826,  2834,  2843,  2854,   818,   818,
     818,   818,  2844,  2855,  2859,  2871,  2876,  2874,  2877,  2884,
    2522,   818,  3631,  3122,  3158,  1214,  1215,  1216,  1217,  1218,
    1219,  1220,  1221,  2888,  2890,  4503,   768,  4504,  4505,  2885,
    1854,  3872,  2889,  2908,  3873,  2894,  2909,  2910,  3772,  3772,
    3772,   543,  2522,  3843,  2455,  2931,  1040,  1041,  2454,  2932,
     774,  1917,  3714,  1918,   641,   776,  1284,  2951,   777,  3715,
    1216,  1217,  1218,  1219,  1220,  1221,  1253,  2941,  4319,  1214,
    1215,  1216,  1217,  1218,  1219,  1220,  1221,  2955,  2956,  2957,
    4146,  2958,  2959,  2961,  2968,  2523,  2966,  2967,  2984,  2988,
    4317,  1254,  2989,  3002,  3035,  3037,  3716,  3105,  3111,  1255,
    4573,  3115,  4558,  3117,  2524,  3131,  1295,  3066,  3132,  3067,
    1296,  3137,  3874,  3875,  3136,  2525,  3138,  3139,  2089,  3163,
    3183,  2209,  3831,  3172,  3185,  3286,  1297,  1727,  3176,  3178,
    2475,  3186,  3187,  3189,  1298,  3190,  3233,  3740,   641,  3243,
    3247,  1285,  1299,  3244,  2523,  3251,  3256,   641,  3249,  3259,
    3068,  3284,  3289,  1206,  3291,  3285,  3296,  3287,  3300,  3299,
    3764,  3288,  1329,  2524,  1256,  3303,   -64,  3717,  3314,  3320,
    1300,   544,  1286,  3069,  2525,  3317,  2523,  3327,  3325,  3328,
    3329,  3337,  3338,  1301,  1302,  3772,  1287,  3346,  3357,  1257,
    3358,  3881,  3342,  1258,   631,  2524,  3343,  3366,  2526,  3370,
    3371,  3384,  3374,  3886,  3385,  1396,  2525,  3386,  3415,  1288,
    3070,  3397,  1289,  3407,  3416,  3475,  1355,  3478,  3481,  3718,
    3482,  3849,  3403,  3486,  2436,  1290,  1356,  3417,  3489,  3879,
    1259,  4600,  3488,  3505,   641,  3499,  1303,   818,  1357,  2002,
    3500,  3534,   545,  3540,  3541,  3549,  3492,  1291,  1260,  3514,
    1358,  1359,  1360,  2308,  3238,  3508,  3515,  2526,  3516,  2057,
    3536,  3928,  1261,  3548,  3626,  3561,  1361,  2082,  3932,  3581,
    3590,  3997,  1292,  1304,  3603,  3577,  3592,  3595,  3601,  1293,
    3853,  3614,  3619,   523,  3632,  3633,  3504,  3846,  3627,  2526,
    3640,  3641,   818,   818,  3653,  1305,  3661,  1306,  3664,  1958,
    3665,   818,   818,   818,   818,   818,   818,   818,   546,   641,
    2527,  1262,  3670,  3679,   547,   818,   818,  3686,   818,   818,
    1294,  3734,  3737,   818,   818,  2656,  3741,   818,   818,   818,
     818,  3747,   818,   818,  4317,  3760,  3739,  3751,  3768,   548,
     818,   818,  3775,   818,   818,   818,   818,   818,  3761,  1209,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,  3762,   818,  3765,   549,   818,   818,  3908,   641,  2527,
     818,  3782,  3766,  3778,   818,   818,   818,  3779,  3780,  3786,
     550,  2907,  2528,  3781,  3788,  3799,  3790,   818,   818,   818,
    3772,  3772,  3791,  3772,  3772,  4146,   818,  3795,  3800,  3801,
    3809,  2527,  3810,   818,   818,   818,  3938,   818,  3816,  3817,
    3818,  3826,  3836,  3341,   818,   818,   818,  1396,   818,   818,
     818,   818,   818,  3827,   818,   818,   818,   818,   818,   818,
     818,   818,  3824,  3839,  4570,   818,   818,  3840,  3844,  1263,
    3845,  2528,  3847,  3857,  3866,  3887,  3867, -1444,  1264,  3912,
    3913, -1449,  1295,  3869,  3071,  3870,  3918,  3884,  3725,  4602,
    4570,  3895,  3899,  1265,  3919,  4081,   631,  4382,  3901,  3728,
    3920,  3939,  1297,  2528,  1311,  3926,  3940,  3772,  3961,  3965,
    1298,  1266,  4382,  3955,  2056,  3966,  1362,  3980,  1299,  2057,
    3985,  2058,  3971,  2059,  3990,  3986,  4392,  1211,  1212,  4003,
    4005,  4082,  4000,  1363,  2060,  2061,  3967,  3989,  4026,  4032,
     631,   745,  3789,  4133,  4039,  4040,  1300,  4076,  4085,  4099,
    4109,   641,  4110,  4113,  1267,  4114,  4115,  4116,  4126,  1301,
    1302,  4129,  4179,  4158,  4160,  2062,  4171,  4197,  -346,  4202,
    2063,  2064,  4209,  4220,  4199,  4127,  4212,  4219,  2065,  3266,
    4227,  4242,  4172, -1532,  4244,  1268,  2066,  4245,  4253,  3267,
    4250,  4257,  4255,  4262,  2067,  3100,  4281,  4183,  4284,  -364,
    4311,  3268,  4190,  2068,  4309,  1189,  1190,  4312,  4313,  4351,
    1269,  4329,  1303,  3269,  3270,  3271,  4332,  4335,  2069,  4346,
    1270,  4358,   818,  3072,  3073,  3074,  3075,  3076,  3077,  3272,
    4368,  4371,  1506,  4378,  4379,   818,  2070,  4372,  4383, -1532,
    4391,  4389,  4382,  1312,  2071,  2072,  4390,  4394,  4415,  1304,
    4416,  2073,  4490,   818,  4401,  4417,  4418,  4424,  4425,  2074,
    1364,  4428,  4426,  -944,  1271,  2075,  4427,  4429,  4430,  1253,
    4437,  1305,  4435,  1306, -1532,  4439,  2076,  4440, -2370,  4443,
    1727,  1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  4449,
   -1532,  4462,  4465,  4467,  1254, -1532,  2077,  4468,  4481,  4345,
    4478,  4522,  1255,  4483,  1643,  1644,  1645,  1646,  1647,  4492,
    4491,  4494,  2907,  4497,  2907,  4500,  4509, -1532,  4506,  4515,
    4382,  4510,  4382,  1365, -1532,  4511,  4516,  4520,  4523,  4541,
    4528,  4530,  4526,  4527,  4534,  2078, -1532,  2079,  4536,  4382,
    4285,  1366,  4539,  4540,  4542,  2080,  4545, -1532,  2670,  2671,
    4549,  2678, -1532,  4550,  2681,  2682,  2683,  2684,  2685,  2686,
    2687, -1532,  2081,  2690,  4552,  2692,  4575,  1256,  4559,  4382,
    4382,  4579,  4574,  4589,  4578,  4599,  4214,  2852,  3749,  2694,
    2996,  3750,  1063,  4210,  3943,  2082,  4320,  4450,  1518,  4451,
    3941,  3945,  1257,  4080,  4133,  4591,  1258,  4554,   599,  2850,
    2445,   959,  2368,   641,  3280,  4475,  1648,  1649,  1650,  1651,
    4563,  4051,  4052,  4376,  4054,  4055,  4057,  4476,  4448,  4058,
    4059,  2083,  4060,  4061,  4062,  4065,  4066,  4067,  4388,  4387,
   -1532,  1586,  2647,  1259,  3302,  3411,  3829,  2105,  2053,  2084,
    3307,  3594,  4334,  2085,  4128,  4400,  3832,  4088,  4525,  3273,
    4461,  1260,  4252, -1532,  4499,   678,  2168,  3767,  3497,  2645,
    4460,   818, -1532,  1857,  3156,  1261,  3274,  3678,  3102,  3666,
    3693,  2652,  3694,  3735,  4034,  3880,  3917,  1369,  1284,  4399,
    3904,  2086,  3235,  1727,  2986,  3564,  2087,  3566,  3562,  4265,
     535,   681, -1532,  2088,   680,   536,  4267,  4217,  2089,  2198,
    4268,  2090,  4224,   641,  4222,  4098,  2736,  4037,  2649,  1987,
     970,  3883,  3090,  2891,  1262,  1652,  3667,  1653,  1654,  1655,
    1985,  2129,  2166,  2428,  3293,  2872,  1656,  3591,  4339,   985,
    2825,  2914,  2091,  1383,  2453,  3258,  2769,  3573,  1681,  3637,
    2979,  2824, -1532,  4264,  4164,  3748,  2092,  2093,  2094,  2095,
    4470,  2841,  1632,  4471,  3673,  2003,  4007,  4544,  2921,   818,
     818,   818,  3999,  1285,   641, -1532,  1191,  2740,  1845,  1192,
    1788,  2096,  2870,  1498,   818,  2897,  1499,  3275,  3834,  1883,
    3122,  3122,  3647,  3607,  3606,  1500,  4397,   973,  1501,  2207,
    4480,  1081,  2504,  3276,  1286,   955,  2505,  4488,  1973,  1951,
     818,  1890,  3677,  3593,  1657,  2362,   818,  4419,  1287,   818,
    4524,   818,  4543,  4598, -1532,  4469,  4601,   818,  3610,   818,
     818,  3911,  1903,  2940,  3629,  4408,  4409,   914,  2097,  2098,
    2099,  1288,  2324,   915,  1289,  4592,  2489,  2100,  2938,  2937,
    2930,  2408,  1263,  1372,  2451,  1893,  4226,  1290,  2383,  2188,
    3578,  1264,   884,  2101,  4232,   672,  3277,  2102,  1375,  1658,
    1659,  4201,  1067,  3936,   673,  4532,  1265,  1068,  1069,  1291,
    4537,     0,     0,     0,  3278,     0, -1532,     0,     0,     0,
       0,     0,     0,     0,  1266,     0,     0,  2103,     0, -1532,
       0,     0,     0,     0,  1292,     0,     0,     0,     0,     0,
    2104,  1293,     0,     0,   818,  4571,     0, -1532,     0, -1532,
       0,     0,     0,     0,     0,   818,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1267,     0,  1727,
       0,  4571, -1532, -1532,     0,     0, -1532, -1532,     0,   641,
       0,     0,  1294,  1727,     0,     0,     0,   818,  1727,     0,
       0,     0,     0,  1727,     0,     0,     0,     0,  1268,     0,
       0,  -944,     0,     0,     0,     0,     1,   818,     2,  2060,
    2061,     0,     0,     0,   818,     0,     0,     0,     0,   509,
       0,     0,   510,  1269,     3,     0,     0,     0,     4,     0,
       0,     0,     0,  1270,     0,     0,     0,     0,     0,     0,
       0,     0,     5,     6,     0,  2063,     0,     0,     0,  1660,
       7,     0,     0,     0,     0,     8,     9,     0,     0,     0,
       0,  2066,     0,  1193,  1661,  1662,     0,     0,     0,  2067,
       0,     0,     0,    10,     0,     0,     0,  1271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     848,    11,     0,  2069,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1506,     0,     0,
       0,  2070,     0,    12,  1295,     0,     0,     0,  1370,     0,
       0,     0,    13,    14,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1297,    16,    17,     0,     0,     0,
    2075,     0,  1298,     0,     0,     0,     0,     0,    18,     0,
    1299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1300,     0,
      20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1301,  1302,     0,     0,    21,     0,    22,     0,     0,
       0,     0,    23,     0,     0,    24,     0,     0,     0,     0,
    1542,     0,  2079,     0,     0,     0,     0,     0,   818,     0,
    2080,  1089,     0,     0,     0,     0,     0,     0,     0,    25,
       0,    26,     0,     0,     0,     0,     0,  2081,     0,     0,
       0,     0,     0,     0,  1303,     0,     0,     0,     0,    27,
       0,     0,  1121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,  1138,     0,
      29,  1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,
    1552,  1304,  1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,   818,  1562,  1563,     0,   818,  2083,     0,     0,     0,
     818,   818,     0,  1305,     0,  1306,     0,     0,     0,   818,
       0,     0,   818,     0,  2084,  1183,     0,     0,     0,     0,
       0,     0,   818,   818,     0,   818,   818,     0,   818,   818,
     818,   818,   818,     0,     0,   818,     0,     0,     0,     0,
       0,     0,     0,     0,   818,     0,     0,     0,     0,     0,
       0,   818,     0,   818,     0,   818,   818,     0,   818,   818,
       0,     0,     0,   818,   818,   818,    30,     0,  2088,   818,
     818,   818,     0,   818,     0,   818,  2090,   818,     0,   818,
       0,   818,     0,    31,     0,     0,   818,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,     0,     0,     0,     0,   818,     0,    33,     0,     0,
       0,     0,   818,     0,     0,   818,     0,  1564,  1565,     0,
       0,   818,     0,     0,   818,     0,     0,     0,   818,    34,
       0,     0,    35,     0,    36,     0,     0,    37,     0,     0,
      38,    39,     0,     0,     0,     0,  2096,     0,     0,     0,
      40,     0,    41,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,  3088,     0,     0,    43,     0,  2057,     0,
    2058,     0,     0,     0,    44,     0,     0,     0,     0,    45,
       0,    46,     0,  2060,  2061,     0,     0,     0,     0,     0,
     818,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2097,  2098,  2099,     0,     0,     0,     0,
       0,    47,  2100,     0,  2062,     0,     0,     0,     0,  2063,
       0,    48,     0,     0,     0,     0,     0,     0,  2101,     0,
       0,     0,  2102,     0,     0,  2066,     0,     0,     0,     0,
       0,     0,     0,  2067,     0,     0,     0,   818,     0,     0,
       0,  1541,  2068,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2069,     0,     0,
       0,     0,    49,     0,     0,  2104,     0,     0,     0,     0,
       0,  1506,     0,     0,    50,  2070,     0,     0,    51,     0,
       0,    52,     0,  2071,     0,     0,     0,    53,     0,     0,
    3089,     0,     0,     0,     0,     0,  1612,  1613,  2074,     0,
       0,     0,     0,     0,  2075,  1623,  1624,     0,     0,  1627,
    1628,  1629,     0,     0,     0,    54,     0,     0,     0,  1637,
    1638,  2994,  1639,  1640,     0,     0,     0,  1665,     0,     0,
      55,  1674,  1675,  1676,  1677,  2077,  1679,     0,     0,  2994,
    2994,     0,     0,     0,  1687,  1688,     0,  1691,  1692,     0,
       0,     0,     0,     0,  1696,  1697,  1698,     0,     0,  1701,
    1702,  1703,  1704,  1705,  1706,     0,  1708,     0,     0,  1711,
    1712,     0,     0,     0,  1715,     0,  2079,     0,  1718,  1722,
    1723,     0,     0,     0,  2080,     0,     0,     0,     0,     0,
       0,  1730,  1731,  1732,     0,     0,     0,     0,     0,     0,
    1740,  2081,     0,     0,     0,     0,     0,  1745,  1746,  1747,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2082,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
    1783,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2083,     4,     0,     0,     0,     0,     0,  2994,  2994,     0,
       0,     0,     0,     0,     0,     5,     6,     0,  2084,     0,
       0,     0,  2085,     7,     0,     0,     0,     0,     8,     9,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   818,     0,
       0,     0,   818,     0,    11,  2087,     0,     0,     0,     0,
       0,     0,  2088,     0,     0,     0,     0,     0,     0,     0,
    2090,     0,   818,   818,     0,     0,    12,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,     0,     0,
       0,     0,     0,   818,     0,     0,     0,     0,    16,    17,
       0,     0,   818,     0,   818,     0,   818,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2093,     0,     0,     0,
       0,     0,     0,     0,     0,    19,  1902,     0,     0,     0,
       0,     0,     0,   818,     0,     0,     0,     0,   818,  1911,
    2096,     0,     0,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1938,    21,     0,
      22,     0,     0,     0,     0,    23,     0,   818,    24,     0,
       0,     0,     0,     0,  3420,  3421,     0,     0,     0,     0,
    3422,     0,  3423,     0,  3424,  3425,     0,     0,     0,     0,
       0,     0,    25,     0,    26,     0,     0,  2097,  2098,  2099,
       0,     0,  3426,     0,     0,     0,  2100,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2101,     0,     0,     0,  2102,     0,     0,    28,
       0,     0,     0,    29,     0,     0,     0,     0,     0,   818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3427,     0,     0,  3428,     0,     0,     0,     0,
       0,   818,     0,  3429,     0,     0,     0,     0,     0,  2104,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3430,     0,     0,   818,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3431,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3432,     0,  3433,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3434,  3435,     0,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,  2219,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3436,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,     0,     0,    35,     0,    36,     0,     0,
      37,     0,     0,    38,    39,     0,     0,     0,   818,   818,
       0,     0,  3437,    40,     0,    41,     0,     0,     0,     0,
       0,  3438,  3439,    42,  3440,     0,     0,     0,     0,    43,
       0,     0,     0,  2994,     0,     0,     0,    44,     0,     0,
       0,     0,    45,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3441,  3442,  3443,  2294,  2296,  2298,     0,     0,     0,     0,
       0,   818,     0,     0,    47,     0,     0,     0,     0,  3444,
    3445,  3446,     0,     0,    48,     0,  3447,     0,     0,  3448,
       0,     0,     0,     0,     0,     0,   818,     0,     0,     0,
     818,   818,     0,   818,  2333,     0,  3449,  3450,     0,     0,
       0,     0,   818,  2338,     0,  2339,     0,   818,     0,     0,
     818,     0,   818,   818,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,  3451,
    3452,     0,     0,     0,     0,     0,     0,    50,     0,     0,
       0,    51,     0,     0,    52,   818,     0,     0,     0,     0,
      53,     0,     0,     0,  3453,     0,     0,     0,     0,     0,
    1643,  1644,  1645,  1646,  1647,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    54,   818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    55,     0,   859,   917,     0,  2422,     0,
       0,     0,     0,   818,     0,     0,     0,     0,  3454,  2424,
       0,     0,  3455,     0,     0,     0,     0,     0,     0,     0,
       0,   918,   902,     0,  3456,     0,     0,     0,   919,     0,
       0,     0,     0,     0,   920,     0,     0,  2060,  2061,     0,
       0,  2470,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   921,     0,   922,
       0,  2488,  1648,  1649,  1650,  1651,   818,     0,  2470,   923,
       0,  -797,  -797,  2063,   818,     0,     0,     0,     0,     0,
       0,     0,     0,  -797,     0,     0,  3457,     0,     0,  2066,
    3458,     0,     0,  3459,  3460,  3461,  3462,  2067,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1815,   924,     0,
       0,  2069,     0,   925,     0,     0,   926,     0,     0,     0,
       0,     0,     0,     0,     0,  1506,     0,     0,     0,  2070,
       0,     0,  3463,  3464,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   927,     0,   928,     0,     0,
       0,     0,     0,     0,   929,     0,   930,  3465,  2075,     0,
       0,  1652,     0,  1653,  1654,  1655,     0,     0,     0,     0,
       0,     0,  1656,     0,     0,     0,     0,     0,     0,   931,
     932,   933,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   934,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   935,     0,     0,     0,     0,
    2079,     0,     0,     0,     0,     0,     0,     0,  2080,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1657,     0,     0,     0,     0,  2081,     0,     0,   936,     0,
       0,     0,  2663,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   818,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1658,  1659,     0,     0,     0,
       0,     0,     0,     0,  2083,     0,     0,     0,     0,     0,
       0,     0,     0,   937,   818,   818,     0,     0,     0,     0,
       0,     0,  2084,   818,     0,  2749,     0,     0,     0,  2751,
       0,     0,     0,     0,  2753,  2754,     0,     0,   938,     0,
       0,     0,     0,  2767,     0,     0,     0,     0,   939,   940,
       0,     0,   941,   942,     0,     0,  2774,  2775,     0,  2776,
       0,     0,  2778,  2779,  2780,  2781,  2782,     0,     0,     0,
       0,     0,     0,   943,     0,     0,  2088,     0,  2786,     0,
       0,     0,     0,     0,  2090,  2787,     0,  2788,     0,  2789,
    2790,     0,  2791,     0,     0,     0,     0,  2794,  2795,  2796,
       0,     0,     0,  2798,  2799,  2800,     0,  2801,     0,  2803,
       0,  2805,     0,  2807,     0,  2808,     0,     0,     0,   944,
    2809,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   945,     0,     0,     0,     0,     0,     0,  2829,
       0,     0,     0,     0,     0,  1660,     0,     0,     0,     0,
       0,     0,     0,     0,  2096,  2839,     0,     0,  2842,     0,
    1661,  1662,     0,   818, -2412,     0,     0,   818,     0,     0,
     946,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   947,   948,
       0,     0,     0,     0,   818,     0,     0,     0,     0,   949,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   818,
       0,  2097,  2098,  2099,     0,     0,     0,     0,     0,     0,
    2100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2101,     0,     0,     0,
    2102,     0,     0,   950,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2412,     0,     0,     0,     0,     0,
     951,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2104,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4069,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   818,     0,     0,
       0,     0,     0,     0,     0,   818,     0,     0,     0,     0,
       0,     0,   818,     0,   818,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     818,     0,     0,     0,     0,     0,  4069,  4069,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     818,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   818,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   818,
       0,   818,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   818,  3168,  4069,  4069,     0,  3170,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3192,  3193,     0,     0,
    4325,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3215,     0,     0,
       0,     0,     0,     0,     0,     0,  3225,     0,  3227,     0,
    3229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   818,     0,  4069,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4069,   818,     0,     0,     0,     0,
       0,  3290,     0,     0,     0,     0,     0,     0,  4069,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     818,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   818,  4069,     0,     0,     0,     0,
       0,     0,     0,  2470,     0,     0,     0,  4069,  4069,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   818,  3360,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3379,
       0,     0,     0,     0,  4069,     0,     0,     0,     0,     0,
       0,   818,     0,     0,  4069,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   818,     0,     0,     0,     0,     0,
       0,  4069,     0,  4069,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4069,     0,     0,     0,   818,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4069,     0,  4069,     0,  4069,     0,     0,     0,     0,     0,
       0,  4069,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4069,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4069,  4069,     0,     0,     0,
       0,     0,  3476,  3477,     0,     0,     0,     0,     0,     0,
       0,  4069,  4069,     0,     0,     0,  4069,     0,     0,     0,
       0,     0,   818,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   818,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3521,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3539,     0,     0,     0,  3543,  3544,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3551,     0,     0,     0,
       0,  3553,     0,     0,  3554,     0,  3555,  3556,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3587,     0,     0,     0,     0,     0,     0,     0,  3658,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3855,  3856,
       0,     0,     0,     0,     0,     0,     0,  3379,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3379,     0,     0,
       0,  3964,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3379,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4152,
       0,     0,     0,     0,     0,     0,  4157,     0,  4159,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4178,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3379,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3379,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4279,     0,  4280,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4288,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4380,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4385,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4433,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4482,     0,     0,     0,     0,
       0,   137,     0,   689,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   690,     0,
     147,   148,   149,   150,   691,   152,     0,   153,  4508,     0,
     692,   154,   693,   694,   695,   155,   696,     0,   156,   157,
     158,  1719,   159,     0,   160,   161,     0,     0,   162,   697,
     698,   163,   164,     0,   165,   166,   699,   700,   168,     0,
     169,   170,   171,   172,   173,     0,   701,   175,     0,   702,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,   188,     0,   189,   190,   191,   703,   193,
       0,   704,   705,   194,     0,     0,   195,   706,   196,   707,
       0,   197,   708,   709,     0,   198,   199,   200,   710,   711,
     712,     0,     0,     0,     0,   713,   203,   714,     0,     0,
     715,   204,   205,     0,   206,     0,  4580,     0,   207,     0,
     208,   209,   210,   211,   212,     0,     0,     0,   213,     0,
       0,   214,   215,   216,     0,     0,     0,   217,     0,   218,
     219,     0,   220,   221,   222,     0,  3587,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   716,     0,   231,   232,
     233,   234,   235,   717,   718,   236,   237,     0,   238,   239,
     240,   719,     0,   241,     0,     0,     0,   720,   243,     0,
     244,     0,   245,     0,   246,   721,   248,   722,     0,   250,
       0,   251,     0,   723,     0,   252,   253,     0,   254,   724,
       0,   255,   256,     0,     0,     0,   725,   258,   259,   260,
     726,     0,   261,   262,   263,     0,   264,     0,   265,     0,
       0,     0,   727,   266,   267,   728,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,  1720,   276,     0,   729,
     277,   278,     0,     0,     0,     0,     0,   730,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   731,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   732,   306,   307,   308,
     309,   733,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   734,   317,     0,     0,   735,   319,   736,   320,
       0,   321,   737,   738,   739,   740,   741,   326,   327,   328,
     329,   330,     0,   742,   331,   332,     0,     0,   333,   334,
     335,   336,   743,   744,   745,   337,   338,     0,   746,   747,
     339,     0,   340,   341,   748,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,   749,   350,   351,     0,   352,   353,   750,
     355,   356,   357,   358,   751,   752,   361,   753,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   754,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,   755,
     756,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   757,     0,   758,   398,   399,   400,   401,   402,
     759,   760,   405,   406,   407,   408,     0,   761,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
       0,     0,   762,   763,   440,   441,     0,   442,   443,   764,
     445,   446,   447,   765,   766,   448,   449,   450,   451,   767,
     452,   453,     0,     0,   454,   455,   456,   457,   458,     0,
     768,   459,   460,     0,   461,   769,   770,   771,   772,     0,
       0,     0,     0,   466,   467,   468,   469,   470,   471,  1721,
     472,   473,     0,   773,   774,   775,   475,   476,   477,   776,
     478,   479,   777,   480,   481,     0,   482,   483,     0,     0,
     484,     0,     0,   485,     0,   486,     0,   778,   488,   489,
       0,     0,   779,   780,   781,   782,   490,     0,     0,   491,
     783,     0,   784,   492,   493,   494,   785,   786,     0,     0,
       0,     0,     0,     0,   497,   498,     0,   499,   500,   501,
       0,     0,   787,     0,     0,     0,   788,   789,     0,     0,
       0,     0,   790,   791,     0,     0,   792,   793,     0,     0,
     794,   795,   137,     0,   689,   139,   140,   141,   142,  2466,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   690,
       0,   147,   148,   149,   150,   691,   152,     0,   153,     0,
       0,  2467,   154,   693,   694,   695,   155,   696,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     697,   698,   163,   164,     0,   165,   166,   699,   700,   168,
       0,   169,   170,   171,   172,   173,     0,   701,   175,     0,
     702,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   703,
     193,     0,   704,   705,   194,     0,     0,   195,   706,   196,
     707,     0,   197,   708,   709,     0,   198,   199,   200,   710,
     711,   712,     0,     0,     0,     0,   713,   203,   714,     0,
       0,  2468,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   716,     0,   231,
     232,   233,   234,   235,   717,   718,   236,   237,     0,   238,
     239,   240,   719,     0,   241,     0,     0,     0,   720,   243,
       0,   244,     0,   245,     0,   246,   721,   248,   722,     0,
     250,     0,   251,     0,   723,     0,   252,   253,     0,   254,
     724,     0,   255,   256,     0,     0,     0,   725,   258,   259,
     260,   726,     0,   261,   262,   263,     0,   264,     0,   265,
       0,     0,     0,   727,   266,   267,   728,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
     729,   277,   278,     0,     0,     0,     0,     0,   730,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,   731,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   732,   306,   307,
     308,   309,   733,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   734,   317,     0,     0,   735,   319,   736,
     320,     0,   321,   737,   738,   739,   740,   741,   326,   327,
     328,   329,   330,     0,   742,   331,   332,     0,     0,   333,
     334,   335,   336,   743,   744,   745,   337,   338,     0,   746,
     747,   339,     0,   340,   341,   748,  2469,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,   749,   350,   351,     0,   352,   353,
     750,   355,   356,   357,   358,   751,   752,   361,   753,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   754,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     755,   756,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   757,     0,   758,   398,   399,   400,   401,
     402,   759,   760,   405,   406,   407,   408,     0,   761,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,   762,   763,   440,   441,     0,   442,   443,
     764,   445,   446,   447,   765,   766,   448,   449,   450,   451,
     767,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,   768,   459,   460,     0,   461,   769,   770,   771,   772,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,   773,   774,   775,   475,   476,   477,
     776,   478,   479,   777,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   778,   488,
     489,     0,     0,   779,   780,   781,   782,   490,     0,     0,
     491,   783,     0,   784,   492,   493,   494,   785,   786,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   787,     0,     0,     0,   788,   789,     0,
       0,     0,     0,   790,   791,     0,     0,   792,   793,     0,
       0,   794,   795,   137,     0,   689,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     690,     0,   147,   148,   149,   150,   691,   152,     0,   153,
       0,     0,   692,   154,   693,   694,   695,   155,   696,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   697,   698,   163,   164,     0,   165,   166,   699,   700,
     168,     0,   169,   170,   171,   172,   173,     0,   701,   175,
       0,   702,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     703,   193,     0,   704,   705,   194,     0,     0,   195,   706,
     196,   707,     0,   197,   708,   709,     0,   198,   199,   200,
     710,   711,   712,     0,     0,     0,     0,   713,   203,   714,
       0,     0,   715,   204,   205,     0,   206,     0,     0,     0,
     207,     0,   208,   209,   210,   211,   212,     0,     0,     0,
     213,     0,     0,   214,   215,   216,     0,     0,     0,   217,
       0,   218,   219,     0,   220,   221,   222,     0,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   716,     0,
     231,   232,   233,   234,   235,   717,   718,   236,   237,     0,
     238,   239,   240,   719,     0,   241,     0,     0,     0,   720,
     243,  2293,   244,     0,   245,     0,   246,   721,   248,   722,
       0,   250,     0,   251,     0,   723,     0,   252,   253,     0,
     254,   724,     0,   255,   256,     0,     0,     0,   725,   258,
     259,   260,   726,     0,   261,   262,   263,     0,   264,     0,
     265,     0,     0,     0,   727,   266,   267,   728,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,   729,   277,   278,     0,     0,     0,     0,     0,   730,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     731,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   732,   306,
     307,   308,   309,   733,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   734,   317,     0,     0,   735,   319,
     736,   320,     0,   321,   737,   738,   739,   740,   741,   326,
     327,   328,   329,   330,     0,   742,   331,   332,     0,     0,
     333,   334,   335,   336,   743,   744,   745,   337,   338,     0,
     746,   747,   339,     0,   340,   341,   748,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,   749,   350,   351,     0,   352,
     353,   750,   355,   356,   357,   358,   751,   752,   361,   753,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   754,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,   755,   756,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   757,     0,   758,   398,   399,   400,
     401,   402,   759,   760,   405,   406,   407,   408,     0,   761,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,     0,     0,   762,   763,   440,   441,     0,   442,
     443,   764,   445,   446,   447,   765,   766,   448,   449,   450,
     451,   767,   452,   453,     0,     0,   454,   455,   456,   457,
     458,     0,   768,   459,   460,     0,   461,   769,   770,   771,
     772,     0,     0,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,     0,   773,   774,   775,   475,   476,
     477,   776,   478,   479,   777,   480,   481,     0,   482,   483,
       0,     0,   484,     0,     0,   485,     0,   486,     0,   778,
     488,   489,     0,     0,   779,   780,   781,   782,   490,     0,
       0,   491,   783,     0,   784,   492,   493,   494,   785,   786,
       0,     0,     0,     0,     0,     0,   497,   498,     0,   499,
     500,   501,     0,     0,   787,     0,     0,     0,   788,   789,
       0,     0,     0,     0,   790,   791,     0,     0,   792,   793,
       0,     0,   794,   795,   137,     0,   689,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   690,     0,   147,   148,   149,   150,   691,   152,     0,
     153,     0,     0,   692,   154,   693,   694,   695,   155,   696,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   697,   698,   163,   164,     0,   165,   166,   699,
     700,   168,     0,   169,   170,   171,   172,   173,     0,   701,
     175,     0,   702,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   703,   193,     0,   704,   705,   194,     0,     0,   195,
     706,   196,   707,     0,   197,   708,   709,     0,   198,   199,
     200,   710,   711,   712,     0,     0,     0,     0,   713,   203,
     714,     0,     0,   715,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   716,
       0,   231,   232,   233,   234,   235,   717,   718,   236,   237,
       0,   238,   239,   240,   719,     0,   241,     0,     0,     0,
     720,   243,  2295,   244,     0,   245,     0,   246,   721,   248,
     722,     0,   250,     0,   251,     0,   723,     0,   252,   253,
       0,   254,   724,     0,   255,   256,     0,     0,     0,   725,
     258,   259,   260,   726,     0,   261,   262,   263,     0,   264,
       0,   265,     0,     0,     0,   727,   266,   267,   728,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,   729,   277,   278,     0,     0,     0,     0,     0,
     730,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,   731,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   732,
     306,   307,   308,   309,   733,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   734,   317,     0,     0,   735,
     319,   736,   320,     0,   321,   737,   738,   739,   740,   741,
     326,   327,   328,   329,   330,     0,   742,   331,   332,     0,
       0,   333,   334,   335,   336,   743,   744,   745,   337,   338,
       0,   746,   747,   339,     0,   340,   341,   748,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,   749,   350,   351,     0,
     352,   353,   750,   355,   356,   357,   358,   751,   752,   361,
     753,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   754,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,   755,   756,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   757,     0,   758,   398,   399,
     400,   401,   402,   759,   760,   405,   406,   407,   408,     0,
     761,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,     0,     0,   762,   763,   440,   441,     0,
     442,   443,   764,   445,   446,   447,   765,   766,   448,   449,
     450,   451,   767,   452,   453,     0,     0,   454,   455,   456,
     457,   458,     0,   768,   459,   460,     0,   461,   769,   770,
     771,   772,     0,     0,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,     0,   773,   774,   775,   475,
     476,   477,   776,   478,   479,   777,   480,   481,     0,   482,
     483,     0,     0,   484,     0,     0,   485,     0,   486,     0,
     778,   488,   489,     0,     0,   779,   780,   781,   782,   490,
       0,     0,   491,   783,     0,   784,   492,   493,   494,   785,
     786,     0,     0,     0,     0,     0,     0,   497,   498,     0,
     499,   500,   501,     0,     0,   787,     0,     0,     0,   788,
     789,     0,     0,     0,     0,   790,   791,     0,     0,   792,
     793,     0,     0,   794,   795,   137,     0,   689,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   690,     0,   147,   148,   149,   150,   691,   152,
       0,   153,     0,     0,   692,   154,   693,   694,   695,   155,
     696,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   697,   698,   163,   164,     0,   165,   166,
     699,   700,   168,     0,   169,   170,   171,   172,   173,     0,
     701,   175,     0,   702,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,     0,   189,
     190,   191,   703,   193,     0,   704,   705,   194,     0,     0,
     195,   706,   196,   707,     0,   197,   708,   709,     0,   198,
     199,   200,   710,   711,   712,     0,     0,     0,     0,   713,
     203,   714,     0,     0,   715,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     716,     0,   231,   232,   233,   234,   235,   717,   718,   236,
     237,     0,   238,   239,   240,   719,     0,   241,     0,     0,
       0,   720,   243,  2297,   244,     0,   245,     0,   246,   721,
     248,   722,     0,   250,     0,   251,     0,   723,     0,   252,
     253,     0,   254,   724,     0,   255,   256,     0,     0,     0,
     725,   258,   259,   260,   726,     0,   261,   262,   263,     0,
     264,     0,   265,     0,     0,     0,   727,   266,   267,   728,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   729,   277,   278,     0,     0,     0,     0,
       0,   730,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   731,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     732,   306,   307,   308,   309,   733,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   734,   317,     0,     0,
     735,   319,   736,   320,     0,   321,   737,   738,   739,   740,
     741,   326,   327,   328,   329,   330,     0,   742,   331,   332,
       0,     0,   333,   334,   335,   336,   743,   744,   745,   337,
     338,     0,   746,   747,   339,     0,   340,   341,   748,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,   749,   350,   351,
       0,   352,   353,   750,   355,   356,   357,   358,   751,   752,
     361,   753,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   754,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,   755,   756,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   757,     0,   758,   398,
     399,   400,   401,   402,   759,   760,   405,   406,   407,   408,
       0,   761,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,     0,     0,   762,   763,   440,   441,
       0,   442,   443,   764,   445,   446,   447,   765,   766,   448,
     449,   450,   451,   767,   452,   453,     0,     0,   454,   455,
     456,   457,   458,     0,   768,   459,   460,     0,   461,   769,
     770,   771,   772,     0,     0,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,     0,   773,   774,   775,
     475,   476,   477,   776,   478,   479,   777,   480,   481,     0,
     482,   483,     0,     0,   484,     0,     0,   485,     0,   486,
       0,   778,   488,   489,     0,     0,   779,   780,   781,   782,
     490,     0,     0,   491,   783,     0,   784,   492,   493,   494,
     785,   786,     0,     0,     0,     0,     0,     0,   497,   498,
       0,   499,   500,   501,     0,     0,   787,     0,     0,     0,
     788,   789,     0,     0,     0,     0,   790,   791,     0,     0,
     792,   793,     0,     0,   794,   795,   137,     0,   689,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   690,     0,   147,   148,   149,   150,   691,
     152,     0,   153,     0,     0,   692,   154,   693,   694,   695,
     155,   696,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,   697,   698,   163,   164,     0,   165,
     166,   699,   700,   168,     0,   169,   170,   171,   172,   173,
       0,   701,   175,     0,   702,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   703,   193,     0,   704,   705,   194,     0,
       0,   195,   706,   196,   707,     0,   197,   708,   709,     0,
     198,   199,   200,   710,   711,   712,     0,     0,     0,     0,
     713,   203,   714,     0,     0,   715,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,   716,     0,   231,   232,   233,   234,   235,   717,   718,
     236,   237,     0,   238,   239,   240,   719,     0,   241,     0,
       0,     0,   720,   243,     0,   244,     0,   245,     0,   246,
     721,   248,   722,     0,   250,     0,   251,     0,   723,     0,
     252,   253,     0,   254,   724,     0,   255,   256,     0,     0,
       0,   725,   258,   259,   260,   726,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,   727,   266,   267,
     728,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,   729,   277,   278,     0,     0,     0,
       0,     0,   730,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,   731,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   732,   306,   307,   308,   309,   733,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   734,   317,     0,
       0,   735,   319,   736,   320,     0,   321,   737,   738,   739,
     740,   741,   326,   327,   328,   329,   330,     0,   742,   331,
     332,     0,     0,   333,   334,   335,   336,   743,   744,   745,
     337,   338,     0,   746,   747,   339,     0,   340,   341,   748,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,   749,   350,
     351,     0,   352,   353,   750,   355,   356,   357,   358,   751,
     752,   361,   753,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   754,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,   755,   756,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   757,     0,   758,
     398,   399,   400,   401,   402,   759,   760,   405,   406,   407,
     408,     0,   761,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,   762,   763,   440,
     441,     0,   442,   443,   764,   445,   446,   447,   765,   766,
     448,   449,   450,   451,   767,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   768,   459,   460,     0,   461,
     769,   770,   771,   772,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,   773,   774,
     775,   475,   476,   477,   776,   478,   479,   777,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   778,   488,   489,     0,     0,   779,   780,   781,
     782,   490,     0,     0,   491,   783,     0,   784,   492,   493,
     494,   785,   786,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,     0,   787,     0,     0,
       0,   788,   789,     0,     0,     0,     0,   790,   791,     0,
       0,   792,   793,     0,     0,   794,   795,   137,     0,   689,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,     0,   690,     0,   147,   148,   149,   150,
     691,   152,     0,   153,     0,     0,   692,   154,   693,   694,
     695,   155,   696,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,   697,   698,   163,   164,     0,
     165,   166,   699,   700,   168,     0,   169,   170,   171,   172,
     173,     0,   701,   175,     0,   702,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,   188,
       0,   189,   190,   191,   703,   193,     0,   704,   705,   194,
       0,     0,   195,   706,   196,   707,     0,   197,   708,   709,
       0,   198,   199,   200,   710,   711,   712,     0,     0,     0,
       0,   713,   203,   714,     0,     0,   715,   204,   205,     0,
     206,     0,     0,     0,   207,     0,   208,   209,   210,   211,
     212,     0,     0,     0,   213,     0,     0,   214,   215,   216,
       0,     0,     0,   217,     0,   218,   219,     0,   220,   221,
     222,     0,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,   716,     0,   231,   232,   233,   234,   235,   717,
     718,   236,   237,     0,   238,   239,   240,   719,     0,   241,
       0,     0,     0,   720,   243,     0,   244,     0,   245,     0,
     246,   721,   248,   722,     0,   250,     0,   251,     0,   723,
       0,   252,   253,     0,   254,   724,     0,   255,   256,     0,
       0,     0,   725,   258,   259,   260,   726,     0,   261,   262,
     263,     0,   264,     0,   265,     0,     0,     0,   727,   266,
     267,   728,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   729,   277,   278,     0,     0,
       0,     0,     0,   730,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   731,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   732,   306,   307,   308,   309,   733,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   734,   317,
       0,     0,   735,   319,   736,   320,     0,   321,   737,   738,
     739,   740,   741,   326,   327,   328,   329,   330,     0,   742,
     331,   332,     0,     0,   333,   334,   335,   336,   743,   744,
     745,   337,   338,     0,   746,   747,   339,     0,   340,   341,
     748,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,   749,
     350,   351,     0,   352,   353,   750,   355,   356,   357,   358,
     751,   752,   361,   753,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   754,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,   755,   756,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   757,     0,
     758,   398,   399,   400,   401,   402,   759,   760,   405,   406,
     407,   408,     0,   761,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,     0,     0,   762,   763,
     440,   441,     0,   442,   443,   764,   445,   446,   447,   765,
     766,   448,   449,   450,   451,   767,   452,   453,     0,     0,
     454,   455,   456,   457,   458,     0,   768,   459,   460,     0,
     461,   769,   770,   771,   772,     0,     0,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,     0,   773,
     774,   775,   475,   476,   477,   776,   478,   479,   777,   480,
     481,     0,   482,   483,     0,     0,   484,     0,     0,   485,
       0,   486,     0,   778,   488,   489,     0,     0,   779,   780,
     781,   782,   490,     0,     0,   491,   783,     0,   784,   492,
     493,   494,   785,   786,     0,     0,     0,     0,     0,     0,
     497,   498,     0,   499,   500,   501,     0,     0,   787,     0,
       0,     0,   788,   789,     0,     0,     0,     0,   790,  1120,
       0,     0,   792,   793,     0,     0,   794,   795,   137,     0,
     689,   139,   140,   141,   142,  1754,     0,   143,     0,     0,
       0,  1755,   145,     0,     0,   690,     0,   147,   148,   149,
     150,   691,   152,     0,   153,     0,     0,   692,   154,   693,
     694,   695,   155,   696,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   697,   698,   163,   164,
       0,   165,   166,   699,   700,   168,     0,   169,   170,   171,
     172,   173,     0,   701,   175,     0,   702,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   703,   193,     0,   704,   705,
     194,     0,     0,   195,   706,   196,   707,     0,   197,   708,
     709,     0,   198,   199,   200,   710,   711,   712,     0,     0,
       0,     0,   713,   203,   714,     0,     0,   715,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,   716,     0,   231,   232,   233,   234,   235,
     717,   718,   236,   237,     0,   238,   239,   240,   719,     0,
     241,     0,     0,     0,   720,   243,     0,   244,     0,   245,
       0,   246,   721,   248,   722,     0,   250,     0,   251,     0,
     723,     0,   252,   253,     0,   254,   724,     0,   255,   256,
       0,     0,     0,   725,   258,   259,   260,   726,     0,   261,
     262,   263,     0,   264,     0,   265,     0,     0,     0,   727,
     266,   267,   728,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,   729,   277,   278,     0,
       0,     0,     0,     0,   730,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,   731,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   732,   306,   307,   308,   309,   733,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   734,
     317,     0,     0,   735,   319,   736,   320,     0,   321,   737,
     738,   739,   740,   741,   326,   327,   328,   329,   330,     0,
     742,   331,   332,     0,     0,   333,   334,   335,   336,   743,
       0,   745,   337,   338,     0,   746,   747,   339,     0,   340,
     341,   748,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
     749,   350,   351,     0,   352,   353,   750,   355,   356,   357,
     358,   751,   752,   361,   753,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   754,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,   755,   756,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   757,
       0,   758,   398,   399,   400,   401,   402,   759,   760,   405,
     406,   407,   408,     0,   761,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,     0,     0,   762,
     763,   440,   441,     0,   442,   443,   764,   445,   446,   447,
     765,   766,   448,   449,   450,   451,   767,   452,   453,     0,
       0,   454,   455,   456,   457,   458,     0,   768,   459,   460,
       0,   461,   769,   770,   771,   772,     0,     0,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,     0,
     773,   774,   775,   475,   476,   477,   776,   478,   479,   777,
     480,   481,     0,   482,   483,     0,     0,   484,     0,     0,
     485,     0,   486,     0,   778,   488,   489,     0,     0,   779,
     780,   781,   782,   490,     0,     0,   491,   783,     0,   784,
     492,   493,   494,   785,   786,     0,     0,     0,     0,     0,
       0,   497,   498,     0,   499,   500,   501,     0,     0,   787,
       0,     0,     0,   788,   789,     0,     0,     0,     0,   790,
     791,     0,     0,   792,   793,     0,     0,   794,   795,   137,
       0,   689,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,     0,   690,     0,   147,   148,
     149,   150,   691,   152,     0,   153,     0,     0,   692,   154,
     693,   694,   695,   155,   696,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   697,   698,   163,
     164,     0,   165,   166,   699,   700,   168,     0,   169,   170,
     171,   172,   173,     0,   701,   175,     0,   702,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,     0,
     187,   188,     0,   189,   190,   191,   703,   193,     0,   704,
     705,   194,     0,     0,   195,   706,   196,   707,     0,   197,
     708,   709,     0,   198,   199,   200,   710,   711,   712,     0,
       0,     0,     0,   713,   203,   714,     0,     0,   715,   204,
     205,     0,   206,     0,     0,     0,   207,     0,   208,   209,
     210,   211,   212,     0,     0,     0,   213,     0,     0,   214,
     215,   216,     0,     0,     0,   217,     0,   218,   219,     0,
     220,   221,   222,     0,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,   716,     0,   231,   232,   233,   234,
     235,   717,   718,   236,   237,     0,   238,   239,   240,   719,
       0,   241,     0,     0,     0,   720,   243,     0,   244,     0,
     245,     0,   246,   721,   248,   722,     0,   250,     0,   251,
       0,   723,     0,   252,   253,     0,   254,   724,     0,   255,
     256,     0,     0,     0,   725,   258,   259,   260,   726,     0,
     261,   262,   263,     0,   264,     0,   265,     0,     0,     0,
     727,   266,   267,  2748,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   729,   277,   278,
       0,     0,     0,     0,     0,   730,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   731,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   732,   306,   307,   308,   309,   733,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     734,   317,     0,     0,   735,   319,   736,   320,     0,   321,
     737,   738,   739,   740,   741,   326,   327,   328,   329,   330,
       0,   742,   331,   332,     0,     0,   333,   334,   335,   336,
     743,   744,   745,   337,   338,     0,   746,   747,   339,     0,
     340,   341,   748,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,   749,   350,   351,     0,   352,   353,   750,   355,   356,
     357,   358,   751,   752,   361,   753,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   754,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,   755,   756,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     757,     0,   758,   398,   399,   400,   401,   402,   759,   760,
     405,   406,   407,   408,     0,   761,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,     0,     0,
     762,   763,   440,   441,     0,   442,   443,   764,   445,   446,
     447,   765,   766,   448,   449,   450,   451,   767,   452,   453,
       0,     0,   454,   455,   456,   457,   458,     0,   768,   459,
     460,     0,   461,   769,   770,   771,   772,     0,     0,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
       0,   773,   774,   775,   475,   476,   477,   776,   478,   479,
     777,   480,   481,     0,   482,   483,     0,     0,   484,     0,
       0,   485,     0,   486,     0,   778,   488,   489,     0,     0,
     779,   780,   781,   782,   490,     0,     0,   491,   783,     0,
     784,   492,   493,   494,   785,   786,     0,     0,     0,     0,
       0,     0,   497,   498,     0,   499,   500,   501,     0,     0,
     787,     0,     0,     0,   788,   789,     0,     0,     0,     0,
     790,   791,     0,     0,   792,   793,     0,     0,   794,   795,
     137,     0,   689,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,     0,   690,     0,   147,
     148,   149,   150,   691,   152,     0,   153,     0,     0,   692,
     154,   693,   694,   695,   155,   696,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   697,   698,
     163,   164,     0,   165,   166,   699,   700,   168,     0,   169,
     170,   171,   172,   173,     0,   701,   175,     0,   702,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   703,   193,     0,
     704,   705,   194,     0,     0,   195,   706,   196,   707,     0,
     197,   708,   709,     0,   198,   199,   200,   710,   711,   712,
       0,     0,     0,     0,   713,   203,   714,     0,     0,   715,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,   716,     0,   231,   232,   233,
     234,   235,   717,   718,   236,   237,     0,   238,   239,   240,
     719,     0,   241,     0,     0,     0,   720,   243,     0,   244,
       0,   245,     0,   246,   721,   248,   722,     0,   250,     0,
     251,     0,   723,     0,   252,   253,     0,   254,   724,     0,
     255,   256,     0,     0,     0,   725,   258,   259,   260,   726,
       0,   261,   262,   263,     0,   264,     0,   265,     0,     0,
       0,   727,   266,   267,  2793,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,   729,   277,
     278,     0,     0,     0,     0,     0,   730,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,   731,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   732,   306,   307,   308,   309,
     733,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   734,   317,     0,     0,   735,   319,   736,   320,     0,
     321,   737,   738,   739,   740,   741,   326,   327,   328,   329,
     330,     0,   742,   331,   332,     0,     0,   333,   334,   335,
     336,   743,   744,   745,   337,   338,     0,   746,   747,   339,
       0,   340,   341,   748,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,   749,   350,   351,     0,   352,   353,   750,   355,
     356,   357,   358,   751,   752,   361,   753,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     754,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,   755,   756,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   757,     0,   758,   398,   399,   400,   401,   402,   759,
     760,   405,   406,   407,   408,     0,   761,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,     0,
       0,   762,   763,   440,   441,     0,   442,   443,   764,   445,
     446,   447,   765,   766,   448,   449,   450,   451,   767,   452,
     453,     0,     0,   454,   455,   456,   457,   458,     0,   768,
     459,   460,     0,   461,   769,   770,   771,   772,     0,     0,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,     0,   773,   774,   775,   475,   476,   477,   776,   478,
     479,   777,   480,   481,     0,   482,   483,     0,     0,   484,
       0,     0,   485,     0,   486,     0,   778,   488,   489,     0,
       0,   779,   780,   781,   782,   490,     0,     0,   491,   783,
       0,   784,   492,   493,   494,   785,   786,     0,     0,     0,
       0,     0,     0,   497,   498,     0,   499,   500,   501,     0,
       0,   787,     0,     0,     0,   788,   789,     0,     0,     0,
       0,   790,   791,     0,     0,   792,   793,     0,     0,   794,
     795,   137,     0,   689,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,   145,     0,     0,   690,     0,
     147,   148,   149,   150,   691,   152,     0,   153,     0,     0,
     692,   154,   693,   694,   695,   155,   696,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   697,
     698,   163,   164,     0,   165,   166,   699,   700,   168,     0,
     169,   170,   171,   172,   173,     0,   701,   175,     0,   702,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,     0,   187,   188,     0,   189,   190,   191,   703,   193,
       0,   704,   705,   194,     0,     0,   195,   706,   196,   707,
       0,   197,   708,   709,     0,   198,   199,   200,   710,   711,
     712,     0,     0,     0,     0,   713,   203,   714,     0,     0,
    3586,   204,   205,     0,   206,     0,     0,     0,   207,     0,
     208,   209,   210,   211,   212,     0,     0,     0,   213,     0,
       0,   214,   215,   216,     0,     0,     0,   217,     0,   218,
     219,     0,   220,   221,   222,     0,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,   716,     0,   231,   232,
     233,   234,   235,   717,   718,   236,   237,     0,   238,   239,
     240,   719,     0,   241,     0,     0,     0,   720,   243,     0,
     244,     0,   245,     0,   246,   721,   248,   722,     0,   250,
       0,   251,     0,   723,     0,   252,   253,     0,   254,   724,
       0,   255,   256,     0,     0,     0,   725,   258,   259,   260,
     726,     0,   261,   262,   263,     0,   264,     0,   265,     0,
       0,     0,   727,   266,   267,   728,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   729,
     277,   278,     0,     0,     0,     0,     0,   730,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   731,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   732,   306,   307,   308,
     309,   733,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   734,   317,     0,     0,   735,   319,   736,   320,
       0,   321,   737,   738,   739,   740,   741,   326,   327,   328,
     329,   330,     0,   742,   331,   332,     0,     0,   333,   334,
     335,   336,   743,   744,   745,   337,   338,     0,   746,   747,
     339,     0,   340,   341,   748,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,   749,   350,   351,     0,   352,   353,   750,
     355,   356,   357,   358,   751,   752,   361,   753,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   754,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,   755,
     756,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   757,     0,   758,   398,   399,   400,   401,   402,
     759,   760,   405,   406,   407,   408,     0,   761,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
       0,     0,   762,   763,   440,   441,     0,   442,   443,   764,
     445,   446,   447,   765,   766,   448,   449,   450,   451,   767,
     452,   453,     0,     0,   454,   455,   456,   457,   458,     0,
     768,   459,   460,     0,   461,   769,   770,   771,   772,     0,
       0,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,     0,   773,   774,   775,   475,   476,   477,   776,
     478,   479,   777,   480,   481,     0,   482,   483,     0,     0,
     484,     0,     0,   485,     0,   486,     0,   778,   488,   489,
       0,     0,   779,   780,   781,   782,   490,     0,     0,   491,
     783,     0,   784,   492,   493,   494,   785,   786,     0,     0,
       0,     0,     0,     0,   497,   498,     0,   499,   500,   501,
       0,     0,   787,     0,     0,     0,   788,   789,     0,     0,
       0,     0,   790,   791,     0,     0,   792,   793,     0,     0,
     794,   795,   137,     0,   689,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   690,
       0,   147,   148,   149,   150,   691,   152,     0,   153,     0,
       0,   692,   154,   693,   694,   695,   155,   696,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     697,   698,   163,   164,     0,   165,   166,   699,   700,   168,
       0,   169,   170,   171,   172,   173,     0,   701,   175,     0,
     702,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   703,
     193,     0,   704,   705,   194,     0,     0,   195,   706,   196,
     707,     0,   197,   708,   709,     0,   198,   199,   200,   710,
     711,   712,     0,     0,     0,     0,   713,   203,   714,     0,
       0,   715,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,   716,     0,   231,
     232,   233,   234,   235,   717,   718,   236,   237,     0,   238,
     239,   240,   719,     0,   241,     0,     0,     0,   720,   243,
       0,   244,     0,   245,     0,   246,   721,   248,   722,     0,
     250,     0,   251,     0,   723,     0,   252,   253,     0,   254,
     724,     0,   255,   256,     0,     0,     0,   725,   258,   259,
     260,   726,     0,   261,   262,   263,     0,   264,     0,   265,
       0,     0,     0,   727,   266,   267,   728,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
     729,   277,   278,     0,     0,     0,     0,     0,   730,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,   731,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   732,   306,   307,
     308,   309,   733,   310,   311,  4455,     0,     0,     0,   312,
     313,   314,   315,   734,   317,     0,     0,   735,   319,   736,
     320,     0,   321,   737,   738,   739,   740,   741,   326,   327,
     328,   329,   330,     0,   742,   331,   332,     0,     0,   333,
     334,   335,   336,   743,     0,   745,   337,   338,     0,   746,
     747,   339,     0,   340,   341,   748,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,   749,   350,   351,     0,   352,   353,
     750,   355,   356,   357,   358,   751,   752,   361,   753,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   754,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     755,   756,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   757,     0,   758,   398,   399,   400,   401,
     402,   759,   760,   405,   406,   407,   408,     0,   761,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,   762,   763,   440,   441,     0,   442,   443,
     764,   445,   446,   447,   765,   766,   448,   449,   450,   451,
     767,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,   768,   459,   460,     0,   461,   769,   770,   771,   772,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,   773,   774,   775,   475,   476,   477,
     776,   478,   479,   777,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   778,   488,
     489,     0,     0,   779,   780,   781,   782,   490,     0,     0,
     491,   783,     0,   784,   492,   493,   494,   785,   786,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   787,     0,     0,     0,   788,   789,     0,
       0,     0,     0,   790,   791,     0,     0,   792,   793,     0,
       0,   794,   795,   137,     0,   689,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,     0,
     690,     0,   147,   148,   149,   150,   691,   152,     0,   153,
       0,     0,   692,   154,   693,   694,   695,   155,   696,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   697,   698,   163,   164,     0,   165,   166,   699,   700,
     168,     0,   169,   170,   171,   172,   173,     0,   701,   175,
       0,   702,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     703,   193,     0,   704,   705,   194,     0,     0,   195,   706,
     196,   707,     0,   197,   708,   709,     0,   198,   199,   200,
     710,   711,   712,     0,     0,     0,     0,   713,   203,   714,
       0,     0,   715,   204,   205,     0,   206,     0,     0,     0,
     207,     0,   208,   209,   210,   211,   212,     0,     0,     0,
     213,     0,     0,   214,   215,   216,     0,     0,     0,   217,
       0,   218,   219,     0,   220,   221,   222,     0,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,   716,     0,
     231,   232,   233,   234,   235,   717,   718,   236,   237,     0,
     238,   239,   240,   719,     0,   241,     0,     0,     0,   720,
     243,     0,   244,     0,   245,     0,   246,   721,   248,   722,
       0,   250,     0,   251,     0,   723,     0,   252,   253,     0,
     254,   724,     0,   255,   256,     0,     0,     0,   725,   258,
     259,   260,   726,     0,   261,   262,   263,     0,   264,     0,
     265,     0,     0,     0,   727,   266,   267,   728,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,   729,   277,   278,     0,     0,     0,     0,     0,   730,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     731,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   732,   306,
     307,   308,   309,   733,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   734,   317,     0,     0,   735,   319,
     736,   320,     0,   321,   737,   738,   739,   740,   741,   326,
     327,   328,   329,   330,     0,   742,   331,   332,     0,     0,
     333,   334,   335,   336,   743,     0,   745,   337,   338,     0,
     746,   747,   339,     0,   340,   341,   748,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,   749,   350,   351,     0,   352,
     353,   750,   355,   356,   357,   358,   751,   752,   361,   753,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   754,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,   755,   756,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   757,     0,   758,   398,   399,   400,
     401,   402,   759,   760,   405,   406,   407,   408,     0,   761,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,     0,     0,   762,   763,   440,   441,     0,   442,
     443,   764,   445,   446,   447,   765,   766,   448,   449,   450,
     451,   767,   452,   453,     0,     0,   454,   455,   456,   457,
     458,     0,   768,   459,   460,     0,   461,   769,   770,   771,
     772,     0,     0,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,     0,   773,   774,   775,   475,   476,
     477,   776,   478,   479,   777,   480,   481,     0,   482,   483,
       0,     0,   484,     0,     0,   485,     0,   486,     0,   778,
     488,   489,     0,     0,   779,   780,   781,   782,   490,     0,
       0,   491,   783,     0,   784,   492,   493,   494,   785,   786,
       0,     0,     0,     0,     0,     0,   497,   498,     0,   499,
     500,   501,     0,     0,   787,     0,     0,     0,   788,   789,
       0,     0,     0,     0,   790,   791,     0,     0,   792,   793,
       0,     0,   794,   795,   137,     0,   689,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   690,     0,   147,   148,   149,   150,   691,   152,     0,
     153,     0,     0,   692,   154,   693,   694,   695,   155,   696,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   697,   698,   163,   164,     0,   165,   166,   699,
     700,   168,     0,   169,   170,   171,   172,   173,     0,   701,
     175,     0,   702,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   703,   193,     0,   704,   705,   194,     0,     0,   195,
     706,   196,   707,     0,   197,   708,   709,     0,   198,   199,
     200,   710,   711,   712,     0,     0,     0,     0,   713,   203,
     714,     0,     0,   715,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,   716,
       0,   231,   232,   233,   234,   235,   717,   718,   236,   237,
       0,   238,   239,   240,   719,     0,   241,     0,     0,     0,
     720,   243,     0,   244,     0,   245,     0,   246,   721,   248,
     722,     0,   250,     0,   251,     0,   723,     0,   252,   253,
       0,   254,   724,     0,   255,   256,     0,     0,     0,   725,
     258,   259,   260,   726,     0,   261,   262,   263,     0,   264,
       0,   265,     0,     0,     0,   727,   266,   267,  1769,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,   729,   277,   278,     0,     0,     0,     0,     0,
     730,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,   731,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   732,
     306,   307,   308,   309,   733,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   734,   317,     0,     0,   735,
     319,   736,   320,     0,   321,   737,   738,   739,   740,   741,
     326,   327,   328,   329,   330,     0,   742,   331,   332,     0,
       0,   333,   334,   335,   336,   743,     0,   745,   337,   338,
       0,   746,   747,   339,     0,   340,   341,   748,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,   749,   350,   351,     0,
     352,   353,   750,   355,   356,   357,   358,   751,   752,   361,
     753,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   754,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,   755,   756,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   757,     0,   758,   398,   399,
     400,   401,   402,   759,   760,   405,   406,   407,   408,     0,
     761,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,     0,     0,   762,   763,   440,   441,     0,
     442,   443,   764,   445,   446,   447,   765,   766,   448,   449,
     450,   451,   767,   452,   453,     0,     0,   454,   455,   456,
     457,   458,     0,   768,   459,   460,     0,   461,   769,   770,
     771,   772,     0,     0,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,     0,   773,   774,   775,   475,
     476,   477,   776,   478,   479,   777,   480,   481,     0,   482,
     483,     0,     0,   484,     0,     0,   485,     0,   486,     0,
     778,   488,   489,     0,     0,   779,   780,   781,   782,   490,
       0,     0,   491,   783,     0,   784,   492,   493,   494,   785,
     786,     0,     0,     0,     0,     0,     0,   497,   498,     0,
     499,   500,   501,     0,     0,   787,     0,     0,     0,   788,
     789,     0,     0,     0,     0,   790,   791,     0,     0,   792,
     793,     0,     0,   794,   795,   137,     0,   689,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,   145,
       0,     0,   690,     0,   147,   148,   149,   150,   691,   152,
       0,   153,     0,     0,   692,   154,   693,   694,   695,   155,
     696,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   697,   698,   163,   164,     0,   165,   166,
     699,   700,   168,     0,   169,   170,   171,   172,   173,     0,
     701,   175,     0,   702,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,   186,     0,   187,   188,     0,   189,
     190,   191,   703,   193,     0,   704,   705,   194,     0,     0,
     195,   706,   196,   707,     0,   197,   708,   709,     0,   198,
     199,   200,   710,   711,   712,     0,     0,     0,     0,   713,
     203,   714,     0,     0,   715,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     716,     0,   231,   232,   233,   234,   235,   717,   718,   236,
     237,     0,   238,   239,   240,   719,     0,   241,     0,     0,
       0,   720,   243,     0,   244,     0,   245,     0,   246,   721,
     248,   722,     0,   250,     0,   251,     0,   723,     0,   252,
     253,     0,   254,   724,     0,   255,   256,     0,     0,     0,
     725,   258,   259,   260,   726,     0,   261,   262,   263,     0,
     264,     0,   265,     0,     0,     0,   727,   266,   267,  1771,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   729,   277,   278,     0,     0,     0,     0,
       0,   730,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   731,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     732,   306,   307,   308,   309,   733,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   734,   317,     0,     0,
     735,   319,   736,   320,     0,   321,   737,   738,   739,   740,
     741,   326,   327,   328,   329,   330,     0,   742,   331,   332,
       0,     0,   333,   334,   335,   336,   743,     0,   745,   337,
     338,     0,   746,   747,   339,     0,   340,   341,   748,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,   749,   350,   351,
       0,   352,   353,   750,   355,   356,   357,   358,   751,   752,
     361,   753,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   754,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,   755,   756,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   757,     0,   758,   398,
     399,   400,   401,   402,   759,   760,   405,   406,   407,   408,
       0,   761,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,     0,     0,   762,   763,   440,   441,
       0,   442,   443,   764,   445,   446,   447,   765,   766,   448,
     449,   450,   451,   767,   452,   453,     0,     0,   454,   455,
     456,   457,   458,     0,   768,   459,   460,     0,   461,   769,
     770,   771,   772,     0,     0,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,     0,   773,   774,   775,
     475,   476,   477,   776,   478,   479,   777,   480,   481,     0,
     482,   483,     0,     0,   484,     0,     0,   485,     0,   486,
       0,   778,   488,   489,     0,     0,   779,   780,   781,   782,
     490,     0,     0,   491,   783,     0,   784,   492,   493,   494,
     785,   786,     0,     0,     0,     0,     0,     0,   497,   498,
       0,   499,   500,   501,     0,     0,   787,     0,     0,     0,
     788,   789,     0,     0,     0,     0,   790,   791,     0,     0,
     792,   793,     0,     0,   794,   795,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   693,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,  1807,     0,     0,     0,     0,
     202,   203,   714,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,   718,
     236,   237,     0,   238,   239,   240,   719,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,   724,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,   731,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   742,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,   746,   747,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   768,   459,   460,     0,   461,
    1808,   463,   464,  1809,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,   774,
     474,   475,   476,   477,   776,   478,   479,   777,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,     0,   502,     0,     0,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,   794,   795,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,  2580,   189,   190,   191,   192,   193,     0,
       0,     0,   194,     0,     0,   195,     0,   196,     0,     0,
     197,     0,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,   231,   232,   233,
     234,   235,     0,     0,   236,   237,     0,   238,   239,   240,
       0,     0,   241,     0,     0,     0,   242,   243,     0,   244,
     517,   245,     0,   246,   247,   248,   249,     0,   250,     0,
     251,     0,     0,     0,   252,   253,     0,   254,     0,     0,
     255,   256,     0,     0,     0,   257,   258,   259,   260,     0,
       0,   261,   262,   263,  2133,   264,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
    2134,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,  3152,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,  2089,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,  -478,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   520,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,     0,   454,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,   465,     0,     0,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,     0,     0,     0,   474,   475,   476,   477,     0,   478,
     479,     0,   480,   481,     0,   482,   483,     0,     0,   484,
       0,     0,   485,     0,   486,     0,   487,   488,   489,     0,
       0,     0,     0,     0,     0,   490,     0,     0,   491,     0,
       0,     0,   492,   493,   494,   495,   496,     0,     0,     0,
       0,     0,     0,   497,   498,     0,   499,   500,   501,     0,
       0,   502,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
    2651,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,  2580,   189,   190,   191,   192,
     193,     0,     0,     0,   194,     0,     0,   195,     0,   196,
       0,     0,   197,     0,     0,     0,   198,   199,   200,     0,
       0,   201,     0,     0,     0,     0,   202,   203,     0,     0,
       0,     0,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,   517,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,  2133,   264,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,  2134,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   520,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,   465,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,     0,     0,   474,   475,   476,   477,
       0,   478,   479,     0,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   487,   488,
     489,     0,     0,     0,     0,     0,     0,   490,     0,     0,
     491,     0,     0,     0,   492,   493,   494,   495,   496,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   502,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,  2651,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,     0,   194,     0,     0,   195,
       0,   196,     0,     0,   197,     0,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,   231,   232,   233,   234,   235,     0,     0,   236,   237,
       0,   238,   239,   240,     0,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,   245,     0,   246,   247,   248,
     249,     0,   250,     0,   251,     0,     0,     0,   252,   253,
       0,   254,     0,     0,   255,   256,     0,     0,     0,   257,
     258,   259,   260,     0,     0,   261,   262,   263,     0,   264,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,  2436,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,     0,   454,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,   465,     0,     0,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,     0,     0,     0,   474,   475,
     476,   477,     0,   478,   479,     0,   480,   481,     0,   482,
     483,     0,     0,   484,     0,     0,   485,     0,   486,     0,
     487,   488,   489,     0,     0,     0,     0,     0,     0,   490,
       0,     0,   491,     0,     0,     0,   492,   493,   494,   495,
     496,     0,     0,     0,     0,     0,     0,   497,   498,     0,
     499,   500,   501,     0,     0,   502,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,  2898,     0,   144,
     145,     0,     0,   146,   795,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,     0,   502,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,  4584,
     138,   139,   140,   141,   142,  4585,   795,   143,     0,     0,
       0,   144,   145,     0,     0,   146,     0,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,     0,
     194,     0,     0,   195,     0,   196,     0,     0,   197,     0,
       0,     0,   198,   199,   200,     0,     0,   201,     0,     0,
       0,     0,   202,   203,     0,     0,     0,     0,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,     0,   231,   232,   233,   234,   235,
       0,     0,   236,   237,     0,   238,   239,   240,     0,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,   245,
       0,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,     0,   252,   253,     0,   254,     0,     0,   255,   256,
       0,     0,     0,   257,   258,   259,   260,     0,     0,   261,
     262,   263,     0,   264,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
       0,   454,   455,   456,   457,   458,     0,     0,   459,   460,
       0,   461,   462,   463,   464,   465,     0,     0,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,     0,
       0,     0,   474,   475,   476,   477,     0,   478,   479,     0,
     480,   481,     0,   482,   483,     0,     0,   484,     0,     0,
     485,     0,   486,     0,   487,   488,   489,     0,     0,     0,
       0,     0,     0,   490,     0,     0,   491,     0,     0,     0,
     492,   493,   494,   495,   496,     0,     0,     0,     0,     0,
       0,   497,   498,     0,   499,   500,   501,     0,     0,   502,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
    1124,     0,     0,   144,   145,     0,     0,   146,   795,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,     0,   194,     0,     0,   195,     0,   196,     0,     0,
     197,     0,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,   231,   232,   233,
     234,   235,     0,     0,   236,   237,     0,   238,   239,   240,
       0,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,   245,     0,   246,   247,   248,   249,     0,   250,     0,
     251,     0,     0,     0,   252,   253,     0,   254,     0,     0,
     255,   256,     0,     0,     0,   257,   258,   259,   260,     0,
       0,   261,   262,   263,     0,   264,     0,   265,     0,     0,
       0,     0,   266,   267,     0,  1346,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,     0,   454,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,   465,     0,     0,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,     0,     0,     0,   474,   475,   476,   477,     0,   478,
     479,     0,   480,   481,     0,   482,   483,     0,     0,   484,
       0,     0,   485,     0,   486,     0,   487,   488,   489,     0,
       0,     0,     0,     0,     0,   490,     0,     0,   491,     0,
       0,     0,   492,   493,   494,   495,   496,     0,     0,     0,
       0,     0,     0,   497,   498,     0,   499,   500,   501,     0,
       0,   502,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
     557,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,     0,   194,     0,     0,   195,     0,   196,
       0,     0,   197,     0,     0,     0,   198,   199,   200,     0,
       0,   201,     0,     0,     0,     0,   202,   203,     0,     0,
       0,     0,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,     0,   264,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,   465,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,     0,     0,   474,   475,   476,   477,
       0,   478,   479,     0,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   487,   488,
     489,     0,     0,     0,     0,     0,     0,   490,     0,     0,
     491,     0,     0,     0,   492,   493,   494,   495,   496,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   502,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,  2650,     0,     0,   144,   145,     0,
       0,   146,  2651,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   167,
       0,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,     0,   194,     0,     0,   195,
       0,   196,     0,     0,   197,     0,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,   231,   232,   233,   234,   235,     0,     0,   236,   237,
       0,   238,   239,   240,     0,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,   245,     0,   246,   247,   248,
     249,     0,   250,     0,   251,     0,     0,     0,   252,   253,
       0,   254,     0,     0,   255,   256,     0,     0,     0,   257,
     258,   259,   260,     0,     0,   261,   262,   263,     0,   264,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,     0,   454,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,   465,     0,     0,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,     0,     0,     0,   474,   475,
     476,   477,     0,   478,   479,     0,   480,   481,     0,   482,
     483,     0,     0,   484,     0,     0,   485,     0,   486,     0,
     487,   488,   489,     0,     0,     0,     0,     0,     0,   490,
       0,     0,   491,     0,     0,     0,   492,   493,   494,   495,
     496,     0,     0,     0,     0,     0,     0,   497,   498,     0,
     499,   500,   501,     0,     0,   502,     0,     0,     0,     0,
       0,  2860,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,   557,   144,   145,     0,     0,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,     0,   194,     0,     0,   195,     0,   196,
       0,     0,   197,     0,     0,     0,   198,   199,   200,     0,
       0,   201,     0,     0,     0,     0,   202,   203,     0,     0,
       0,     0,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,     0,   264,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,   465,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,     0,     0,   474,   475,   476,   477,
       0,   478,   479,     0,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   487,   488,
     489,     0,     0,     0,     0,     0,     0,   490,     0,     0,
     491,     0,     0,     0,   492,   493,   494,   495,   496,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   502,     0,     0,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,  4585,   795,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,     0,   502,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,   145,     0,     0,   146,   557,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,   164,
       0,   165,   166,   167,     0,   168,     0,   169,   170,   171,
     172,   173,     0,   174,   175,     0,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,     0,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,     0,
     194,     0,     0,   195,     0,   196,     0,     0,   197,     0,
       0,     0,   198,   199,   200,     0,     0,   201,     0,     0,
       0,     0,   202,   203,     0,     0,     0,     0,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,     0,   231,   232,   233,   626,   235,
       0,     0,   236,   237,     0,   238,   239,   240,     0,     0,
     241,     0,     0,     0,   627,   243,     0,   244,     0,   245,
       0,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,     0,   252,   253,     0,   254,     0,     0,   255,   256,
       0,     0,     0,   257,   258,   259,   260,     0,     0,   261,
     262,   263,     0,   264,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   628,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
       0,   454,   455,   456,   457,   458,     0,     0,   459,   460,
       0,   461,   462,   463,   464,   465,     0,     0,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,     0,
       0,     0,   474,   475,   476,   477,     0,   478,   479,     0,
     480,   481,     0,   482,   483,     0,     0,   484,     0,     0,
     485,     0,   486,     0,   487,   488,   489,     0,     0,     0,
       0,     0,     0,   490,     0,     0,   491,     0,     0,     0,
     492,   493,   494,   495,   496,     0,     0,     0,     0,     0,
       0,   497,   498,     0,   499,   500,   501,     0,     0,   502,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,     0,   146,   557,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,     0,   194,     0,     0,   195,     0,   196,     0,     0,
     197,     0,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,   231,   232,   233,
     234,   235,     0,     0,   236,   237,     0,   238,   239,   240,
       0,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,   245,     0,   246,   247,   248,   249,     0,   250,     0,
     251,     0,     0,     0,   252,   253,     0,   254,     0,     0,
     255,   256,     0,     0,     0,   257,   258,   259,   260,     0,
       0,   261,   262,   263,     0,   264,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,     0,   454,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,   465,     0,     0,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,     0,     0,     0,   474,   475,   476,   477,     0,   478,
     479,     0,   480,   481,     0,   482,   483,     0,     0,   484,
       0,     0,   485,     0,   486,     0,   487,   488,   489,     0,
       0,     0,     0,     0,     0,   490,     0,     0,   491,     0,
       0,     0,   492,   493,   494,   495,   496,     0,     0,     0,
       0,     0,     0,   497,   498,     0,   499,   500,   501,     0,
       0,   502,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,     0,   146,
     795,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,     0,   194,     0,     0,   195,     0,   196,
       0,     0,   197,     0,     0,     0,   198,   199,   200,     0,
       0,   201,     0,     0,     0,     0,   202,   203,     0,     0,
       0,     0,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,     0,   264,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,   465,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,     0,     0,   474,   475,   476,   477,
       0,   478,   479,     0,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   487,   488,
     489,     0,     0,     0,     0,     0,     0,   490,     0,     0,
     491,     0,     0,     0,   492,   493,   494,   495,   496,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   502,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,   146,  2651,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,   164,     0,   165,   166,   901,
     902,   168,     0,   169,   170,   171,   172,   173,     0,   174,
     175,     0,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,     0,   194,     0,     0,   195,
       0,   196,     0,     0,   197,     0,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,   903,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,   231,   232,   233,   234,   235,     0,     0,   236,   237,
       0,   238,   239,   240,     0,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,   245,     0,   246,   247,   248,
     249,     0,   904,     0,   251,     0,     0,     0,   252,   253,
       0,   254,     0,     0,   255,   256,     0,     0,     0,   257,
     258,   259,   260,     0,     0,   261,   262,   263,     0,   264,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   905,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   906,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   907,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   908,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,     0,   454,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,   465,     0,     0,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   909,   473,     0,     0,     0,   474,   475,
     476,   477,     0,   478,   479,     0,   480,   481,     0,   482,
     483,     0,     0,   484,     0,     0,   485,     0,   486,     0,
     487,   488,   489,     0,     0,     0,     0,     0,     0,   490,
       0,     0,   491,     0,     0,     0,   492,   493,   494,   495,
     496,     0,     0,     0,     0,     0,     0,   497,   498,     0,
     499,   500,   501,     0,     0,   502,     0,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,   145,     0,   910,   146,     0,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,   164,     0,
     165,   166,   167,     0,   168,     0,   169,   170,   171,   172,
     173,     0,   174,   175,     0,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,     0,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,     0,   194,
       0,     0,   195,     0,   196,     0,     0,   197,     0,     0,
       0,   198,   199,   200,     0,     0,   201,     0,     0,     0,
       0,   202,   203,     0,     0,     0,     0,   204,   205,     0,
     206,     0,     0,     0,   207,     0,   208,   209,   210,   211,
     212,     0,     0,     0,   213,     0,     0,   214,   215,   216,
       0,     0,     0,   217,     0,   218,   219,     0,   220,   221,
     222,     0,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,     0,   231,   232,   233,   234,   235,     0,
       0,   236,   237,     0,   238,   239,   240,     0,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,   245,     0,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
       0,   252,   253,     0,   254,     0,     0,   255,   256,     0,
       0,     0,   257,   258,   259,   260,     0,     0,   261,   262,
     263,     0,   264,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,   639,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     331,   332,     0,     0,   333,   334,   335,   336,     0,     0,
       0,   337,   338,     0,     0,     0,   339,     0,   340,   341,
     342,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,     0,
     454,   455,   456,   457,   458,     0,   134,   459,   460,     0,
     461,   462,   463,   464,   465,     0,     0,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,     0,     0,
       0,   474,   475,   476,   477,     0,   478,   479,     0,   480,
     481,     0,   482,   483,     0,     0,   484,     0,     0,   485,
       0,   486,     0,   487,   488,   489,     0,     0,     0,     0,
       0,     0,   490,     0,     0,   491,     0,     0,     0,   492,
     493,   494,   495,   496,     0,     0,     0,     0,     0,     0,
     497,   498,     0,   499,   500,   501,     0,     0,   502,     0,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   145,     0,  1400,   146,     0,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,   164,     0,   165,   166,   167,     0,   168,     0,   169,
     170,   171,   172,   173,     0,   174,   175,     0,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
       0,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,     0,   194,     0,     0,   195,     0,   196,     0,     0,
     197,     0,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,   231,   232,   233,
     234,   235,     0,     0,   236,   237,     0,   238,   239,   240,
       0,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,   245,     0,   246,   247,   248,   249,     0,   250,     0,
     251,     0,     0,     0,   252,   253,     0,   254,     0,     0,
     255,   256,     0,     0,     0,   257,   258,   259,   260,     0,
       0,   261,   262,   263,     0,   264,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,   639,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,     0,   454,   455,   456,   457,   458,     0,   134,
     459,   460,     0,   461,   462,   463,   464,   465,     0,     0,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,     0,     0,     0,   474,   475,   476,   477,     0,   478,
     479,     0,   480,   481,     0,   482,   483,     0,     0,   484,
       0,     0,   485,     0,   486,     0,   487,   488,   489,     0,
       0,     0,     0,     0,     0,   490,     0,     0,   491,     0,
       0,     0,   492,   493,   494,   495,   496,     0,     0,     0,
       0,     0,     0,   497,   498,     0,   499,   500,   501,     0,
       0,   502,     0,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   145,     0,  1741,
     146,     0,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,   164,     0,   165,   166,   901,   902,
     168,     0,   169,   170,   171,   172,   173,     0,   174,   175,
       0,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,   186,     0,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,     0,   194,     0,     0,   195,     0,
     196,     0,     0,   197,     0,     0,     0,   198,   199,   200,
       0,     0,   201,     0,     0,     0,     0,   202,   203,     0,
       0,     0,   903,   204,   205,     0,   206,     0,     0,     0,
     207,     0,   208,   209,   210,   211,   212,     0,     0,     0,
     213,     0,     0,   214,   215,   216,     0,     0,     0,   217,
       0,   218,   219,     0,   220,   221,   222,     0,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,     0,
     231,   232,   233,   234,   235,     0,     0,   236,   237,     0,
     238,   239,   240,     0,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,   245,     0,   246,   247,   248,   249,
       0,   904,     0,   251,     0,     0,     0,   252,   253,     0,
     254,     0,     0,   255,   256,     0,     0,     0,   257,   258,
     259,   260,     0,     0,   261,   262,   263,     0,   264,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   905,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   906,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   907,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   908,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,     0,     0,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,     0,   454,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
     465,     0,     0,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,     0,     0,     0,   474,   475,   476,
     477,     0,   478,   479,     0,   480,   481,     0,   482,   483,
       0,     0,   484,     0,     0,   485,     0,   486,     0,   487,
     488,   489,     0,     0,     0,     0,     0,     0,   490,     0,
       0,   491,     0,     0,     0,   492,   493,   494,   495,   496,
       0,     0,     0,     0,     0,     0,   497,   498,     0,   499,
     500,   501,     0,     0,   502,     0,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,   910,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,     0,   502,     0,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   145,     0,  3623,   146,     0,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
     164,     0,   165,   166,   167,     0,   168,     0,   169,   170,
     171,   172,   173,     0,   174,   175,     0,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,  1276,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
       0,   194,     0,     0,   195,     0,   196,     0,     0,   197,
       0,     0,     0,   198,   199,   200,     0,     0,   201,     0,
       0,     0,     0,   202,   203,     0,     0,     0,     0,   204,
     205,     0,   206,     0,     0,     0,   207,     0,   208,   209,
     210,   211,   212,     0,     0,     0,   213,     0,     0,   214,
     215,   216,     0,     0,     0,   217,     0,   218,   219,     0,
     220,   221,   222,     0,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,     0,   231,   232,   233,   234,
     235,     0,     0,   236,   237,     0,   238,   239,   240,     0,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
     245,     0,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,     0,   252,   253,     0,   254,     0,     0,   255,
     256,     0,     0,     0,   257,   258,   259,   260,     0,     0,
     261,   262,   263,     0,   264,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,     0,   350,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   371,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,     0,     0,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     397,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,     0,   454,   455,   456,   457,   458,     0,     0,   459,
     460,     0,   461,   462,   463,   464,   465,     0,     0,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
       0,     0,     0,   474,   475,   476,   477,     0,   478,   479,
       0,   480,   481,     0,   482,   483,     0,     0,   484,     0,
       0,   485,     0,   486,     0,   487,   488,   489,     0,     0,
       0,     0,     0,     0,   490,     0,     0,   491,     0,     0,
       0,   492,   493,   494,   495,   496,     0,     0,     0,     0,
       0,     0,   497,   498,     0,   499,   500,   501,     0,     0,
     502,     0,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,   145,     0,  1277,   146,
       0,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,   164,     0,   165,   166,   167,     0,   168,
       0,   169,   170,   171,   172,   173,     0,   174,   175,     0,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,     0,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,     0,   194,     0,     0,   195,     0,   196,
       0,     0,   197,     0,     0,     0,   198,   199,   200,     0,
       0,   201,     0,     0,     0,     0,   202,   203,     0,     0,
       0,     0,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,     0,   264,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,     0,   454,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,   465,
       0,     0,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,     0,     0,     0,   474,   475,   476,   477,
       0,   478,   479,     0,   480,   481,     0,   482,   483,     0,
       0,   484,     0,     0,   485,     0,   486,     0,   487,   488,
     489,     0,     0,     0,     0,     0,     0,   490,     0,     0,
     491,     0,     0,     0,   492,   493,   494,   495,   496,     0,
       0,     0,     0,     0,     0,   497,   498,     0,   499,   500,
     501,     0,     0,   502,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   145,     0,
       0,  1277,     0,   147,   148,   149,   150,   151,     0,     0,
    -366,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  4042,     0,   163,   164,     0,   165,   166,     0,
       0,     0,     0,   169,   170,   171,   172,  4043,     0,   174,
     175,     0,   176,   177,     0,   178,   179,     0,   181,     0,
     183,   184,   185,   186,     0,   187,   188,     0,   189,   190,
     191,     0,   193,     0,     0,     0,   194,     0,     0,   195,
       0,   196,     0,     0,   197,     0,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,     0,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,     0,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,     0,     0,
       0,   231,   232,   233,   234,   235,     0,     0,   236,   237,
    4044,   238,   239,   240,     0,     0,     0,     0,     0,     0,
       0,   243,     0,   244,     0,   245,     0,   246,   247,   248,
     249,     0,   250,     0,   251,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,   256,     0,     0,     0,   257,
     258,   259,   260,  4045,     0,   261,   262,   263,     0,   264,
       0,   265,     0,     0,     0,     0,   266,     0,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
    4046,     0,     0,   273,     0,     0,     0,   275,     0,     0,
     276,  4047,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,  -321,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,     0,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,  4048,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
       0,     0,     0,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,     0,     0,   387,
       0,   389,  -321,     0,   390,     0,     0,     0,   392,     0,
       0,   394,   395,   396,  4049,   397,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,   420,     0,   421,     0,     0,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,     0,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,     0,   454,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,   465,     0,     0,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,     0,     0,     0,     0,   475,
     476,   477,     0,   478,   479,     0,   480,   481,     0,     0,
       0,     0,     0,   484,     0,     0,   485,     0,     0,     0,
     487,   488,   489,     0,     0,     0,     0,     0,     0,   490,
       0,     0,   491,     0,     0,     0,   492,   493,   494,   495,
     496,     0,     0,  -321,     0,     0,     0,   497,     0,     0,
     499,     0,   501,     0,     0,   502,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,  4577,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,  2209,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,  2928,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,  3582,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,  3628,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,  2558,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,  2559,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,  2560,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,  2561,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,  1040,  1041,     0,
     337,   338,     0,     0,  2562,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,  4564,   585,  4565,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,  2563,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,  1389,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  1390,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
    1391,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,  1392,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,  1402,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  1403,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,  1952,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,  1953,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,   749,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,  1954,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,  1389,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  1390,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,   997,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,  1425,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   974,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,   975,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   976,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  2472,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,  1389,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   639,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,  2924,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,  4484,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,  4485,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,   585,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,  1076,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,   903,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,   903,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,  1929,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  2126,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  3016,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,  3024,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,  3048,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,  3118,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,   134,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,   146,     0,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,   167,     0,   168,     0,   169,   170,   171,   172,   173,
       0,   174,   175,     0,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,  1840,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,  1841,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
     474,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,   482,   483,     0,     0,   484,     0,     0,   485,     0,
     486,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
     498,     0,   499,   500,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
    -336,  -336,   217,     0,  -336,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
    -357,     0,   217,     0,  -357,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,  -357,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
    -354,     0,   217,     0,  -354,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,  -354,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,  4381,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,  -359,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,  4489,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,  4535,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,  -340,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,  -366,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  4042,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,  4043,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4044,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4045,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4046,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4047,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -321,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  4048,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -321,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  4049,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,  4384,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,  -321,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,   137,   502,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
     145,     0,     0,     0,     0,   147,   148,   149,   150,   151,
       0,     0,     0,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,     0,     0,   163,   164,     0,   165,
     166,     0,     0,     0,     0,   169,   170,   171,   172,     0,
       0,   174,   175,     0,   176,   177,     0,   178,   179,     0,
     181,     0,   183,   184,   185,   186,     0,   187,   188,     0,
     189,   190,   191,     0,   193,     0,     0,     0,   194,     0,
       0,   195,     0,   196,     0,     0,   197,     0,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,     0,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,     0,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
       0,   264,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,     0,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,     0,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,     0,   454,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,   465,     0,     0,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,     0,     0,     0,
       0,   475,   476,   477,     0,   478,   479,     0,   480,   481,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   487,   488,   489,     0,     0,     0,     0,     0,
       0,   490,     0,     0,   491,     0,     0,     0,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,   497,
       0,     0,   499,     0,   501,     0,     0,   502
};

static const yytype_int16 yycheck[] =
{
       6,   672,   673,   990,   598,   619,  1338,   597,   598,    20,
     906,   907,   122,    19,   885,  1338,   663,    23,  1174,    30,
     916,   991,  1174,   597,    11,    36,    32,   538,  1144,  1903,
    1605,  1538,  1276,    39,  1080,  1738,    42,  1428,  1325,  1121,
      46,  1074,  1075,  1905,  1859,   732,   635,    53,   951,     6,
    1536,  1408,    23,   925,  2089,  2612,  1527,  2160,  1197,   648,
    1527,  1111,  2225,  1276,  2540,  1204,  2396,  2230,  2440,  3376,
    2115,   692,  2499,  2500,  2905,  1527,   995,  2528,   995,   951,
    2052,  2963,  1331,  1811,  2321,  1517,  1892,  2052,    94,  1205,
    1206,  1440,  2729,  1209,  1210,  1211,  1212,  2056,  1214,  1215,
    1216,  1217,  1218,  1219,  1220,  1221,  1934,   659,   660,  1458,
     116,  1983,   118,  2185,  2185,   121,   122,   123,  2058,  3381,
    1469,  1470,  2062,    94,  2521,  3110,   677,  2613,  2458,     4,
    3608,  2359,  2529,  2073,  2507,  2607,  1507,    34,  2585,    16,
      17,    74,  3439,  3440,    61,  2085,  3443,   971,    17,    16,
      17,    21,     9,   800,  1586,  3165,  2007,  2008,  2763,  3248,
      22,   118,  2757,  1243,   121,  3462,  2761,   788,   789,   790,
      20,  3468,    29,  2024,    47,    58,  2035,    20,    35,    30,
     801,  1517,    17,  3656,  1901,  1521,   953,  1523,    25,  2044,
    2041,  2042,    20,    78,    51,  2026,    51,  2315,    60,    61,
     129,  3399,  2527,  2821,    21,    71,  2057,   149,   190,  2060,
    2061,    82,  2063,  2185,   175,  2066,  2067,  2569,  2570,  2070,
    2185,   190,    78,  3012,  2075,    25,   162,    30,    68,  2080,
    2081,  2082,  2083,  2084,   149,  2573,   188,  2088,    32,  2090,
      46,   830,   143,  2859,   152,  2096,  2097,  2098,  2099,    79,
    1586,  2102,   284,  2104,   267,   163,  3666,   129,  3104,    56,
     130,   124,    72,    72,   372,  1517,    16,    17,  1998,  1521,
      20,  1523,   196,   225,   378,   132,   865,   318,  2760,   360,
     324,  2140,   920,  2142,  2143,   923,   155,   363,  2174,  2148,
    2149,   159,   175,   367,  2910,   933,   179,  3604,  2157,  2158,
     421,   368,   225,  2162,  4207,    84,   270,   190,  2208,   159,
     948,   949,   950,   130,   952,   390,   159,   124,  2169,  2170,
    2171,  2172,   124,   108,   252,   426,   393,   155,    16,    17,
     393,   159,    20,   110,  1586,   263,   371,   127,    16,    17,
    3713,  4019,    16,    17,    78,  2697,  2698,    10,   155,    35,
     359,   292,   293,   155,   164,    12,    12,   157,    16,    17,
     391,    22,    35,   438,   268,   126,    16,    17,   149,   254,
    2743,   175,  2745,    34,    71,    16,    17,    16,    17,   491,
     126,  1052,  1053,  1054,   268,    16,    17,    48,   124,   811,
     166,   279,    40,   516,   605,   232,   229,  3694,   254,    60,
      61,  4081,   592,     8,   210,   124,  3703,    16,    17,   519,
     193,   443,    63,   647,   357,   554,   136,   364,    69,   155,
     196,   655,   255,  1110,    16,    17,  2705,   436,   147,  3726,
     553,   151,   232,    22,  3731,   285,    64,  1124,   649,   322,
    2731,    36,    16,    17,   655,    34,    16,    17,   529,   243,
    2309,   561,   229,   341,   229,  2898,   417,   879,   648,    48,
      36,   404,   574,    22,   628,   184,    16,    17,   376,  1021,
    3948,    60,    61,   267,   378,    34,   124,   314,    66,    16,
      17,   242,   139,   139,   408,   268,   587,   554,  4166,    48,
    1386,   554,   433,   434,   378,   285,   242,  2588,   462,   362,
     377,    60,    61,   380,   625,  1401,   285,   188,   552,  3771,
     129,  1481,    51,   519,   314,   521,   159,  3824,   465,  2970,
     254,   444,    16,    17,    16,    17,    16,    17,    16,    17,
     458,  4211,    16,    17,   417,   193,   542,   618,   189,  3912,
     546,   585,  2915,  2916,   225,   649,  2591,   655,  4451,  1906,
    2595,   557,   193,  1200,  2454,   561,  3032,   563,   129,  3405,
     360,   155,   359,  3010,  2609,  2610,  2073,  3014,  3015,   379,
     379,   421,   648,   579,   649,   649,  2621,   265,   183,    25,
     481,   421,  1093,  1094,    16,    17,   456,  1208,  1507,  1276,
    1507,   597,   624,  2628,  2026,   630,   451,   468,  3387,   605,
    3862,  2573,    25,  1114,  1225,  2650,   647,   159,  2573,    59,
     623,   159,  1123,   417,   482,  4025,   647,   236,   213,   625,
    2052,  1493,   250,   547,  1135,  1136,  1137,   377,  1977,   635,
     380,   637,  1143,  2705,  2705,   523,   430,   213,  3648,   456,
     190,   159,   648,   649,   650,   553,  2971,  2972,  1892,   655,
    1766,   657,   604,   659,   660,  2107,   625,   523,   664,   665,
     466,  1777,  3000,   669,  1780,   236,  1585,   649,  1585,   598,
    3286,  3287,  3288,   679,   268,  2534,   682,   683,   649,  1892,
     622,   687,  2727,   619,   655,    16,    17,  3569,   649,   377,
    2026,  3309,   380,   650,   551,   612,   581,  1249,  4171,   377,
    1467,  3963,   380,   377,  2822,   144,   380,   622,  2044,  1789,
    1760,  3327,  3328,  3329,   647,   566,  2571,   827,   575,   377,
     605,  2552,   380,   566,  4202,   582,   732,   377,   590,   529,
     380,   566,  3994,  2705,   157,  2594,   377,  2596,   377,   380,
    2705,   380,  2174,  2460,  2603,   408,   377,  1571,  3946,   380,
     647,  2602,   625,  2185,   584,   406,   625,   634,  2617,  3848,
    3378,    16,    17,   566,  2615,  2624,   649,   634,   377,   625,
     640,   380,    16,    17,  2026,   652,  1328,  2636,  2637,  2638,
     630,  3133,  3154,  2642,   653,   377,   232,   793,   380,   795,
    2520,  3164,  2044,  1345,   649,  1433,   906,  2168,  1436,   603,
     910,   911,   674,   377,  1442,  2664,   380,   377,  1397,   232,
     380,  3039,   649,  2699,   924,   821,   822,   823,   618,   825,
     826,   827,  3427,   829,   830,   653,   523,   377,  3423,   835,
     380,  3841,   617,  1471,  1472,   841,  4098,  4517,  2174,   482,
     377,   622,  2742,   380,  4322,   649,   653,   853,  1437,  2185,
     513,   653,  2703,  3458,  3459,  3134,   633,   307,   544,   865,
     866,   547,  3457,    63,   870,   822,  1417,  3158,   314,   826,
    3465,   544,   829,   444,   547,  3318,   524,  3472,  4175,   989,
    4177,  2696,   853,   377,   634,   377,   380,   377,   380,   377,
     380,   314,   380,   377,   900,   866,   380,    16,    17,   870,
     906,   549,   473,   491,   910,   911,   534,  3653,    16,    17,
     155,  3397,   451,   576,   360,  3366,  2402,   653,   924,  3370,
    3011,  1511,  2174,   604,    16,    17,   145,   672,   673,   590,
     482,   605,   580,  2185,   482,    11,  1525,   360,  3385,  3421,
    3422,  3413,   593,  3315,   232,   377,   634,  3429,   380,    43,
    3432,  3433,    16,    17,   617,   216,   634,  2532,  3943,   554,
     634,   649,   121,  4225,   482,   971,   416,  3449,  2842,  3366,
     648,   649,    74,  3370,   307,   649,   634,   834,   554,   598,
     225,  3463,   857,   989,   634,   991,  3468,  3469,  3470,  3471,
    3035,   649,  4254,   634,    12,   634,  1683,   175,  3614,   649,
    3330,   590,  3375,   634,   473,    86,    51,   648,  2882,   648,
     649,   203,   655,   155,  3857,  1021,  1912,   648,   649,    16,
      17,    64,   252,  4330,   210,   634,   615,   598,  3000,   623,
      24,   590,    16,    17,   473,  3000,    11,   119,    25,   648,
     649,   491,   634,  1594,    12,   454,   377,  3793,   102,   380,
     126,   371,   611,   612,   554,   193,   648,   649,   647,   653,
     634,  3931,  3134,  3134,   634,   285,  1072,   557,  1971,   255,
    1076,   525,   360,  2888,   648,   649,   647,  1187,   648,   649,
    2587,  2588,   274,   529,   634,  2957,   159,   435,   194,   121,
      16,    17,  2643,  3839,   122,    16,    17,   634,   648,  1971,
    2003,  1072,  2908,   655,  1110,  1076,   529,   655,  2499,  2500,
     707,  2939,   649,  1784,  1224,    16,    17,   190,  1124,   274,
    2552,   139,   377,   282,  3361,   380,   268,  2855,   396,  3088,
    3767,  2003,    52,   377,    16,    17,   380,   655,   220,  2255,
     634,  2573,   634,    63,   634,   121,   634,   647,   157,  3089,
     634,   140,    16,    17,   648,   649,   648,   649,  1779,  2508,
     138,   649,  3134,   382,  2210,   649,   514,  1277,  1174,  3134,
    2419,   139,   618,   167,   446,  2646,  4046,  4047,   647,  2646,
     196,  1187,   779,  1854,    16,    17,    16,    17,    41,  3640,
    3641,    16,    17,  2332,  2646,   618,   214,    16,    17,   444,
     467,   421,   634,  1792,   363,  1892,   361,   250,   647,   185,
     519,   234,   651,   241,  3029,   353,  2552,   649,  1224,  2551,
     243,   675,   452,  1229,  1334,   129,   649,   178,  1234,   429,
      12,    16,    17,    16,    17,  2571,   554,  2569,  2570,   417,
    1829,   529,  1794,  1249,   326,   232,   655,  4078,   330,  2168,
     282,  2168,   346,    16,    17,   337,  2338,  2339,   377,  4090,
    2963,   380,   523,  1234,   491,    16,    17,  2699,  4174,   377,
    1276,  1277,   380,  2705,  4156,  1020,   111,   249,   547,   114,
     133,  2331,    85,   389,  2440,   377,   478,  3322,   380,  1878,
    1879,  2341,  4046,  4047,  2410,  4602,    16,    17,    16,    17,
    2552,   104,   277,   634,   380,  1894,   282,  1313,   410,  1315,
     630,  1317,   355,   377,   359,  4158,   380,  4160,   649,  2571,
      16,    17,  1328,  4193,  4194,  1070,  1964,   314,  1334,   647,
     618,   363,   236,   415,   268,   416,    16,    17,  1976,  1345,
    1346,  1979,  1980,    16,    17,   323,  1317,   336,  3775,   523,
    3395,   360,  1926,   249,   274,    16,    17,   139,    12,   129,
     383,    16,    17,  2699,  4110,  2697,  2698,  3530,  1374,  2705,
      16,    17,  3417,    12,  2530,  1346,  1382,   649,  2530,   634,
     377,   225,  1388,   380,   490,  3244,  2872,   363,   554,   471,
     634,  1397,   408,   377,   649,   423,   380,  3769,    16,    17,
     997,  1407,  1408,  4149,  1514,   649,   451,   183,   653,   482,
     630,   362,  1418,  1419,  1420,  1421,  1422,  1423,  3233,  4289,
      16,    17,  1428,   346,   583,   603,    16,    17,  1434,  1435,
      21,  1437,    16,    17,  4304,  1441,   481,   121,   473,   613,
     124,   285,   544,  1318,   378,     0,   369,  2699,  4318,   421,
    1421,   377,  1423,  2705,   380,   665,   377,   190,  1464,   380,
     396,  1418,  1419,  1420,    78,  1422,   236,  2623,  3019,    16,
      17,  2623,   515,   575,    16,    17,   377,   155,  1435,   380,
     127,   623,   258,   846,  1441,   139,    16,    17,   654,   507,
     508,   534,   510,  1464,   512,   377,    16,    17,   380,   473,
     139,   185,  3053,   531,  3011,  4375,    16,    17,  1514,   473,
    3061,   653,   530,   377,  3065,   634,   380,  4387,  4388,  1525,
     529,  3997,  4428,  4429,  1530,   421,   634,  1533,  1534,   213,
     649,   547,    16,    17,    16,    17,   625,  1412,   620,   130,
     444,   649,   634,   157,   277,   377,   473,   377,   380,  2892,
     380,   583,   377,   403,   636,   380,   554,   649,   377,  1530,
     649,   380,   124,  1534,  4434,  1571,  3117,   214,  3000,   473,
     634,    16,    17,   417,  4444,   473,   138,   159,  3950,    16,
      17,   473,  3089,   359,  1590,   649,  1592,  1593,   631,  1595,
    1596,  2487,   377,  3833,   377,   380,    75,   380,   282,    16,
      17,   473,  1608,   473,  1610,    16,    17,   583,   489,   618,
     973,  4481,   647,  4483,   377,   825,   651,   380,   232,     8,
      34,  3861,  3785,  4493,   605,   648,   377,   578,  3729,   380,
     193,  3732,  3491,  4387,  4388,  1592,  1593,   634,   285,  2982,
    4510,    30,  4512,   594,  4514,  1520,   473,    61,   206,   647,
     634,  4521,   649,   642,   643,   644,   645,   377,   592,   377,
     380,  4531,   380,   159,  2908,   649,  3996,   648,   649,   269,
    3515,  3516,   272,   647,   444,  4545,  4546,  1683,  1684,   363,
     243,   377,   605,   647,   380,  1795,  3787,    16,    17,    75,
     547,  4561,  4562,  2980,   598,  2908,  4566,   377,  2744,  2838,
     380,   647,  3134,   473,   377,    16,    17,   380,   634,   655,
     189,    19,   206,   634,  2335,   596,   377,    16,    17,   380,
     647,  2232,   377,   649,   559,   380,    34,   562,   649,    16,
      17,   377,   243,   634,   380,  2246,   107,  2893,  1744,  4335,
     354,  2893,  4338,   647,    16,    17,   360,    78,   649,   647,
     229,    59,   634,   264,   544,   647,   637,   547,   252,   377,
    3239,   323,   380,   121,  3243,    16,    17,   649,  2279,   210,
     634,  3874,  3875,    16,    17,   647,   255,   647,    16,    17,
    1786,   377,   609,   610,   380,   649,  1792,   377,  1794,  1795,
     380,  3262,  4349,   377,  3261,   166,   380,   121,  3134,  1909,
    1806,  3133,   634,   189,   634,  1811,    16,    17,  3294,   634,
    1816,   601,   193,   427,   255,   634,  3661,   649,   418,   649,
     647,    16,    17,  1829,   649,   196,   157,   185,   598,   648,
     377,   521,   166,   380,   166,   377,   544,  2348,   380,   547,
    3655,  1847,   121,   229,  3879,  1851,  2467,   377,   126,   634,
     380,   634,    16,    17,   157,    25,   546,   377,  4454,   240,
     380,   185,   196,   648,    31,   648,  3569,   377,    58,   255,
     380,   634,  1878,  1879,  1880,  1881,  1847,   647,    16,    17,
    1851,   655,  3134,   634,   378,   648,  1892,  4216,  1894,    16,
      17,   566,  4221,   377,  4223,   377,   380,   648,   380,   583,
    1906,   232,  2492,  1909,    16,    17,   185,    17,    78,  1880,
    1881,   390,   224,    80,   634,   529,   634,   473,  2492,    17,
    1926,   193,   206,   612,   282,   481,   615,   406,   648,   232,
     648,   408,   377,   581,  1940,   380,    16,    17,   634,  2380,
     377,  2382,   221,   380,   223,    16,    17,    16,    17,    16,
      17,  3810,   648,   234,   634,   356,   357,   605,   282,   547,
     377,   634,   243,   380,   121,   229,   377,    12,   648,   380,
      16,    17,  1978,   634,   588,   648,     6,    16,    17,   634,
     551,    16,    17,   193,  1990,   175,   153,   648,   634,   179,
    1865,  1997,  3349,   648,    69,   461,    99,   378,   193,   307,
     190,  1876,   648,   282,   618,   363,   176,  1978,  2449,  2450,
    2451,  2601,   421,   229,    16,    17,   634,   593,    16,    17,
     406,  3866,  3867,   354,  3869,  3870,  1997,    57,   185,   360,
     648,   524,   525,   442,  2905,   649,   513,   408,   634,   363,
     626,   627,   140,  2946,   634,    17,   648,   649,   377,  2952,
     634,   380,   648,   609,   610,  2495,   213,   360,   648,   224,
    1935,   641,   232,   649,   648,   206,   377,   476,   648,   380,
     648,   649,   605,  2183,  2946,  3362,   641,  2187,   377,   545,
    2952,   380,  2978,   648,   363,   551,  3168,   634,   648,   649,
     377,   647,   634,   380,   139,  2101,   427,   648,   649,   576,
      39,   648,   383,   229,   634,   377,   648,    46,   380,  2115,
    3192,  3193,   134,   143,   634,  2225,   649,   221,   648,   223,
    2230,    47,   655,   372,   634,   282,   377,    34,   648,   380,
     233,   240,   322,  3215,   377,   601,  2011,   380,   648,   377,
     617,   190,   380,   190,   314,  2020,  2021,  1007,  1008,   252,
     634,   617,   634,  2593,    61,   610,  2031,  2032,  2033,  2034,
     263,  2036,  2037,  3319,   648,   193,   648,   377,   140,   214,
     380,    16,    17,  2844,   648,   649,   547,  2183,   285,  2619,
    2620,  2187,   377,  2189,   354,   380,  2192,  1047,   481,   634,
     360,  4053,   648,  2199,  2200,  2201,  2202,   634,   529,  2205,
     648,   649,   653,   648,   111,   576,   363,   114,    60,    61,
     159,   648,   107,   377,  2324,   122,   380,   634,  3374,  2225,
      72,  2908,  3374,   634,  2230,   583,   529,   417,  2199,  2200,
    2201,   648,   648,   649,   655,  2192,   403,   648,   336,   377,
     599,  4092,   380,   346,  2354,   374,   617,   513,   648,   649,
     377,  3407,   647,   380,  4128,  3407,   189,   588,   425,   583,
     745,  4120,  4121,  4122,  4123,   377,  2141,     6,   380,  2144,
    2145,   444,  2147,   648,   649,  2150,  2151,  2152,  2153,  2154,
    2155,  2156,   767,    11,  2159,  4136,  2161,   618,  4139,  4140,
    4141,  4142,   459,   648,   649,   780,   781,   377,    60,    61,
     380,  2890,   648,   649,   583,   634,   377,   647,   377,   380,
     377,   380,   647,   380,  4129,   618,  2954,   647,  2324,   648,
     215,   140,  2833,   634,   157,   647,  1830,   357,   647,  1833,
     647,   377,  1836,   647,   380,   634,   649,   648,   377,   648,
     649,   380,   377,  2349,   170,   380,   649,   634,  2354,   648,
     647,   518,   648,   649,   554,   458,  4215,  3390,  3391,   529,
     655,   648,   634,   369,   336,    25,   605,  2373,   496,  1086,
    1087,  1088,   647,  2379,  2380,   377,  2382,   647,   380,   377,
     647,  1098,   380,   634,  3775,   647,   484,   485,   648,   649,
     420,   634,   422,  4244,  4245,  3477,   634,   648,   225,   232,
     647,    78,  4253,  2409,    49,   648,   647,   204,  2379,  2380,
     648,  2382,  1129,   647,   178,  1132,  3312,   647,    78,   648,
     649,  3665,    78,   647,   634,   647,   583,   530,   647,  2539,
    2540,   648,   649,  4248,  2440,   647,  1153,  1154,  2444,   634,
    1157,   348,   647,  2449,  2450,  2451,   647,  3603,   618,   648,
     649,  3603,  4194,  4156,   110,  2461,   647,  2463,  1175,  1176,
     648,   649,   507,   508,   509,   510,   511,   512,   647,  3713,
     634,  3517,    36,    25,   648,   649,   648,   649,  2449,  2450,
    2451,    12,   648,   649,   648,   530,  2492,   647,   557,   384,
      20,   149,   150,  2499,  2500,   647,   634,   157,   393,   648,
     649,   157,  2612,  4010,  4011,   400,    29,   634,   648,   649,
     648,    42,   484,   485,   311,   312,   176,   336,    29,   316,
     317,   648,   634,   647,  2530,   647,    78,   360,  3429,   648,
     649,  3432,  3433,  2539,  2540,   279,   648,   648,   649,   647,
     638,   639,   640,   641,   642,   643,   644,   645,  3449,   652,
     114,   647,  4127,   647,   634,   232,   647,   121,   648,   649,
     648,   649,    93,   634,   647,   634,    97,   634,   648,    99,
    2581,  3541,   232,   229,  2580,   613,   614,   648,   616,  2585,
     618,  2592,   489,   647,  2590,  2591,  2461,  2598,   634,  2595,
     647,  2597,   356,   357,   647,   634,  2583,    11,   362,   634,
     495,  2607,   648,  2609,  2610,   157,  2612,  2613,    30,   648,
      69,  2622,  2618,   648,   178,  2621,  2627,  2623,   647,  3956,
    3957,   185,  2633,  2634,   176,   155,  2632,   648,   649,   159,
     648,   649,   634,  4375,   647,   121,   634,  2643,   124,   647,
     121,   648,   649,   124,  2650,  2651,   648,   647,   107,   213,
     648,   648,   649,   647,   314,   562,  2662,   313,   188,   647,
     190,  2632,   648,   649,   648,   649,   638,   639,   640,   641,
     642,   643,   644,   645,   647,   331,   206,   354,   648,   649,
     232,   211,   647,   360,   647,   121,   648,   649,   124,   596,
     140,   279,  3203,   107,   354,   225,   529,   121,   354,   185,
     360,    63,   647,   233,   185,   647,   601,    69,    49,   140,
     240,   647,   126,    75,   648,   649,   247,   647,   282,   647,
    2726,  2727,   252,   647,  2599,  2600,    88,   213,    63,  4603,
     648,   649,   213,   263,    69,   647,   195,   647,   268,  4481,
      75,  4483,   648,   649,  3255,    26,    27,   277,   647,   185,
     427,  2626,   649,    88,   647,  2726,   648,   649,  3348,   648,
     649,   185,   314,   648,   649,  4102,   648,   649,  4510,  4106,
     229,   648,   649,   647,  3348,   648,   649,   213,   647,    60,
      61,    62,   196,   347,   647,   618,  3811,  3812,   647,   213,
     647,    72,   323,   243,   358,   467,   282,    78,   362,   363,
     647,   282,   354,  4545,  4546,    86,  3332,  3333,   360,  1161,
    1162,   225,  3584,  3585,   578,   647,   346,  3821,  3822,   278,
    2695,   640,   641,   642,   643,   644,   645,   189,  3499,   110,
     594,  4168,  4169,   195,   647,   647,   647,   647,   647,   369,
     647,   647,   647,   124,   647,   592,   282,   128,   378,  2855,
     642,   481,   529,  2859,   189,   386,   655,   655,   282,   165,
     195,    26,    27,   647,   278,  2871,   268,   229,   190,   529,
     523,  3987,   165,   529,   544,   523,   157,   363,   408,    32,
     279,   156,   363,  2889,  2890,    87,   336,  2893,   649,   545,
     121,   159,   160,   255,   229,    60,    61,    62,  1615,   649,
    2871,   649,  2908,   370,  2910,   336,   159,    72,   540,   155,
     648,   588,   124,    78,  4246,  4247,   110,   654,  2924,    78,
     255,    86,  3032,  4246,  4247,  3895,     6,   363,   458,   197,
     183,  3901,   647,    92,   109,     4,   649,  3527,   393,   363,
     208,   618,   540,   541,   197,   110,   544,   545,   229,   617,
     548,   481,   550,   472,   185,   208,   237,   243,   618,   124,
     649,   390,    56,   128,   436,   170,   110,   498,  1685,   649,
    4126,   222,  1689,   254,  4126,   649,   655,   529,    36,    72,
     248,    12,   213,   622,   648,   648,   267,   140,   139,   649,
     554,   259,   157,    78,   408,   559,  1713,     9,   562,   649,
     530,   655,   648,   655,  3010,   258,   259,    92,  3014,  3015,
     541,   648,   648,  3019,   578,   267,   647,   655,   286,   583,
     479,   649,   586,   157,   649,   654,  3032,    49,   390,  3035,
     140,   279,   313,   286,   484,   485,   279,   279,   279,   279,
     499,   140,   279,   649,   406,   649,   159,  3053,   133,  2924,
     331,   282,   407,   484,   485,  3061,   114,   461,   375,  3065,
     544,   369,   592,   121,   229,   479,   618,   369,   649,   649,
     274,   406,   237,   391,   604,   605,   640,   641,   502,   649,
    2955,  2956,   350,  2958,   566,   390,   545,   649,   547,   254,
     243,  3097,   551,   623,  3100,   625,   566,   583,   257,  3105,
     353,    12,   583,   649,   385,  3111,   159,   369,   369,  3115,
     649,  3117,   393,    72,   267,  3688,  3689,   649,   648,   649,
     178,   243,   652,   653,   642,   246,  3132,   185,  3701,  3100,
     542,   545,   363,   547,   593,  3708,   180,   499,   190,  3145,
     649,   597,   601,   494,   243,   394,  3152,   583,   313,   292,
     293,   135,   405,   173,  3111,   213,  3827,  3163,  3033,   583,
    3733,   369,   649,  3736,   499,   648,   331,  3042,   159,   649,
     159,   159,   257,  4329,   159,   334,   159,  4329,   159,    12,
      13,  3152,   463,   336,   159,   159,    26,   601,   638,   639,
     640,   641,   642,   643,   644,   645,   159,   159,   159,   159,
     359,   159,   159,   356,   357,   159,  4176,  4078,   639,   640,
     641,   642,   643,   644,   645,   159,   159,   159,   538,  4090,
     385,   159,   159,   159,   282,  3335,   336,   159,   393,    69,
     159,   593,    72,   159,   832,   599,    76,   336,    78,   520,
     521,   522,   649,  3249,   629,   604,   566,   196,   529,   334,
     369,  3257,  3842,   369,   369,   649,   648,   648,   593,   193,
     419,   648,  3137,   642,   545,    98,   648,   648,   549,   193,
     648,   356,   357,   648,   359,   648,  3282,   430,   649,  3285,
    3286,  3287,  3288,   641,   124,   648,   647,   482,  4404,   347,
     433,   434,   648,   592,  3300,   648,   129,   649,   463,   648,
     648,   647,   649,   648,   362,   363,   648,   554,   648,   647,
     143,   592,   645,  3319,  3320,   647,   554,  3323,   648,   554,
     649,  3327,  3328,  3329,   544,   623,   647,   231,   647,  3335,
     536,   484,   485,   166,   419,  3341,   169,    11,   647,  4235,
     107,   655,  3348,  3349,   497,   649,   647,   647,   265,   182,
     193,   648,   583,   649,   513,   520,   521,   522,   649,   416,
     655,   504,   505,   506,   529,   655,   647,   655,  3374,   601,
     193,   204,   692,   481,   484,   485,   649,   697,   649,  3385,
     545,  4497,  3257,   190,   549,   484,   485,    47,   344,  3395,
     513,  3397,   393,   513,   472,   513,   229,  3991,    75,   166,
     390,  3407,   513,   236,   513,   566,   135,  3413,   728,  3415,
     390,  3417,   390,   545,   253,   255,   253,   390,   545,  4575,
    3530,    99,   135,  4575,   744,   390,    47,   592,   513,   196,
     439,   647,   647,  4589,   278,   390,   647,  4589,  4594,   392,
     390,   605,  4594,  4599,   277,  4415,  4416,  4599,  4418,   390,
     390,   648,   655,   153,   239,   648,   239,   655,  4072,   648,
     648,   648,   229,   648,   648,   648,   648,   159,   788,   789,
     790,   791,   649,   649,   566,   649,   630,   554,   274,    47,
      99,   801,  3357,  3489,   649,   638,   639,   640,   641,   642,
     643,   644,   645,   159,   566,  4465,   554,  4467,  4468,   647,
     647,   559,   647,   159,   562,   647,   204,   193,  3514,  3515,
    3516,   278,    99,  3623,   240,   554,   356,   357,   193,   554,
     578,   249,   362,   421,  3530,   583,    13,   363,   586,   369,
     640,   641,   642,   643,   644,   645,    34,   649,  4209,   638,
     639,   640,   641,   642,   643,   644,   645,   159,   159,   649,
    4144,   159,   393,   478,   381,   233,   252,   252,   327,   110,
    4207,    59,   110,   173,   255,   255,   406,   655,   566,    67,
    4557,   647,  4542,   647,   252,   374,   409,    81,   206,    83,
     413,    20,   640,   641,   554,   263,   454,   647,   390,   655,
     241,   642,  3598,   647,   241,   566,   429,  3603,   647,   647,
    3710,   648,   648,   648,   437,   648,   647,  3482,  3614,   649,
     648,    98,   445,   649,   233,   648,   648,  3623,   655,   648,
     124,   655,   647,   140,   369,   655,   225,   566,   649,   648,
    3505,   566,   269,   252,   132,   390,   403,   477,   649,   655,
     473,   408,   129,   147,   263,   648,   233,   193,   375,   193,
     193,   598,   243,   486,   487,  3661,   143,   421,   159,   157,
     125,  3672,   648,   161,  3670,   252,   648,   252,   346,   252,
     369,   647,   649,  3679,   255,  3785,   263,   255,   647,   166,
     184,   649,   169,   649,   648,   404,    55,   369,   369,   529,
      78,   369,   625,    20,   473,   182,    65,   649,   649,  3670,
     198,  4597,   648,   496,  3710,   369,   539,  1027,    77,   378,
     369,   363,   479,    47,   475,   625,   647,   204,   216,   647,
      89,    90,    91,   265,   456,   648,   647,   346,   647,    11,
     648,  3737,   230,   648,  3844,   648,   105,   277,  3744,   642,
     146,  4331,   229,   576,   649,   421,   261,   648,   648,   236,
     369,   193,   206,   593,   159,   395,  3762,  3632,   483,   346,
     252,   252,  1082,  1083,   649,   598,   647,   600,   124,  3775,
     124,  1091,  1092,  1093,  1094,  1095,  1096,  1097,   545,  3785,
     458,   279,   547,   647,   551,  1105,  1106,   402,  1108,  1109,
     277,   647,   655,  1113,  1114,    82,   142,  1117,  1118,  1119,
    1120,   648,  1122,  1123,  4451,   468,   491,   496,    20,   576,
    1130,  1131,   268,  1133,  1134,  1135,  1136,  1137,   648,   336,
    1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  1149,
    1150,   649,  1152,   648,   601,  1155,  1156,  3712,  3844,   458,
    1160,    34,   648,   648,  1164,  1165,  1166,   648,   648,    34,
     617,  3857,   530,   648,   648,   333,   648,  1177,  1178,  1179,
    3866,  3867,   648,  3869,  3870,  4459,  1186,   648,   257,   416,
     648,   458,   649,  1193,  1194,  1195,  3751,  1197,   174,   277,
     204,   240,   648,   655,  1204,  1205,  1206,  3997,  1208,  1209,
    1210,  1211,  1212,   647,  1214,  1215,  1216,  1217,  1218,  1219,
    1220,  1221,   649,    47,  4551,  1225,  1226,   211,   649,   407,
     333,   530,   159,   647,   647,   310,   647,   605,   416,   598,
     124,   605,   409,   647,   428,   647,   255,   648,   615,  4600,
    4577,   647,   615,   431,   255,  3941,  3942,  4289,   647,    34,
     362,   648,   429,   530,    20,   363,   649,  3953,   363,   333,
     437,   449,  4304,   647,     6,   172,   325,   625,   445,    11,
     255,    13,   375,    15,   609,   547,  4318,   484,   485,   605,
     605,  3942,  3847,   342,    26,    27,   648,   647,   240,   369,
    3986,   358,   649,  3989,   610,   517,   473,   625,   454,   363,
     648,  3997,   649,   648,   492,   554,   554,   554,   598,   486,
     487,   535,   154,   647,   647,    57,   647,    31,   622,   648,
      62,    63,   190,   388,   656,  3986,   648,   648,    70,    55,
     375,   556,  4028,    99,   135,   523,    78,   135,   157,    65,
     647,    74,   408,   190,    86,   429,   622,  4043,   193,    31,
      63,    77,  4048,    95,   648,    16,    17,   375,    63,    14,
     548,   649,   539,    89,    90,    91,   648,   647,   110,   536,
     558,   270,  1382,   567,   568,   569,   570,   571,   572,   105,
       5,   369,   124,   240,   153,  1395,   128,   369,   653,   155,
     133,   375,  4434,   159,   136,   137,   375,   142,    47,   576,
      47,   143,  4444,  1413,   647,   152,    47,    47,    47,   151,
     469,   598,   647,   155,   602,   157,   647,   129,   622,    34,
     224,   598,   153,   600,   190,   284,   168,   653,   656,   123,
    4126,   638,   639,   640,   641,   642,   643,   644,   645,   148,
     206,   647,    47,    47,    59,   211,   188,    47,   557,  4249,
      53,  4493,    67,   142,   115,   116,   117,   118,   119,   464,
     653,   462,  4158,   649,  4160,   363,   153,   233,   648,   209,
    4512,   557,  4514,   532,   240,   649,   649,   653,   222,  4521,
     649,    53,   648,   648,   153,   227,   252,   229,   190,  4531,
    4186,   550,   190,   190,    47,   237,   557,   263,  2144,  2145,
     443,  2147,   268,   624,  2150,  2151,  2152,  2153,  2154,  2155,
    2156,   277,   254,  2159,   124,  2161,   647,   132,   225,  4561,
    4562,   192,   363,   481,  4566,   649,  4091,  2361,  3491,  2163,
    2568,  3492,   673,  4083,  3760,   277,  4210,  4394,  1004,  4395,
    3758,  3762,   157,  3940,  4240,  4577,   161,  4539,    46,  4349,
    1891,   599,  1816,  4249,  2855,  4431,   217,   218,   219,   220,
    4547,  3931,  3931,  4282,  3931,  3931,  3931,  4431,  4388,  3931,
    3931,   313,  3931,  3931,  3931,  3931,  3931,  3931,  4308,  4307,
     346,  1045,  2114,   198,  2884,  3059,  3597,  1527,  1523,   331,
    2889,  3300,  4240,   335,  3987,  4333,  3600,  3949,  4497,   325,
    4412,   216,  4144,   369,  4459,   529,  1585,  3508,  3138,  2107,
    4410,  1621,   378,  1331,  2727,   230,   342,  3417,  2653,  3395,
    3440,  2115,  3440,  3473,  3893,  3671,  3720,    12,    13,  4331,
    3710,   373,  2811,  4329,  2539,  3240,   378,  3243,  3235,  4165,
      11,   534,   408,   385,   533,    11,  4168,  4094,   390,  1599,
    4169,   393,  4106,  4349,  4102,  3953,  2197,  3901,  2114,  1478,
     602,  3676,  2646,  2435,   279,   326,  3396,   328,   329,   330,
    1474,  1534,  1581,  1880,  2871,  2402,   337,  3295,  4243,   620,
    2317,  2452,   424,   897,  1900,  2844,  2231,  3257,  1124,  3364,
    2531,  2316,   458,  4163,  4013,  3489,   438,   439,   440,   441,
    4426,  2342,  1098,  4427,  3407,  1493,  3858,  4528,  2457,  1719,
    1720,  1721,  3844,    98,  4410,   481,   377,  2202,  1317,   380,
    1235,   463,  2397,   990,  1734,  2439,   990,   453,  3603,  1346,
    4426,  4427,  3374,  3314,  3313,   990,  4329,   609,   990,  1608,
    4436,   688,  1972,   469,   129,   598,  1973,  4443,  1455,  1426,
    1760,  1353,  3415,  3298,   415,  1805,  1766,  4356,   143,  1769,
    4495,  1771,  4524,  4594,   530,  4422,  4599,  1777,  3319,  1779,
    1780,  3713,  1382,  2490,  3348,  4340,  4341,   597,   520,   521,
     522,   166,  1741,   597,   169,  4585,  1929,   529,  2483,  2482,
    2476,  1851,   407,   882,  1895,  1369,  4118,   182,  1838,  1590,
    3282,   416,   591,   545,  4124,   525,   532,   549,   884,   470,
     471,  4073,   673,  3746,   525,  4511,   431,   673,   673,   204,
    4516,    -1,    -1,    -1,   550,    -1,   592,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   449,    -1,    -1,   579,    -1,   605,
      -1,    -1,    -1,    -1,   229,    -1,    -1,    -1,    -1,    -1,
     592,   236,    -1,    -1,  1864,  4551,    -1,   623,    -1,   625,
      -1,    -1,    -1,    -1,    -1,  1875,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,  4575,
      -1,  4577,   648,   649,    -1,    -1,   652,   653,    -1,  4585,
      -1,    -1,   277,  4589,    -1,    -1,    -1,  1907,  4594,    -1,
      -1,    -1,    -1,  4599,    -1,    -1,    -1,    -1,   523,    -1,
      -1,   653,    -1,    -1,    -1,    -1,    13,  1927,    15,    26,
      27,    -1,    -1,    -1,  1934,    -1,    -1,    -1,    -1,   544,
      -1,    -1,   547,   548,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,   558,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    50,    -1,    62,    -1,    -1,    -1,   620,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    78,    -1,   634,   635,   636,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    80,    -1,    -1,    -1,   602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     566,    98,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,   128,    -1,   120,   409,    -1,    -1,    -1,   413,    -1,
      -1,    -1,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   429,   142,   143,    -1,    -1,    -1,
     157,    -1,   437,    -1,    -1,    -1,    -1,    -1,   155,    -1,
     445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,
     187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   486,   487,    -1,    -1,   202,    -1,   204,    -1,    -1,
      -1,    -1,   209,    -1,    -1,   212,    -1,    -1,    -1,    -1,
     226,    -1,   229,    -1,    -1,    -1,    -1,    -1,  2138,    -1,
     237,   697,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,
      -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,    -1,   256,
      -1,    -1,   728,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,   744,    -1,
     277,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   576,   298,   299,   300,   301,   302,   303,   304,   305,
     306,  2211,   308,   309,    -1,  2215,   313,    -1,    -1,    -1,
    2220,  2221,    -1,   598,    -1,   600,    -1,    -1,    -1,  2229,
      -1,    -1,  2232,    -1,   331,   791,    -1,    -1,    -1,    -1,
      -1,    -1,  2242,  2243,    -1,  2245,  2246,    -1,  2248,  2249,
    2250,  2251,  2252,    -1,    -1,  2255,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2264,    -1,    -1,    -1,    -1,    -1,
      -1,  2271,    -1,  2273,    -1,  2275,  2276,    -1,  2278,  2279,
      -1,    -1,    -1,  2283,  2284,  2285,   373,    -1,   385,  2289,
    2290,  2291,    -1,  2293,    -1,  2295,   393,  2297,    -1,  2299,
      -1,  2301,    -1,   390,    -1,    -1,  2306,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2325,    -1,   414,    -1,    -1,
      -1,    -1,  2332,    -1,    -1,  2335,    -1,   433,   434,    -1,
      -1,  2341,    -1,    -1,  2344,    -1,    -1,    -1,  2348,   436,
      -1,    -1,   439,    -1,   441,    -1,    -1,   444,    -1,    -1,
     447,   448,    -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,
     457,    -1,   459,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,     6,    -1,    -1,   473,    -1,    11,    -1,
      13,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,   486,
      -1,   488,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,
    2410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,   521,   522,    -1,    -1,    -1,    -1,
      -1,   518,   529,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,   528,    -1,    -1,    -1,    -1,    -1,    -1,   545,    -1,
      -1,    -1,   549,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    -1,    -1,    -1,  2467,    -1,    -1,
      -1,  1027,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   579,    -1,    -1,   592,    -1,    -1,    -1,    -1,
      -1,   124,    -1,    -1,   591,   128,    -1,    -1,   595,    -1,
      -1,   598,    -1,   136,    -1,    -1,    -1,   604,    -1,    -1,
     143,    -1,    -1,    -1,    -1,    -1,  1082,  1083,   151,    -1,
      -1,    -1,    -1,    -1,   157,  1091,  1092,    -1,    -1,  1095,
    1096,  1097,    -1,    -1,    -1,   632,    -1,    -1,    -1,  1105,
    1106,  2551,  1108,  1109,    -1,    -1,    -1,  1113,    -1,    -1,
     647,  1117,  1118,  1119,  1120,   188,  1122,    -1,    -1,  2569,
    2570,    -1,    -1,    -1,  1130,  1131,    -1,  1133,  1134,    -1,
      -1,    -1,    -1,    -1,  1140,  1141,  1142,    -1,    -1,  1145,
    1146,  1147,  1148,  1149,  1150,    -1,  1152,    -1,    -1,  1155,
    1156,    -1,    -1,    -1,  1160,    -1,   229,    -1,  1164,  1165,
    1166,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,
      -1,  1177,  1178,  1179,    -1,    -1,    -1,    -1,    -1,    -1,
    1186,   254,    -1,    -1,    -1,    -1,    -1,  1193,  1194,  1195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
    1226,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     313,    35,    -1,    -1,    -1,    -1,    -1,  2697,  2698,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    50,    -1,   331,    -1,
      -1,    -1,   335,    57,    -1,    -1,    -1,    -1,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2748,    -1,
      -1,    -1,  2752,    -1,    98,   378,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,    -1,  2772,  2773,    -1,    -1,   120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,  2793,    -1,    -1,    -1,    -1,   142,   143,
      -1,    -1,  2802,    -1,  2804,    -1,  2806,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   439,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   169,  1382,    -1,    -1,    -1,
      -1,    -1,    -1,  2833,    -1,    -1,    -1,    -1,  2838,  1395,
     463,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1413,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,    -1,  2867,   212,    -1,
      -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      39,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,    -1,
      -1,    -1,   236,    -1,   238,    -1,    -1,   520,   521,   522,
      -1,    -1,    61,    -1,    -1,    -1,   529,    -1,    -1,    -1,
      -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   545,    -1,    -1,    -1,   549,    -1,    -1,   273,
      -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,  2939,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
      -1,  2961,    -1,   122,    -1,    -1,    -1,    -1,    -1,   592,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   141,    -1,    -1,  2985,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,   186,    -1,   373,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     199,   200,    -1,    -1,    -1,    -1,   390,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,  1621,    -1,    -1,    -1,    -1,
     414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   436,    -1,    -1,   439,    -1,   441,    -1,    -1,
     444,    -1,    -1,   447,   448,    -1,    -1,    -1,  3108,  3109,
      -1,    -1,   271,   457,    -1,   459,    -1,    -1,    -1,    -1,
      -1,   280,   281,   467,   283,    -1,    -1,    -1,    -1,   473,
      -1,    -1,    -1,  3133,    -1,    -1,    -1,   481,    -1,    -1,
      -1,    -1,   486,    -1,   488,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     319,   320,   321,  1719,  1720,  1721,    -1,    -1,    -1,    -1,
      -1,  3171,    -1,    -1,   518,    -1,    -1,    -1,    -1,   338,
     339,   340,    -1,    -1,   528,    -1,   345,    -1,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,  3196,    -1,    -1,    -1,
    3200,  3201,    -1,  3203,  1760,    -1,   365,   366,    -1,    -1,
      -1,    -1,  3212,  1769,    -1,  1771,    -1,  3217,    -1,    -1,
    3220,    -1,  3222,  3223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,   398,
     399,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,
      -1,   595,    -1,    -1,   598,  3255,    -1,    -1,    -1,    -1,
     604,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   632,  3289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   647,    -1,    34,    35,    -1,  1864,    -1,
      -1,    -1,    -1,  3313,    -1,    -1,    -1,    -1,   477,  1875,
      -1,    -1,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,    -1,   493,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    26,    27,    -1,
      -1,  1907,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,    98,
      -1,  1927,   217,   218,   219,   220,  3376,    -1,  1934,   108,
      -1,    60,    61,    62,  3384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    72,    -1,    -1,   555,    -1,    -1,    78,
     559,    -1,    -1,   562,   563,   564,   565,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,    -1,
      -1,   110,    -1,   162,    -1,    -1,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,   128,
      -1,    -1,   611,   612,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,   196,    -1,    -1,
      -1,    -1,    -1,    -1,   203,    -1,   205,   636,   157,    -1,
      -1,   326,    -1,   328,   329,   330,    -1,    -1,    -1,    -1,
      -1,    -1,   337,    -1,    -1,    -1,    -1,    -1,    -1,   228,
     229,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,    -1,    -1,
     229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     415,    -1,    -1,    -1,    -1,   254,    -1,    -1,   307,    -1,
      -1,    -1,  2138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3604,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,  3644,  3645,    -1,    -1,    -1,    -1,
      -1,    -1,   331,  3653,    -1,  2211,    -1,    -1,    -1,  2215,
      -1,    -1,    -1,    -1,  2220,  2221,    -1,    -1,   397,    -1,
      -1,    -1,    -1,  2229,    -1,    -1,    -1,    -1,   407,   408,
      -1,    -1,   411,   412,    -1,    -1,  2242,  2243,    -1,  2245,
      -1,    -1,  2248,  2249,  2250,  2251,  2252,    -1,    -1,    -1,
      -1,    -1,    -1,   432,    -1,    -1,   385,    -1,  2264,    -1,
      -1,    -1,    -1,    -1,   393,  2271,    -1,  2273,    -1,  2275,
    2276,    -1,  2278,    -1,    -1,    -1,    -1,  2283,  2284,  2285,
      -1,    -1,    -1,  2289,  2290,  2291,    -1,  2293,    -1,  2295,
      -1,  2297,    -1,  2299,    -1,  2301,    -1,    -1,    -1,   478,
    2306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,  2325,
      -1,    -1,    -1,    -1,    -1,   620,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   463,  2341,    -1,    -1,  2344,    -1,
     635,   636,    -1,  3793,   523,    -1,    -1,  3797,    -1,    -1,
     529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   547,   548,
      -1,    -1,    -1,    -1,  3824,    -1,    -1,    -1,    -1,   558,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3839,
      -1,   520,   521,   522,    -1,    -1,    -1,    -1,    -1,    -1,
     529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   545,    -1,    -1,    -1,
     549,    -1,    -1,   602,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,    -1,    -1,    -1,
     619,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3987,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3995,    -1,    -1,    -1,    -1,
      -1,    -1,  4002,    -1,  4004,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4040,    -1,    -1,    -1,    -1,    -1,  4046,  4047,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4149,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4179,
      -1,  4181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4191,  2748,  4193,  4194,    -1,  2752,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2772,  2773,    -1,    -1,
    4220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2793,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2802,    -1,  2804,    -1,
    2806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4287,    -1,  4289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4304,  4305,    -1,    -1,    -1,    -1,
      -1,  2867,    -1,    -1,    -1,    -1,    -1,    -1,  4318,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4330,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4374,  4375,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2939,    -1,    -1,    -1,  4387,  4388,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4404,  2961,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2985,
      -1,    -1,    -1,    -1,  4434,    -1,    -1,    -1,    -1,    -1,
      -1,  4441,    -1,    -1,  4444,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4474,    -1,    -1,    -1,    -1,    -1,
      -1,  4481,    -1,  4483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4493,    -1,    -1,    -1,  4497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4510,    -1,  4512,    -1,  4514,    -1,    -1,    -1,    -1,    -1,
      -1,  4521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4531,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4545,  4546,    -1,    -1,    -1,
      -1,    -1,  3108,  3109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4561,  4562,    -1,    -1,    -1,  4566,    -1,    -1,    -1,
      -1,    -1,  4572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4602,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3196,    -1,    -1,    -1,  3200,  3201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3212,    -1,    -1,    -1,
      -1,  3217,    -1,    -1,  3220,    -1,  3222,  3223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3313,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3604,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3644,  3645,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3653,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3793,    -1,    -1,
      -1,  3797,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3824,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3839,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3995,
      -1,    -1,    -1,    -1,    -1,    -1,  4002,    -1,  4004,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4040,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4179,    -1,  4181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4441,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,  4474,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    45,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
      -1,   105,   106,   107,    -1,   109,   110,   111,   112,   113,
     114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,   128,    -1,  4572,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,  4602,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,   207,    -1,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,   260,   261,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,    -1,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
     554,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,   573,
     574,   575,    -1,   577,   578,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,   606,   607,   608,   609,   610,    -1,    -1,   613,
     614,    -1,   616,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,    -1,    -1,    -1,   640,   641,    -1,    -1,
      -1,    -1,   646,   647,    -1,    -1,   650,   651,    -1,    -1,
     654,   655,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,    -1,   105,   106,   107,    -1,   109,   110,   111,   112,
     113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,   207,    -1,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,    -1,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,    -1,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,   554,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,   606,   607,   608,   609,   610,    -1,    -1,
     613,   614,    -1,   616,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,    -1,    -1,    -1,   640,   641,    -1,
      -1,    -1,    -1,   646,   647,    -1,    -1,   650,   651,    -1,
      -1,   654,   655,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,    -1,   105,   106,   107,    -1,   109,   110,   111,
     112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,   193,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,    -1,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
     282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,    -1,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,   526,   527,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,   577,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,   606,   607,   608,   609,   610,    -1,
      -1,   613,   614,    -1,   616,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,   641,
      -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,   651,
      -1,    -1,   654,   655,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,    -1,   105,   106,   107,    -1,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,   193,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,
     261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,    -1,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
      -1,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,   577,   578,   579,   580,
     581,   582,   583,   584,   585,   586,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,   606,   607,   608,   609,   610,
      -1,    -1,   613,   614,    -1,   616,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,
     641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,
     651,    -1,    -1,   654,   655,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,    -1,   105,   106,   107,    -1,   109,
     110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,   193,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,
     210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
      -1,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,   554,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,   577,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,   606,   607,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,
     640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,
     650,   651,    -1,    -1,   654,   655,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,    -1,   105,   106,   107,    -1,
     109,   110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,    -1,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,   577,   578,
     579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,   606,   607,   608,
     609,   610,    -1,    -1,   613,   614,    -1,   616,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,
      -1,   640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,
      -1,   650,   651,    -1,    -1,   654,   655,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,    -1,   105,   106,   107,
      -1,   109,   110,   111,   112,   113,   114,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,   207,
      -1,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,    -1,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
     528,   529,    -1,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,   577,
     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,
      -1,   599,    -1,   601,   602,   603,    -1,    -1,   606,   607,
     608,   609,   610,    -1,    -1,   613,   614,    -1,   616,   617,
     618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,
     628,   629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,
      -1,    -1,   640,   641,    -1,    -1,    -1,    -1,   646,   647,
      -1,    -1,   650,   651,    -1,    -1,   654,   655,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,    -1,   105,   106,
     107,    -1,   109,   110,   111,   112,   113,   114,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,
     137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
     167,   168,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,    -1,   203,    -1,   205,    -1,
     207,    -1,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,    -1,    -1,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,    -1,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,   443,   444,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,    -1,
      -1,   548,   549,   550,   551,   552,    -1,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
     567,   568,   569,   570,   571,   572,    -1,   574,   575,    -1,
     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
     587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,
     597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,   606,
     607,   608,   609,   610,    -1,    -1,   613,   614,    -1,   616,
     617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,
      -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,   636,
      -1,    -1,    -1,   640,   641,    -1,    -1,    -1,    -1,   646,
     647,    -1,    -1,   650,   651,    -1,    -1,   654,   655,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,    -1,   105,
     106,   107,    -1,   109,   110,   111,   112,   113,   114,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,   207,    -1,   209,   210,    -1,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,    -1,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,   554,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,   577,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
     606,   607,   608,   609,   610,    -1,    -1,   613,   614,    -1,
     616,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,    -1,    -1,    -1,   640,   641,    -1,    -1,    -1,    -1,
     646,   647,    -1,    -1,   650,   651,    -1,    -1,   654,   655,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,    -1,
     105,   106,   107,    -1,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,
     135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,   167,   168,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,   207,    -1,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,    -1,    -1,   261,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,
      -1,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,    -1,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,   552,    -1,   554,
     555,   556,    -1,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,   567,   568,   569,   570,   571,   572,    -1,   574,
     575,    -1,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,    -1,   590,   591,    -1,    -1,   594,
      -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,
      -1,   606,   607,   608,   609,   610,    -1,    -1,   613,   614,
      -1,   616,   617,   618,   619,   620,   621,    -1,    -1,    -1,
      -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,
      -1,   636,    -1,    -1,    -1,   640,   641,    -1,    -1,    -1,
      -1,   646,   647,    -1,    -1,   650,   651,    -1,    -1,   654,
     655,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    -1,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
      -1,   105,   106,   107,    -1,   109,   110,   111,   112,   113,
     114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,
     134,   135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,
      -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,   207,    -1,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,
      -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,    -1,    -1,    -1,   322,   323,
     324,   325,   326,   327,    -1,    -1,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,    -1,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,    -1,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,   528,   529,    -1,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,   552,    -1,
     554,   555,   556,    -1,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,   567,   568,   569,   570,   571,   572,    -1,
     574,   575,    -1,   577,   578,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,    -1,   590,   591,    -1,    -1,
     594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,
      -1,    -1,   606,   607,   608,   609,   610,    -1,    -1,   613,
     614,    -1,   616,   617,   618,   619,   620,   621,    -1,    -1,
      -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,
      -1,    -1,   636,    -1,    -1,    -1,   640,   641,    -1,    -1,
      -1,    -1,   646,   647,    -1,    -1,   650,   651,    -1,    -1,
     654,   655,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,    -1,   105,   106,   107,    -1,   109,   110,   111,   112,
     113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,   207,    -1,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,    -1,    -1,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,    -1,   362,
     363,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,   554,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,   606,   607,   608,   609,   610,    -1,    -1,
     613,   614,    -1,   616,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,    -1,    -1,    -1,   640,   641,    -1,
      -1,    -1,    -1,   646,   647,    -1,    -1,   650,   651,    -1,
      -1,   654,   655,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,    -1,   105,   106,   107,    -1,   109,   110,   111,
     112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,    -1,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
     282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,    -1,    -1,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,    -1,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,   526,   527,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,   554,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,   577,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,   606,   607,   608,   609,   610,    -1,
      -1,   613,   614,    -1,   616,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,   641,
      -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,   651,
      -1,    -1,   654,   655,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,    -1,   105,   106,   107,    -1,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,
     261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,    -1,
      -1,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
      -1,   362,   363,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,   577,   578,   579,   580,
     581,   582,   583,   584,   585,   586,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,   606,   607,   608,   609,   610,
      -1,    -1,   613,   614,    -1,   616,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,   640,
     641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,   650,
     651,    -1,    -1,   654,   655,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,    -1,   105,   106,   107,    -1,   109,
     110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,   207,    -1,   209,
     210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,
      -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,    -1,
      -1,    -1,   322,   323,   324,   325,   326,   327,    -1,    -1,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
      -1,    -1,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,    -1,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,   528,   529,
      -1,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,   552,    -1,   554,   555,   556,    -1,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,
     570,   571,   572,    -1,   574,   575,    -1,   577,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,
      -1,   601,   602,   603,    -1,    -1,   606,   607,   608,   609,
     610,    -1,    -1,   613,   614,    -1,   616,   617,   618,   619,
     620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,
      -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,
     640,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,
     650,   651,    -1,    -1,   654,   655,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,   362,   363,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,   578,
     579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,   654,   655,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,
     135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,   229,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,    -1,   267,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,    -1,   311,   312,   313,   314,
      -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,
     355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,   473,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,   534,
     535,   536,    -1,    -1,   539,   540,   541,   542,    -1,   544,
     545,    -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,   567,   568,   569,   570,   571,   572,    -1,   574,
     575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,
      -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,
      -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,
      -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,
      -1,   636,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
     655,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,   229,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
     333,    -1,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,
     353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,
      -1,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,   541,   542,
      -1,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,   582,
      -1,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,   655,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,    -1,
      -1,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,    -1,
     311,   312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,   333,    -1,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
      -1,   352,   353,   354,   355,    -1,    -1,    -1,   359,   360,
      -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,   473,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,    -1,    -1,   539,   540,
     541,   542,    -1,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,
     581,   582,    -1,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,   648,    -1,    18,
      19,    -1,    -1,    22,   655,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,   648,
       7,     8,     9,    10,    11,   654,   655,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    60,    -1,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    -1,
      97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,
     137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
     167,   168,   169,    -1,    -1,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,    -1,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,    -1,   311,   312,   313,   314,    -1,   316,
     317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
      -1,   348,   349,    -1,    -1,   352,   353,   354,   355,    -1,
      -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,   523,    -1,    -1,    -1,
      -1,   528,   529,    -1,   531,   532,   533,   534,   535,   536,
      -1,    -1,   539,   540,   541,   542,    -1,   544,   545,    -1,
      -1,   548,   549,   550,   551,   552,    -1,    -1,   555,   556,
      -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
     567,   568,   569,   570,   571,   572,    -1,   574,   575,    -1,
      -1,    -1,   579,   580,   581,   582,    -1,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,
     597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,    -1,
     617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,
      -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,   636,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
     647,    -1,    -1,    18,    19,    -1,    -1,    22,   655,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,
     135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,    -1,   311,   312,   313,   314,
      -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,
     355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,   534,
     535,   536,    -1,    -1,   539,   540,   541,   542,    -1,   544,
     545,    -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,   567,   568,   569,   570,   571,   572,    -1,   574,
     575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,
      -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,
      -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,
      -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,
      -1,   636,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
     655,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
     333,    -1,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,
     353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,
      -1,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,   541,   542,
      -1,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,   582,
      -1,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,   647,    -1,    -1,    18,    19,    -1,
      -1,    22,   655,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,    -1,
      -1,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,    -1,
     311,   312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,   333,    -1,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
      -1,   352,   353,   354,   355,    -1,    -1,    -1,   359,   360,
      -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,    -1,    -1,   539,   540,
     541,   542,    -1,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,
     581,   582,    -1,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,    -1,    -1,    -1,    -1,
      -1,   642,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,   655,    18,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
     333,    -1,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,
     353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,
      -1,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,   541,   542,
      -1,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,   582,
      -1,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,   654,   655,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    19,    -1,    -1,    22,   655,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    60,    -1,    62,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    -1,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    -1,
      97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,
     137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,
     147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
     167,   168,   169,    -1,    -1,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,    -1,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,    -1,
     307,   308,   309,    -1,   311,   312,   313,   314,    -1,   316,
     317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,
     327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
      -1,   348,   349,    -1,    -1,   352,   353,   354,   355,    -1,
      -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,   523,    -1,    -1,    -1,
      -1,   528,   529,    -1,   531,   532,   533,   534,   535,   536,
      -1,    -1,   539,   540,   541,   542,    -1,   544,   545,    -1,
      -1,   548,   549,   550,   551,   552,    -1,    -1,   555,   556,
      -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
     567,   568,   569,   570,   571,   572,    -1,   574,   575,    -1,
      -1,    -1,   579,   580,   581,   582,    -1,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,
     597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,    -1,
     617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,
      -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,   636,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    -1,    22,   655,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,
     135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,    -1,   311,   312,   313,   314,
      -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,
     355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,   534,
     535,   536,    -1,    -1,   539,   540,   541,   542,    -1,   544,
     545,    -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,   567,   568,   569,   570,   571,   572,    -1,   574,
     575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,
      -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,
      -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,
      -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,
      -1,   636,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    -1,    22,
     655,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
     333,    -1,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,
     353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,
      -1,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,   541,   542,
      -1,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,   582,
      -1,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,    22,   655,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,   142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,   169,    -1,
      -1,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,    -1,
     311,   312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,   333,    -1,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
      -1,   352,   353,   354,   355,    -1,    -1,    -1,   359,   360,
      -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,
     531,   532,   533,   534,   535,   536,    -1,    -1,   539,   540,
     541,   542,    -1,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,
     581,   582,    -1,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,
     621,    -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,
     631,   632,   633,    -1,    -1,   636,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    19,    -1,   654,    22,    -1,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    -1,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      -1,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
      -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
     138,    -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,
      -1,    -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
     168,   169,    -1,    -1,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,    -1,   307,
     308,   309,    -1,   311,   312,   313,   314,    -1,   316,   317,
      -1,    -1,    -1,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,    -1,
     348,   349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,
      -1,   359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,
     528,   529,    -1,   531,   532,   533,   534,   535,   536,    -1,
      -1,   539,   540,   541,   542,    -1,   544,   545,    -1,    -1,
     548,   549,   550,   551,   552,    -1,   554,   555,   556,    -1,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,
     568,   569,   570,   571,   572,    -1,   574,   575,    -1,    -1,
      -1,   579,   580,   581,   582,    -1,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,
      -1,   599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,
      -1,    -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,
     618,   619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,
     628,   629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,   654,    22,    -1,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    60,    -1,    62,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    -1,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,
     135,   136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,
     145,   146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   287,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,    -1,   311,   312,   313,   314,
      -1,   316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,
     325,   326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,
     355,    -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,   529,    -1,   531,   532,   533,   534,
     535,   536,    -1,    -1,   539,   540,   541,   542,    -1,   544,
     545,    -1,    -1,   548,   549,   550,   551,   552,    -1,   554,
     555,   556,    -1,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,   567,   568,   569,   570,   571,   572,    -1,   574,
     575,    -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,
      -1,    -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,
      -1,    -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,
      -1,    -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,
      -1,   636,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,   654,
      22,    -1,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      -1,    73,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    -1,    89,    90,    91,
      92,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,
      -1,    -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,
      -1,    -1,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,
     142,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,   167,   168,   169,    -1,    -1,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,    -1,   311,
     312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,
     322,   323,   324,   325,   326,   327,    -1,    -1,   330,   331,
      -1,   333,    -1,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,
     352,   353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,
      -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,
     532,   533,   534,   535,   536,    -1,    -1,   539,   540,   541,
     542,    -1,   544,   545,    -1,    -1,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,
     572,    -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,
     582,    -1,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,    -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,
     602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,
      -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,   621,
      -1,    -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,
     632,   633,    -1,    -1,   636,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,   654,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,    -1,   636,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,   654,    22,    -1,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    -1,    -1,
      -1,    97,    -1,    -1,   100,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,    -1,    -1,    -1,   132,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,   142,    -1,    -1,   145,
     146,   147,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,   167,   168,   169,    -1,    -1,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
      -1,   307,   308,   309,    -1,   311,   312,   313,   314,    -1,
     316,   317,    -1,    -1,    -1,    -1,   322,   323,   324,   325,
     326,   327,    -1,    -1,   330,   331,    -1,   333,    -1,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,    -1,   348,   349,    -1,    -1,   352,   353,   354,   355,
      -1,    -1,    -1,   359,   360,    -1,    -1,    -1,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,    -1,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,   529,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,   541,   542,    -1,   544,   545,
      -1,    -1,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,   567,   568,   569,   570,   571,   572,    -1,   574,   575,
      -1,    -1,    -1,   579,   580,   581,   582,    -1,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,    -1,   594,    -1,
      -1,   597,    -1,   599,    -1,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,    -1,
      -1,   617,   618,   619,   620,   621,    -1,    -1,    -1,    -1,
      -1,    -1,   628,   629,    -1,   631,   632,   633,    -1,    -1,
     636,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,   654,    22,
      -1,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    60,    -1,    62,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    -1,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    -1,    97,    -1,    -1,   100,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,   137,   138,    -1,    -1,    -1,   142,
      -1,    -1,   145,   146,   147,    -1,    -1,    -1,   151,    -1,
     153,   154,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,   314,    -1,   316,   317,    -1,    -1,    -1,    -1,   322,
     323,   324,   325,   326,   327,    -1,    -1,   330,   331,    -1,
     333,    -1,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,    -1,   352,
     353,   354,   355,    -1,    -1,    -1,   359,   360,    -1,    -1,
      -1,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,   529,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,   541,   542,
      -1,   544,   545,    -1,    -1,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,   567,   568,   569,   570,   571,   572,
      -1,   574,   575,    -1,    -1,    -1,   579,   580,   581,   582,
      -1,   584,   585,    -1,   587,   588,    -1,   590,   591,    -1,
      -1,   594,    -1,    -1,   597,    -1,   599,    -1,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,    -1,    -1,   617,   618,   619,   620,   621,    -1,
      -1,    -1,    -1,    -1,    -1,   628,   629,    -1,   631,   632,
     633,    -1,    -1,   636,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      -1,   654,    -1,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    59,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    -1,    86,    87,    -1,    89,    90,
      91,    -1,    93,    -1,    -1,    -1,    97,    -1,    -1,   100,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,    -1,    -1,
      -1,   132,    -1,   134,   135,   136,   137,   138,    -1,    -1,
      -1,    -1,    -1,    -1,   145,   146,   147,    -1,    -1,    -1,
     151,    -1,    -1,   154,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,   167,   168,    -1,    -1,
      -1,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,    -1,    -1,    -1,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,    -1,    -1,   246,   247,    -1,   249,   250,
     251,    -1,    -1,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,    -1,   307,   308,   309,    -1,
     311,   312,   313,   314,    -1,   316,   317,    -1,    -1,    -1,
      -1,   322,   323,   324,   325,   326,   327,    -1,    -1,   330,
     331,    -1,   333,    -1,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
      -1,   352,   353,   354,   355,    -1,    -1,    -1,    -1,   360,
      -1,    -1,    -1,   364,    -1,   366,   367,   368,    -1,   370,
     371,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,    -1,    -1,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
      -1,    -1,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,    -1,    -1,   440,
      -1,   442,   443,    -1,   445,    -1,    -1,    -1,   449,    -1,
      -1,   452,   453,   454,   455,   456,    -1,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,    -1,    -1,    -1,    -1,   476,   477,   478,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,    -1,   490,
      -1,   492,    -1,   494,    -1,    -1,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,    -1,   519,   520,
     521,   522,   523,    -1,    -1,    -1,    -1,    -1,   529,    -1,
     531,   532,   533,   534,   535,   536,    -1,    -1,   539,   540,
     541,   542,    -1,   544,   545,    -1,    -1,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,   567,   568,   569,   570,
     571,   572,    -1,   574,   575,    -1,    -1,    -1,    -1,   580,
     581,   582,    -1,   584,   585,    -1,   587,   588,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,    -1,    -1,   617,   618,   619,   620,
     621,    -1,    -1,   624,    -1,    -1,    -1,   628,    -1,    -1,
     631,    -1,   633,    -1,    -1,   636,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,   649,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,   642,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,   642,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,   642,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,   642,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
     359,   360,    -1,    -1,   363,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,   482,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,   363,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,   103,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    20,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    60,    -1,    62,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,   142,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
     359,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
     579,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,    -1,   594,    -1,    -1,   597,    -1,
     599,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
     629,    -1,   631,   632,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,   150,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,   622,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
     149,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,   622,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,   153,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,     5,   636,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    -1,
      -1,    70,    71,    -1,    73,    74,    -1,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    -1,    86,    87,    -1,
      89,    90,    91,    -1,    93,    -1,    -1,    -1,    97,    -1,
      -1,   100,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,   146,   147,    -1,
      -1,    -1,   151,    -1,    -1,   154,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,   167,   168,
      -1,    -1,    -1,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,    -1,   307,   308,
     309,    -1,   311,   312,   313,   314,    -1,   316,   317,    -1,
      -1,    -1,    -1,   322,   323,   324,   325,   326,   327,    -1,
      -1,   330,   331,    -1,   333,    -1,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,    -1,   352,   353,   354,   355,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,   364,    -1,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,    -1,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,   541,   542,    -1,   544,   545,    -1,    -1,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,   567,   568,
     569,   570,   571,   572,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,   582,    -1,   584,   585,    -1,   587,   588,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,    -1,    -1,   617,   618,
     619,   620,   621,    -1,    -1,    -1,    -1,    -1,    -1,   628,
      -1,    -1,   631,    -1,   633,    -1,    -1,   636
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      80,    98,   120,   129,   130,   131,   142,   143,   155,   169,
     187,   202,   204,   209,   212,   236,   238,   256,   273,   277,
     373,   390,   403,   414,   436,   439,   441,   444,   447,   448,
     457,   459,   467,   473,   481,   486,   488,   518,   528,   579,
     591,   595,   598,   604,   632,   647,   658,   661,   662,   663,
     664,   665,   667,   672,   674,   681,   714,   741,   748,   749,
     868,  1037,  1079,  1081,  1095,  1098,  1103,  1105,  1106,  1111,
    1114,  1119,  1126,  1138,  1139,  1297,  1299,  1314,  1317,  1342,
    1350,  1361,  1368,  1382,  1386,  1389,  1399,  1405,  1410,  1412,
    1413,  1465,  1495,  1502,  1504,  1511,  1514,  1541,  1547,  1548,
    1549,  1550,  1607,  1615,  1616,    11,   107,   126,   196,   225,
     278,   408,   479,   545,   601,  1075,  1572,  1573,  1574,  1577,
     274,   361,  1113,  1542,   554,  1456,   229,     5,     7,     8,
       9,    10,    11,    14,    18,    19,    22,    24,    25,    26,
      27,    28,    29,    31,    35,    39,    42,    43,    44,    46,
      48,    49,    52,    55,    56,    58,    59,    60,    62,    64,
      65,    66,    67,    68,    70,    71,    73,    74,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    86,    87,    89,
      90,    91,    92,    93,    97,   100,   102,   105,   109,   110,
     111,   114,   119,   120,   125,   126,   128,   132,   134,   135,
     136,   137,   138,   142,   145,   146,   147,   151,   153,   154,
     156,   157,   158,   161,   162,   164,   165,   166,   167,   168,
     169,   172,   173,   174,   175,   176,   179,   180,   182,   183,
     184,   187,   191,   192,   194,   196,   198,   199,   200,   201,
     203,   205,   209,   210,   212,   215,   216,   220,   221,   222,
     223,   226,   227,   228,   230,   232,   237,   238,   242,   246,
     247,   249,   250,   254,   257,   258,   261,   264,   265,   271,
     272,   274,   276,   278,   279,   287,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   307,   308,   309,   311,   312,   313,   314,
     316,   317,   322,   323,   324,   325,   326,   327,   330,   331,
     333,   335,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   348,   349,   352,   353,   354,   355,   359,   360,   364,
     366,   367,   368,   370,   371,   372,   374,   384,   385,   386,
     388,   389,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   403,   404,   405,   407,   409,   410,   411,   412,
     413,   415,   416,   417,   420,   424,   425,   426,   427,   428,
     431,   432,   433,   434,   435,   437,   438,   440,   441,   442,
     445,   447,   449,   450,   452,   453,   454,   456,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   471,
     472,   476,   477,   478,   479,   483,   487,   489,   490,   491,
     492,   494,   495,   496,   497,   498,   504,   505,   506,   508,
     509,   511,   514,   517,   518,   519,   520,   521,   522,   523,
     528,   529,   531,   532,   533,   534,   535,   536,   539,   540,
     541,   542,   544,   545,   548,   549,   550,   551,   552,   555,
     556,   558,   559,   560,   561,   562,   567,   568,   569,   570,
     571,   572,   574,   575,   579,   580,   581,   582,   584,   585,
     587,   588,   590,   591,   594,   597,   599,   601,   602,   603,
     610,   613,   617,   618,   619,   620,   621,   628,   629,   631,
     632,   633,   636,   708,  1454,  1459,  1463,  1464,   307,   544,
     547,  1498,  1498,   628,  1543,    69,   107,   195,   278,   479,
     499,   545,   551,   593,   601,   690,   691,   920,   921,   922,
    1011,  1012,  1013,  1014,  1015,  1016,  1017,  1351,  1298,   107,
     166,   196,   229,   278,   408,   479,   545,   551,   576,   601,
     617,  1310,  1459,  1113,   102,   750,   707,   655,  1451,  1453,
    1459,   673,  1315,   396,    86,   416,  1411,   110,   229,   633,
    1418,    35,   544,  1496,  1498,  1113,   869,  1459,  1406,   467,
     601,  1498,  1113,  1318,  1400,   502,   738,   742,   743,  1459,
     707,  1543,  1459,  1142,  1144,  1145,   519,  1466,  1369,   742,
     491,   574,   491,   547,  1363,   396,    35,  1498,  1503,  1343,
    1459,    31,    80,   153,   403,   425,   459,   518,  1609,   473,
     647,  1140,     0,   155,   659,   403,   175,   191,   391,  1387,
    1451,  1459,   159,  1049,  1459,   159,   708,   206,   708,   266,
    1456,  1459,  1461,   816,   817,   820,   843,  1459,   707,   547,
     166,  1043,  1572,  1498,  1543,  1120,   715,   655,   566,  1096,
    1107,    17,  1544,   224,   923,   206,  1461,   818,   843,   707,
     380,  1569,  1573,  1574,  1575,  1576,  1577,   547,   921,   229,
    1015,  1014,   229,   229,   225,   285,   417,  1359,  1360,     7,
      22,    28,    34,    36,    37,    38,    40,    53,    54,    60,
      61,    70,    73,    92,    95,    96,   101,   103,   106,   107,
     112,   113,   114,   119,   121,   124,   170,   177,   178,   185,
     191,   199,   201,   207,   213,   220,   224,   236,   239,   263,
     271,   282,   310,   315,   326,   330,   332,   336,   337,   338,
     339,   340,   347,   356,   357,   358,   362,   363,   368,   387,
     393,   398,   399,   401,   415,   443,   444,   456,   458,   464,
     465,   471,   526,   527,   533,   537,   538,   543,   554,   559,
     560,   561,   562,   577,   578,   579,   583,   586,   601,   606,
     607,   608,   609,   614,   616,   620,   621,   636,   640,   641,
     646,   647,   650,   651,   654,   655,   972,  1159,  1160,  1161,
    1162,  1166,  1169,  1170,  1171,  1172,  1173,  1174,  1182,  1186,
    1198,  1437,  1439,  1441,  1442,  1443,  1447,  1449,  1454,  1459,
     224,  1309,  1309,  1309,  1459,   206,  1309,  1309,   843,  1309,
     707,  1309,  1498,   668,  1390,   134,  1515,  1459,   372,    68,
     421,   655,  1461,   127,   214,   285,  1320,  1459,  1159,   240,
    1414,   190,   190,  1497,  1498,    47,   870,   193,    19,    34,
      59,   307,  1374,  1407,  1459,   707,  1115,  1498,   127,   285,
    1321,  1349,    59,   307,   416,   491,  1401,  1402,   610,   739,
     481,   744,  1512,   566,  1544,  1143,    12,   139,   214,   507,
     508,   509,   510,   511,   512,   530,  1149,  1150,  1151,  1568,
    1467,    60,    61,   124,   203,   274,   343,   393,   478,   574,
     654,   974,  1459,  1469,  1481,  1485,  1487,    35,    60,    67,
      73,    96,    98,   108,   157,   162,   165,   194,   196,   203,
     205,   228,   229,   230,   253,   274,   307,   372,   397,   407,
     408,   411,   412,   432,   478,   491,   529,   547,   548,   558,
     602,   619,   974,  1010,  1370,  1374,  1375,  1377,  1482,   744,
     435,   514,  1090,  1091,  1092,   421,   625,  1082,  1083,  1084,
    1090,  1362,  1459,  1349,    36,   213,   554,  1438,  1457,  1608,
    1608,  1608,  1608,  1608,  1144,  1140,   648,   653,  1459,   159,
    1384,  1383,   324,   552,   585,  1039,   599,   103,  1461,  1462,
    1041,   822,   844,  1459,  1040,   374,     6,    57,   143,   357,
     420,   422,   845,  1045,  1462,  1451,   708,   513,  1578,  1579,
    1042,  1104,  1121,  1122,  1123,  1124,  1451,   647,   716,  1459,
     675,  1304,  1305,  1451,  1304,    56,   359,   359,   436,  1545,
     356,   357,  1165,  1459,   821,   844,   189,     6,  1462,  1531,
    1532,   444,    10,   408,   576,   694,  1155,  1571,  1579,  1591,
    1595,  1596,  1602,   694,  1155,  1570,  1579,  1591,  1596,  1602,
    1572,  1577,   923,  1459,  1459,  1459,   193,  1352,  1356,  1357,
    1459,  1359,   647,   647,   647,  1169,   647,   647,   647,  1159,
    1201,   647,   647,   647,   647,   647,   647,   647,   647,   647,
    1158,  1158,   647,   961,   647,   647,   647,   554,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,  1159,   647,   647,   647,  1199,  1200,  1447,  1459,   647,
     647,   647,   647,   647,   647,   647,   647,   647,  1159,   961,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   961,   554,
     647,   647,   647,   554,   647,   647,   647,    36,   213,   554,
     647,  1158,   961,   961,   647,   647,   647,   647,   647,   647,
    1169,  1169,  1169,  1159,  1563,  1564,  1459,  1187,  1459,    16,
      17,   377,   380,   634,  1163,  1164,   159,   160,   197,   208,
     248,   259,   286,   350,  1167,    32,   140,   243,   267,   336,
     430,   484,   485,   497,   638,   639,   640,   641,   642,   643,
     644,   645,  1165,  1169,    72,   379,   649,  1457,   647,   655,
     170,  1459,   708,  1459,   369,   844,   708,  1461,   360,   618,
     854,   855,  1311,  1312,  1313,  1375,   708,  1462,  1530,  1303,
    1309,   605,   669,    34,    59,    67,   132,   157,   161,   198,
     216,   230,   279,   407,   416,   431,   449,   492,   523,   548,
     558,   602,  1391,  1396,  1397,  1498,    85,   654,   751,   752,
     753,   754,  1459,    12,    13,    98,   129,   143,   166,   169,
     182,   204,   229,   236,   277,   409,   413,   429,   437,   445,
     473,   486,   487,   539,   576,   598,   600,  1516,  1518,  1520,
    1521,    20,   159,  1253,  1254,  1505,  1459,  1075,   496,    49,
      84,   285,  1420,    29,    29,  1451,  1499,  1500,  1112,   269,
     272,   418,   871,   873,   654,   666,  1456,   279,    30,   279,
    1116,  1462,  1117,  1118,  1451,  1099,   240,  1306,  1322,  1323,
    1451,    49,  1403,   649,  1457,    55,    65,    77,    89,    90,
      91,   105,   325,   342,   469,   532,   550,   745,   747,    12,
     413,  1513,  1518,   467,  1546,  1545,   592,  1551,  1552,   642,
    1153,  1154,  1155,  1151,  1468,  1484,  1487,   481,   655,    34,
     124,   159,   482,   975,   976,  1333,  1461,   190,  1333,  1471,
     654,  1461,    34,   124,   978,   979,  1461,   655,  1472,  1470,
    1333,   165,   267,   623,  1381,  1381,   647,   107,   166,   196,
     408,   547,   576,   617,  1381,    12,   932,  1461,   268,  1272,
    1274,   193,   243,  1376,  1378,    71,   523,   190,  1381,   523,
     544,    71,   523,    12,    42,    93,    97,   247,   323,   386,
     498,   541,  1364,  1365,  1366,   165,   216,   523,   523,  1381,
    1381,  1381,  1272,  1381,  1378,   279,   156,    74,   410,   544,
     575,   523,   613,  1080,   649,   371,   630,    87,   649,  1305,
    1075,   649,   370,  1611,   540,  1612,   252,   452,  1610,   648,
    1552,  1554,  1556,  1557,   155,   660,  1461,  1138,  1314,  1317,
    1342,  1350,  1385,  1388,  1438,  1459,   124,   918,   919,   929,
     930,   983,   110,  1158,   654,   709,     6,   823,   709,   647,
     109,   840,   840,   840,     4,   649,   393,  1038,  1044,   472,
     617,  1579,  1304,   243,   649,   390,  1132,  1134,  1135,   717,
     718,  1159,   226,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   308,   309,   433,   434,   676,   677,   680,   175,
     417,   649,  1097,    58,   175,   179,   190,   322,   417,  1108,
    1109,  1110,    56,   436,   170,   689,   823,   110,   840,   222,
     649,  1155,  1155,  1155,   166,   196,   196,  1579,  1451,  1018,
    1019,  1018,  1018,  1307,  1308,  1451,  1452,  1459,   649,  1354,
     655,  1358,  1159,  1159,    12,   139,  1194,  1255,  1194,  1194,
    1194,   622,  1203,  1159,  1159,  1198,  1198,  1159,  1159,  1159,
     139,  1194,  1255,   648,   363,   648,   648,  1159,  1159,  1159,
    1159,  1447,  1563,   115,   116,   117,   118,   119,   217,   218,
     219,   220,   326,   328,   329,   330,   337,   415,   470,   471,
     620,   635,   636,  1250,  1251,  1159,  1198,   111,   114,   559,
     562,  1252,   139,  1189,  1159,  1159,  1159,  1159,  1250,  1159,
    1198,  1200,     9,   649,   655,   139,  1194,  1159,  1159,   139,
    1194,  1159,  1159,  1198,  1198,  1198,  1159,  1159,  1159,  1198,
    1162,  1159,  1159,  1159,  1159,  1159,  1159,   648,  1159,  1194,
    1194,  1159,  1159,   139,  1194,  1159,  1251,  1251,  1159,    45,
     260,   573,  1159,  1159,   648,  1448,  1449,  1459,  1194,  1194,
    1159,  1159,  1159,   648,   649,   648,   473,   647,  1560,  1561,
    1159,   654,  1188,  1461,   655,  1159,  1159,  1159,  1161,   178,
     362,   578,   594,  1165,    12,    18,  1161,  1168,  1162,  1162,
     647,  1169,  1162,  1162,  1162,  1162,   267,  1162,  1162,   239,
    1162,   239,  1162,  1162,  1162,  1162,  1162,    32,   243,   267,
     430,  1461,  1169,  1159,  1175,  1459,   655,  1451,  1311,   649,
    1313,   157,   649,  1304,  1300,   654,   670,   671,   279,   279,
     279,   279,    49,   279,   279,   649,  1392,   114,   559,   562,
     746,   756,  1186,  1441,  1447,  1461,   649,   159,   407,  1519,
     461,   461,   545,   551,   601,   617,   375,  1523,   544,   369,
    1525,    66,   491,  1522,   108,   617,  1524,   369,   649,  1459,
     183,   353,  1459,  1506,  1507,  1322,  1456,  1127,   274,  1419,
    1254,   649,  1304,    74,   647,   878,   879,   878,   879,   391,
     881,   210,   255,  1461,    30,   566,  1409,   121,   185,   282,
     363,   583,  1281,  1282,  1283,    30,   566,  1408,   649,   566,
     649,   566,  1304,  1323,  1319,   390,  1217,  1218,    12,  1404,
    1402,   649,   159,  1519,   369,   369,  1459,    12,   139,  1559,
     649,  1146,  1159,  1445,  1459,   190,   649,  1333,  1459,    72,
     981,  1159,  1462,   368,   393,   554,  1493,   249,   421,  1488,
    1489,  1490,  1491,   203,   274,   478,  1483,  1333,  1459,   574,
    1473,  1484,   649,  1475,  1486,   243,  1379,  1456,  1159,   642,
     923,   708,   708,   708,  1451,   708,  1451,   279,   341,   523,
    1373,  1373,   282,   363,   583,  1275,  1276,  1439,  1459,  1381,
    1459,   708,  1381,  1462,  1376,   708,  1381,   246,   542,   180,
     190,  1367,   649,  1379,   524,   525,  1376,  1451,  1378,  1376,
    1376,  1381,  1381,   597,  1093,  1092,   494,  1084,   473,   647,
     651,  1204,  1205,  1206,  1207,  1208,  1219,  1220,  1234,  1438,
     394,  1613,   378,  1268,  1274,  1558,   919,    72,   974,   135,
    1461,    78,    92,   257,   334,   359,   419,   513,   711,   713,
     426,   587,   841,   842,   232,   837,   838,   839,   846,   854,
     855,   107,   215,   384,   393,   400,   495,   601,   692,   693,
    1456,    25,   314,   831,   832,   833,   846,   847,   848,   854,
     855,   824,   825,   831,  1462,   173,     6,    11,    13,    15,
      26,    27,    57,    62,    63,    70,    78,    86,    95,   110,
     128,   136,   137,   143,   151,   157,   168,   188,   227,   229,
     237,   254,   277,   313,   331,   335,   373,   378,   385,   390,
     393,   424,   438,   439,   440,   441,   463,   520,   521,   522,
     529,   545,   549,   579,   592,   865,   925,   927,   929,   930,
    1050,  1054,  1056,  1059,  1065,  1066,  1067,  1072,  1073,  1264,
     369,   702,  1046,   126,   242,  1451,   124,  1125,  1459,  1123,
    1451,   867,  1134,   229,   255,  1008,  1136,   648,   649,   159,
     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
     159,   159,   159,   649,  1305,   599,  1109,   917,   918,    78,
     354,   427,   588,   834,   835,   836,   846,   850,   851,   852,
     853,   854,   855,   629,   604,   819,    47,   625,  1532,   196,
     708,   708,   923,   708,  1459,   682,   581,   605,  1026,   369,
     369,   369,   649,  1355,  1217,   655,  1358,  1357,   193,   642,
    1459,   649,   648,  1194,   648,  1195,   648,   648,   648,  1159,
     149,   622,  1202,    20,   648,   605,   648,   648,   648,   649,
     605,   649,  1183,   648,   642,   648,   649,   649,   648,   648,
     648,   648,   193,   649,   648,   649,  1185,   648,   649,   649,
     649,   641,   649,   648,   648,   647,  1447,  1459,  1194,   648,
     648,   648,  1194,   648,   649,   648,   648,   648,   648,   648,
     648,   649,   648,   243,   648,   649,   649,   648,   649,   649,
     648,   648,   648,   649,   193,   649,  1194,   648,   648,   649,
     649,   649,   648,   193,  1159,   193,  1159,   193,  1159,   193,
     648,   649,   648,   648,   648,   648,   649,    20,   265,   649,
     998,   648,  1198,  1224,  1225,  1226,   473,   647,  1141,  1555,
    1556,   592,  1565,   652,  1483,   482,  1459,   178,   362,   578,
     594,   647,    17,  1159,  1563,   164,  1260,  1162,  1159,  1159,
    1162,   647,  1169,  1162,  1155,  1179,  1180,  1181,   647,   655,
    1459,  1301,  1313,  1333,  1334,  1462,    51,   451,  1076,  1304,
    1461,   649,  1397,  1304,  1398,   754,   757,   758,   753,   364,
     465,   755,   544,   647,  1533,  1462,  1533,  1533,  1533,   196,
     408,   547,  1517,  1521,   159,   183,   197,   208,   258,   259,
     286,   353,   405,  1508,  1510,   623,  1256,  1316,  1128,  1129,
    1130,  1131,  1451,   231,   285,   421,   630,  1501,  1500,   647,
    1155,   213,   282,   363,   583,  1279,  1282,   536,   882,   872,
      11,   874,  1159,  1456,  1159,  1456,  1462,  1462,  1118,  1451,
     175,   417,   603,  1100,  1101,  1102,   473,   481,   609,   610,
     647,   913,  1324,  1327,   647,   747,   746,   649,  1462,   196,
     408,  1517,  1553,  1154,   193,   240,  1147,  1148,  1267,  1268,
    1292,  1156,  1156,   655,   662,  1484,    12,    34,   124,   369,
    1159,  1494,   124,   980,   982,  1461,  1333,   647,   647,   265,
     371,   630,   649,   649,   655,   655,   655,  1487,  1159,  1488,
    1474,  1476,  1477,  1494,  1456,   193,  1380,   648,  1459,   367,
     649,  1381,   416,  1272,  1366,  1380,  1381,  1376,  1451,  1381,
    1381,   504,   505,   506,   680,  1094,   601,  1085,  1086,   193,
    1233,  1459,    99,   233,   252,   263,   346,   458,   530,  1216,
     481,   649,  1451,  1233,   649,   190,  1614,    47,  1272,  1334,
    1334,   344,  1456,   513,   513,   513,   513,   513,   472,  1456,
    1456,  1334,   649,   839,  1456,  1456,  1456,  1456,   121,   185,
     213,   282,   363,   583,  1278,  1456,  1456,   648,   649,  1334,
    1334,   649,   833,   826,   827,   846,   847,   848,   393,    75,
      88,   390,   941,   944,   945,  1006,  1008,  1016,  1017,  1074,
    1334,  1074,   390,  1334,  1334,  1074,  1334,   390,   390,  1334,
    1334,   566,   135,  1334,   253,   545,   189,   390,   406,  1008,
    1074,   253,  1334,   390,   545,   135,  1334,  1334,  1334,  1334,
    1334,  1074,   390,    47,  1334,   867,  1334,   390,   392,    20,
     159,   566,  1078,   390,   390,  1334,  1334,  1334,  1334,   138,
     323,  1459,  1334,   390,  1334,   925,   649,   864,   865,  1054,
     647,   655,   940,   946,  1450,  1459,    82,   468,   439,  1047,
    1580,  1133,   647,  1159,   647,  1278,  1455,  1456,  1278,  1278,
    1455,  1455,   121,   185,   282,   363,   583,  1280,  1455,  1278,
    1278,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1278,  1278,
    1455,  1442,  1455,  1278,   677,  1334,  1334,  1334,  1334,   649,
     836,  1461,   278,   176,   828,   829,   830,   846,   847,   848,
     849,   852,   853,   854,   855,   393,   554,  1461,  1459,  1603,
       8,    30,   814,   708,   647,   454,   267,   647,   857,   924,
     926,   927,    46,   210,   466,  1031,  1031,  1451,  1451,  1451,
    1308,  1459,   605,  1353,  1459,  1205,   655,  1358,   239,  1159,
     648,  1159,   557,  1159,  1159,   153,    34,    61,   111,   114,
     122,   348,   489,   562,   596,  1196,   975,  1159,   975,  1196,
    1198,   648,   239,   239,  1159,  1159,  1159,  1198,  1159,  1159,
    1159,  1159,  1159,  1162,   648,   648,  1159,  1159,  1159,  1159,
    1159,  1159,  1198,   239,  1159,  1159,  1159,   648,  1159,  1159,
    1159,  1159,   193,  1159,   193,  1159,   193,  1159,  1159,  1159,
      34,    61,   993,   994,   995,   996,   997,  1279,  1278,   648,
     648,  1566,  1567,  1568,  1225,  1141,   648,  1559,  1461,  1159,
    1563,  1161,   648,   649,   648,  1169,  1250,  1250,    17,  1159,
    1563,  1260,  1159,   648,   649,  1197,  1198,  1459,  1302,   931,
    1461,  1076,   671,  1393,   159,   649,  1459,  1534,  1535,   566,
     642,  1451,  1459,  1529,  1529,  1529,  1509,  1257,  1273,  1274,
    1324,   649,  1132,  1134,   554,  1458,   630,   274,   875,   876,
     877,  1459,   887,  1162,    47,   647,   889,   879,   159,   647,
     566,  1101,   914,  1325,   647,  1330,  1335,  1330,   648,   913,
    1326,  1444,  1445,  1448,  1459,  1328,  1249,  1459,   159,   204,
     193,  1529,  1529,  1529,  1139,   144,  1205,  1293,   190,   277,
    1152,  1292,  1273,  1148,    20,  1157,  1456,  1459,   642,  1459,
    1493,   554,   554,   421,   442,   476,  1492,  1490,  1489,  1333,
    1475,   649,  1479,  1481,  1485,  1280,  1371,   162,   619,  1276,
    1276,   363,  1372,  1256,  1376,   159,   159,   649,   159,   393,
    1087,   478,  1221,  1228,  1233,  1204,   252,   252,   381,  1235,
     252,   263,   458,  1235,  1219,  1204,  1345,  1346,  1448,  1206,
    1217,  1230,  1231,  1278,   327,  1269,   982,   976,   110,   110,
     126,   242,   856,  1281,  1454,   839,   693,   856,   856,   833,
     649,   827,   173,  1034,  1450,  1113,    63,   189,   406,   943,
    1007,  1012,  1034,  1008,  1009,  1009,   124,  1459,  1450,  1113,
    1280,  1278,  1450,  1278,    12,  1055,  1063,  1064,  1459,  1113,
    1456,  1456,   974,  1334,  1278,   255,  1063,   255,  1450,  1450,
     931,  1064,  1334,   183,   258,   359,   934,  1278,   124,  1459,
    1280,  1280,  1450,  1113,  1265,  1266,  1448,   124,  1278,   866,
    1456,  1113,   867,  1451,  1113,  1113,    81,    83,   124,   147,
     184,   428,   567,   568,   569,   570,   571,   572,   933,   124,
    1278,   124,  1278,   124,  1278,  1278,  1055,   928,     6,   143,
    1067,   937,   938,   939,   940,   941,  1459,     8,   183,  1077,
     429,   942,   943,  1000,   947,   655,   357,   404,    24,   167,
     696,   566,   136,   151,   698,   647,  1581,   647,   406,  1246,
    1247,  1248,  1459,   678,   679,  1278,  1456,  1279,   856,   856,
     836,   374,   206,  1334,   649,   830,   554,    20,   454,   647,
     129,   236,   598,   815,   695,  1597,   122,   241,   423,   531,
     936,  1451,   267,   858,   863,   864,   937,   863,   649,   926,
     683,   685,   687,   655,  1205,  1256,  1358,  1256,  1159,   648,
    1159,   557,   647,   965,   966,   966,   647,   960,   647,   958,
     959,   965,   966,   241,   960,   241,   648,   648,   648,   648,
     648,  1184,  1159,  1159,   648,   648,   649,   648,   378,  1191,
     649,   649,   648,   649,   648,   243,  1176,  1177,   648,   648,
     648,   648,   649,   648,   648,  1159,   648,   190,   648,   648,
     649,   648,   649,   649,   648,  1159,   648,  1159,   648,  1159,
     648,   648,   648,   647,   988,   988,    21,   130,   456,   640,
     990,   991,   992,   649,   649,  1153,  1568,   648,  1562,   655,
    1035,   648,  1198,  1161,   648,   649,   648,  1156,  1181,   648,
    1071,  1072,  1073,   190,   625,  1394,    55,    65,    77,    89,
      90,    91,   105,   325,   342,   453,   469,   532,   550,   759,
     758,   648,   649,  1531,   655,   655,   566,   566,   566,   647,
    1159,   369,  1340,  1130,  1451,  1134,   225,  1137,  1415,   648,
     649,  1156,   873,   390,   890,   891,  1279,   875,  1462,  1149,
    1331,  1332,  1448,  1336,   649,   647,  1327,   648,   648,   649,
     655,  1551,   648,   649,   746,   375,  1531,   193,   193,   193,
    1256,  1256,   145,   382,  1288,  1289,  1294,   598,   243,  1456,
    1459,   655,   648,   648,    79,   584,   421,  1494,  1478,  1480,
    1272,  1272,  1381,  1456,  1456,   680,  1456,   159,   125,  1088,
    1159,   592,   648,  1555,  1229,   652,   252,  1219,  1235,  1235,
     252,   369,   369,   605,   649,  1344,  1333,  1254,  1149,  1159,
    1270,  1446,   827,  1057,   647,   255,   255,  1034,  1009,  1019,
    1034,  1034,   143,   481,  1055,  1068,  1052,   649,  1279,   976,
    1456,  1450,  1076,   625,  1456,  1069,  1055,   649,    21,   130,
    1271,   870,  1055,  1060,  1055,   647,   648,   649,  1459,  1451,
      33,    34,    39,    41,    43,    44,    61,   111,   114,   122,
     141,   158,   184,   186,   199,   200,   241,   271,   280,   281,
     283,   319,   320,   321,   338,   339,   340,   345,   348,   365,
     366,   398,   399,   423,   477,   481,   493,   555,   559,   562,
     563,   564,   565,   611,   612,   636,   948,   951,   952,   953,
     954,   955,   956,   957,  1459,   404,  1159,  1159,   369,   702,
     708,   369,    78,   703,  1459,  1582,    20,  1055,   648,   649,
     648,   649,   647,  1459,   856,   830,  1456,   936,  1604,   369,
     369,   719,   720,   722,  1459,   496,  1451,   913,   648,   225,
     444,   860,  1421,   926,   647,   647,   647,  1459,  1256,  1267,
    1250,  1159,   121,   282,   363,   583,    22,    34,    48,   590,
     974,   984,   985,   986,   363,   363,   648,  1250,  1250,  1159,
      47,   475,  1190,  1159,  1159,  1198,    43,   346,   648,   625,
    1178,  1159,  1250,  1159,  1159,  1159,  1159,   648,   648,   648,
    1279,   648,   998,   993,   991,   993,   994,  1278,  1227,  1560,
    1459,   648,  1198,  1157,  1073,  1072,  1395,   421,  1535,   625,
    1538,   642,   642,  1531,  1531,  1531,   124,  1159,  1338,  1339,
     146,  1137,   261,  1421,   877,   648,   210,   255,   892,   648,
     649,   648,  1153,   649,  1333,  1337,  1338,  1335,  1329,  1327,
    1444,  1459,   867,  1459,   193,  1531,  1531,  1531,  1273,   206,
    1261,  1458,  1458,   654,  1290,  1291,  1461,   483,   642,  1479,
    1484,  1456,   159,   395,  1089,  1559,  1254,  1207,  1204,  1219,
     252,   252,  1204,  1219,  1210,  1209,  1211,  1346,  1256,  1339,
    1244,  1245,  1153,   649,  1271,   391,   647,  1058,  1159,  1034,
    1019,   647,  1018,  1018,   124,   124,   946,  1108,  1064,   981,
     547,   948,  1051,  1266,  1061,  1063,  1053,  1398,   939,   647,
    1001,   965,   965,   966,   960,   958,   402,   949,   958,   958,
     986,    61,   611,   952,   954,   986,   986,    61,   612,   612,
     615,   958,   950,   966,   960,   960,   986,   965,   966,    26,
      72,    76,    78,   124,   362,   369,   406,   477,   529,   968,
     969,   970,   999,  1012,  1165,   615,   965,   986,    34,   965,
     987,   965,   965,   966,   647,   959,   967,   655,  1250,   491,
    1456,   142,  1048,   648,   649,  1583,  1584,   648,  1247,   679,
     692,   496,   234,   243,   383,   723,   724,   725,   726,  1155,
     468,   648,   649,   721,  1456,   648,   648,   924,    20,   916,
    1032,  1033,  1459,  1032,  1032,   268,  1277,   648,   648,   648,
     648,   648,    34,    22,   590,   974,    34,   975,   648,   649,
     648,   648,   648,  1192,  1438,   648,   648,   649,   648,   333,
     257,   416,   648,   648,   648,   648,   648,   648,   989,   648,
     649,   935,  1148,  1273,  1555,   648,   174,   277,   204,   446,
    1536,  1536,  1536,   648,   649,  1341,   240,   647,   880,   874,
     893,  1459,   891,   915,  1332,  1339,   648,  1554,  1531,    47,
     211,  1258,  1295,  1461,   649,   333,  1456,   159,  1222,   369,
    1213,  1219,  1219,   369,  1215,  1159,  1159,   647,  1267,  1242,
    1243,  1232,  1446,  1279,   890,   648,   647,   647,  1032,   647,
     647,   114,   559,   562,   640,   641,  1440,  1441,  1077,  1451,
     968,  1113,  1062,  1100,   648,  1002,  1459,   310,  1003,   489,
     596,   637,   962,   963,   964,   647,   962,   962,   986,   615,
     962,   647,   986,   962,   980,   124,   147,   184,  1456,   972,
     973,  1440,   598,   124,   124,   138,   323,   970,   255,   255,
     362,   986,   987,   986,   987,   962,   363,   962,  1459,   697,
     704,   705,  1459,   473,   647,  1585,  1588,   648,  1456,   648,
     649,   721,  1592,   696,  1598,   722,   948,   971,   859,   863,
     647,   913,   648,   649,  1271,   647,   648,   648,  1276,   975,
     987,   363,  1193,  1446,  1159,   333,   172,   648,  1278,  1152,
    1152,   375,    64,   250,   355,   515,   534,   631,  1527,  1528,
     625,  1537,  1537,  1537,  1339,   255,   547,  1155,   883,   647,
     609,   894,   935,  1262,  1446,  1259,  1267,   974,   977,  1291,
    1456,  1560,  1212,   605,  1214,   605,  1249,  1277,   188,   225,
     604,  1237,  1238,  1241,   935,  1271,   648,  1032,  1032,   648,
    1032,  1032,  1442,  1442,   867,  1070,   240,   648,   649,   194,
     389,   490,   369,  1004,   964,  1036,  1438,  1036,   972,   610,
     517,   699,    53,    68,   181,   224,   251,   262,   372,   455,
     706,   764,   766,   767,   768,   770,   771,   772,   773,   774,
     775,   777,   785,   786,   789,   800,   803,   805,   806,  1454,
    1460,  1464,  1589,   647,  1587,  1588,   625,  1590,  1586,  1605,
     725,  1459,  1451,   701,   702,   454,   981,  1554,   860,   913,
     861,    78,   254,  1020,  1023,  1026,  1027,  1028,  1033,   363,
     625,  1021,  1025,  1027,  1030,  1022,  1024,  1027,  1029,   648,
     649,  1271,   648,   648,   554,   554,   554,    17,  1526,   204,
     311,   312,   316,   317,  1539,  1540,   598,  1451,   887,   535,
     888,   885,   886,  1459,   243,   264,    78,   110,   229,   313,
     331,   354,   545,   910,   911,   912,  1375,   626,   627,   649,
    1263,  1271,  1159,  1273,   976,  1296,  1223,  1159,   647,  1159,
     647,   648,  1008,  1008,  1238,   648,   648,  1020,   648,   648,
    1077,   647,  1459,   129,   598,   648,   649,   648,  1159,   154,
     700,   787,   790,  1459,   193,   353,   778,   765,  1460,  1460,
    1459,   769,   662,   284,   443,   624,   809,    31,   807,   656,
    1144,  1587,   648,    52,    63,   274,  1551,   710,   971,   190,
     698,  1599,   648,  1551,  1456,  1334,   684,  1028,  1271,   648,
     388,   686,  1030,   688,  1029,  1446,  1527,   375,  1278,  1278,
    1278,  1278,  1540,  1347,  1348,  1448,  1217,  1156,  1279,   648,
     649,   896,   556,  1334,   135,   135,  1334,  1334,  1334,  1334,
     647,   905,   912,   157,  1446,   408,  1284,    74,  1422,  1555,
    1249,  1249,   190,  1236,  1236,  1000,  1020,  1021,  1022,   890,
      51,   359,   451,   481,  1005,  1005,   986,  1438,   986,  1159,
    1159,   622,   792,   796,   193,  1459,   780,   781,  1159,   728,
     763,   764,   766,   768,   770,   772,   773,   774,   775,   777,
     785,   800,   803,   805,   728,   810,   808,   801,   804,   648,
    1554,    63,   375,    63,   133,   711,   712,  1165,  1606,  1155,
     703,   971,   862,  1278,  1071,  1454,  1071,  1071,  1271,   649,
    1333,  1416,   648,   884,   886,   647,   898,   900,   895,  1456,
    1334,  1334,  1281,  1281,  1279,  1461,   536,   906,   907,  1334,
    1271,    14,   152,   163,   376,   553,  1423,  1424,   270,  1425,
     648,   648,   206,   252,   378,  1240,  1239,   648,     5,   124,
     362,   369,   369,   788,   797,   149,   796,   799,   240,   153,
    1159,   153,   763,   653,   597,  1159,   729,   809,   807,   375,
     375,   133,   763,  1593,   142,  1600,  1554,  1348,  1339,   977,
     888,   647,   899,   900,   901,   318,   897,   900,  1456,  1456,
     908,   648,   649,   931,  1285,    47,    47,   152,    47,  1424,
     516,   553,  1426,  1427,    47,    47,   647,   647,   598,   129,
     622,   791,   793,  1159,   728,   153,   776,   224,   782,   284,
     653,   812,   811,   123,   727,   730,   802,  1460,   802,   148,
     704,   710,  1417,   648,   649,   318,   903,   904,  1162,   909,
    1461,   907,   647,  1438,  1438,    47,  1438,    47,    47,  1427,
    1246,  1248,  1005,  1005,   794,   793,   799,   798,    53,   779,
    1459,   557,  1159,   142,    94,   171,   734,   760,  1459,   153,
     763,   653,   464,  1601,   462,  1428,   900,   649,   902,   910,
     363,  1286,  1287,  1438,  1438,  1438,   648,   648,  1159,   153,
     557,   649,   728,   813,   728,   209,   649,   731,    85,   104,
     653,  1594,   763,   222,  1422,   904,   648,   648,   649,   795,
      53,   728,  1459,   783,   153,   153,   190,  1459,   971,   190,
     190,   763,    47,  1425,  1287,   557,   149,   150,   784,   443,
     624,   732,   124,   761,   737,   738,  1278,   733,  1438,   225,
    1429,   728,   728,   780,   501,   503,   735,   736,   737,   740,
    1165,  1459,   762,  1138,   363,   647,  1431,   649,   763,   192,
    1159,   270,   462,  1430,   648,   654,  1432,  1433,  1448,   481,
    1434,   736,  1461,   648,   649,  1435,  1436,  1448,  1433,   649,
    1333,  1436,  1155,  1339,  1156
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (class THD *YYTHD);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1987 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1999 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 2024 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 2098 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2113 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 2133 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2140 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2150 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2157 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2172 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2184 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2192 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2203 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2216 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2226 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2230 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2234 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2238 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2243 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2247 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2251 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2256 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              Lex_input_stream *lip= YYLIP;
              const char *start= lip->get_tok_start();
              const char *msg= YYTHD->strmake(start, lip->get_ptr() - start);
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       msg, MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2269 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2274 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2278 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2282 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2286 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2290 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2294 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2299 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2303 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2308 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2339 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2344 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2361 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2375 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2379 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2395 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2399 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2411 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_SHARED))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2437 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2456 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2461 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2465 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2468 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2473 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2477 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2480 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2485 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2489 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2491 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2496 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2503 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2509 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2511 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2515 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2519 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2523 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2534 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2548 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2556 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2560 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2564 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2569 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2573 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2580 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2600 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2611 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2618 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2624 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2626 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2632 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2638 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2647 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2654 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2662 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2668 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2674 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2680 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2688 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2690 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2697 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2740 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2769 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2784 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2798 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2816 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2817 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2822 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2828 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2830 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2832 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2834 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2836 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2838 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2840 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2845 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2846 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2847 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2852 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2856 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2863 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2871 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2887 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2891 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2909 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2929 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2970 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2998 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2999 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 3000 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 3001 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 3005 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 3010 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 3016 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 3020 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 3046 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 3057 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 3130 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3146 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3186 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3220 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3229 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3292 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3293 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3299 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3301 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3306 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3329 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3344 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3365 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3366 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3371 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3375 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3388 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3394 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3400 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3409 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3424 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3450 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3455 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3457 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3462 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3470 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3479 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3498 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3500 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3518 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3524 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3526 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3528 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3530 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3532 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3534 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3536 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3538 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3540 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3542 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3544 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3546 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3551 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3567 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3582 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3584 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3589 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3595 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3604 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3610 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3619 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3627 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3656 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3665 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3667 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3676 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3681 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3687 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3696 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3704 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3706 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3708 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3710 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3712 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3714 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3716 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3718 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3720 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3722 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3724 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3726 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3728 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3733 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3753 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3776 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3778 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3780 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3801 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3803 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3811 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3868 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3878 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3924 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3935 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3947 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 4006 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 4056 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 4080 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 4101 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 4106 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 4136 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 4154 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 4174 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 4183 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 4219 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 4238 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 4261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4272 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4316 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4323 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4330 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4347 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4356 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4397 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4405 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4414 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4450 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4458 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4476 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4494 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4513 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4514 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4519 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4535 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4563 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4571 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4586 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4637 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4646 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4684 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4700 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4709 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4750 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4752 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4757 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4759 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4761 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4795 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4797 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4807 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4813 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4836 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4934 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4942 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4950 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4958 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4970 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4982 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4987 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4992 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 5000 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 5008 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 5016 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 5024 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 5032 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 5040 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 5048 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 5061 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 5074 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 5088 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 5093 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 5105 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 5107 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 5157 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 5160 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 5162 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 5177 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 5196 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 5199 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 5200 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 5204 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 5206 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 5207 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 5209 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 5210 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 5215 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 5251 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 5257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 5275 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 5294 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 5306 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 5315 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 5322 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 5323 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 5325 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 5327 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 5329 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 5331 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 5335 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 5337 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 5342 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 5344 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 5360 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 5361 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 5365 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 5366 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 5371 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 5390 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 5400 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 5411 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5419 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5421 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5436 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5438 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5439 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5442 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5447 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5451 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5452 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5457 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5475 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5490 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5492 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5507 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5523 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5544 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5545 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5550 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5569 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5574 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5583 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5605 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5620 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5637 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5642 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5663 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5668 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5697 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5708 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5709 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5714 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5725 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5727 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5750 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5751 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5756 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5769 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5789 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5803 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5828 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5829 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5834 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5866 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5871 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5875 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5876 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5880 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5881 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5886 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5888 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5894 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5896 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5898 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5900 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5902 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5904 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5913 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5928 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5932 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5942 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5943 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5947 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5948 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5952 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5953 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5957 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5958 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5962 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5963 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5967 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5968 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5972 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5976 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5977 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5998 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 6003 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 6008 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 6013 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 6018 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 6023 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 6028 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 6033 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 6048 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 6054 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 6069 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 6074 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 6089 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 6095 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 6113 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 6118 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 6123 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 6128 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 6133 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 6138 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 6142 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 6166 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 6171 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 6176 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 6181 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 6183 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 6185 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 6187 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 6193 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 6201 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 6219 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 6236 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 6262 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 6279 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 6280 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 6281 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 6282 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 6283 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 6284 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 6285 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_UNCOMPRESSED; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 6286 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_ZLIB; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 6287 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_QUICKLZ; }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 6288 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_LZMA; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 6289 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_FAST; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 6290 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_SMALL; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 6294 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 6295 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 6296 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 6300 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 6305 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 6306 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 6307 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 6308 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 6314 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 6332 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 6339 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 6345 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 6351 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 6357 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (((yyvsp[(1) - (8)].lex_str).length != 0)
                 && ((enum Key::Keytype)(yyvsp[(2) - (8)].key_type) == (Key::CLUSTERING | Key::MULTIPLE)))
            {
              /* Forbid "CONSTRAINT c CLUSTERING" */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 6369 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 6388 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 6403 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 6404 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 6408 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 6413 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 6422 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 6435 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 6436 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 6437 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 6439 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 6444 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 6448 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 6453 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 6458 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 6462 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 6467 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6472 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6478 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6483 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6489 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6493 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6498 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6503 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6521 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6523 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6525 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6541 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6543 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6548 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6553 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6565 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6570 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6575 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6580 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6582 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6584 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6586 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6588 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6590 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6592 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6594 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6596 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6598 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6600 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6602 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6604 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6606 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6614 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6615 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6617 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6623 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6624 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6625 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6626 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6630 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6634 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6635 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6639 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6640 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6644 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6645 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6646 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6647 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6648 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6652 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6653 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6654 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6655 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6656 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6661 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6666 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6668 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6673 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6675 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6677 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6682 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6691 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6692 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6696 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6697 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6699 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6706 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6707 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6711 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6712 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6716 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6717 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6718 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6722 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6723 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6724 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6725 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6728 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6729 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6733 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6734 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6738 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6739 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6743 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6748 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6749 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6750 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6751 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6752 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6754 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6760 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6766 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (1)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_FLAG; 
            if ((yyvsp[(1) - (1)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6775 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (2)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_KEY_FLAG; 
            if ((yyvsp[(1) - (2)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6783 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6785 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6798 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6804 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6810 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6816 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6826 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6835 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6856 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6865 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6869 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6870 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6875 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6882 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6886 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6887 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6891 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6892 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6897 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6905 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6909 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6910 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6915 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6922 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6923 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6927 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6928 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6932 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6933 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6938 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6940 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6944 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6951 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6960 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6965 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6972 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6975 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6976 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6978 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6983 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6990 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6991 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6996 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 7004 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 7008 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 7009 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 7013 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 7016 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 7017 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 7018 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 7019 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 7024 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 7032 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 7038 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 7039 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 7044 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 7053 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 7054 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 7058 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 7059 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 7073 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 7080 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 7086 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 7093 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 7105 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 7107 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 7109 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 7111 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 7116 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 7122 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 7128 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 7135 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 7142 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 7150 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 7151 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 7152 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 7153 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 7154 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 7158 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 7162 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 7163 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= (yyvsp[(1) - (2)].key_type); }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 7168 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 7169 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 7173 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 7178 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 7179 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 7180 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 7184 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 7190 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (1)].key_type) | Key::MULTIPLE);
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 7194 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type);
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 7201 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type); 
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 7205 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 7209 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 7215 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 7219 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::CLUSTERING; }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 7223 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 7228 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 7240 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 7257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 7262 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 7267 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 7287 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 7288 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 7293 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 7294 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 7309 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 7321 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 7322 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 7323 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 7327 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 7328 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 7333 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 7339 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 7352 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 7353 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 7357 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 7358 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 7362 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 7363 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 7371 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 7404 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 7416 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 7421 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 7430 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 7441 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 7452 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 7459 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 7470 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7477 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7488 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7495 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7507 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7509 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7529 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7542 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7547 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7557 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7562 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7569 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7576 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7581 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7588 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7589 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7590 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7591 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7595 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7597 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7608 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7609 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7613 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7614 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7620 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7628 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7650 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7655 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7662 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7676 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7688 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7701 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7714 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7721 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7734 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7761 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7768 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7776 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7788 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7794 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7799 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7806 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7825 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7829 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7836 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7837 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7842 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7862 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7871 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7875 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7880 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7885 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7891 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7895 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7904 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7916 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7920 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7929 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7938 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7947 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7956 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7962 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7968 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7977 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7986 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 8014 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 8035 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 8045 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 8049 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 8066 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 8071 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 8082 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 8087 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 8097 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 8098 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 8102 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 8103 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 8107 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 8108 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 8109 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 8113 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 8115 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 8120 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 8127 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 8128 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 8129 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 8130 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 8135 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 8147 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 8164 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 8174 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 8190 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 8194 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 8201 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 8205 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 8212 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 8216 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
            Lex->value_list.empty();
            Lex->value_list.push_front((yyvsp[(6) - (6)].item));
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 8222 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 8226 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 8237 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 8241 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 8247 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 8251 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 8257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 8261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 8267 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 8271 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 8278 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 8282 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 8289 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 8293 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 8300 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 8304 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 8310 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 8312 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 8339 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 8344 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 8349 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 8356 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 8363 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 8367 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 8368 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 8369 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 8374 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 8384 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 8395 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 8396 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 8400 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 8401 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 8405 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 8406 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 8407 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 8412 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 8422 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 8434 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 8442 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 8457 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 8468 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 8469 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 8473 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 8474 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 8478 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 8479 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 8480 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 8481 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 8482 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 8483 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 8488 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 8498 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 8509 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 8510 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 8511 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 8516 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8520 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8522 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8529 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 8534 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 8547 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 8560 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 8564 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8583 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8593 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8602 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8603 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8608 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8614 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 8629 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8639 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 8649 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8656 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8667 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8673 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8674 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8684 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8698 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8708 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8717 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8736 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8744 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8751 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8761 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8776 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8793 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8853 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8859 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8871 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8886 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8893 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8917 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8923 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8929 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8930 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8931 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8932 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8933 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8937 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8938 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8944 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8995 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 9002 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 9045 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 9051 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 9057 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 9063 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 9069 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 9075 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 9081 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 9091 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 9097 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 9103 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 9109 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 9115 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 9125 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 9131 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 9141 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 9147 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 9155 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 9161 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 9171 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 9177 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 9186 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 9196 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 9202 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 9212 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 9218 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 9231 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 9237 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 9243 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 9249 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 9255 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 9261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 9267 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 9273 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 9279 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 9285 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 9291 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 9297 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 9303 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 9309 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 9338 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 9339 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 9340 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 9341 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 9342 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 9343 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 9347 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 9348 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 9358 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 9374 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 9380 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 9384 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 9390 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 9396 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 9402 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 9408 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 9410 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 9417 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 9424 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 9430 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 9471 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 9480 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 9487 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 9495 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 9501 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 9508 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 9514 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 9528 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 9536 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 9551 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 9557 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 9563 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 9571 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 9577 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9583 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9589 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9595 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9610 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 9628 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9634 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 9640 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9646 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9652 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9658 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9664 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9670 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9676 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9682 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9688 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9694 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9700 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9706 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9712 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9718 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9726 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9747 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9754 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9760 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9767 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9775 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9782 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9788 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9794 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9800 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9805 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9811 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9818 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9824 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9830 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9836 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9842 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9848 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9866 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9872 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9878 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9885 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9892 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9907 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9913 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9919 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9925 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9931 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9938 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9944 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9950 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9956 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9962 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9968 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9975 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9988 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9994 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 10000 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 10006 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 10012 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 10020 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 10026 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 10038 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 10044 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 10050 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 10058 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 10068 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 10074 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 10090 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 10096 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 10103 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 10110 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 10117 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 10124 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 10131 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 10135 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 10154 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 10173 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 10227 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 10267 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 10269 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 10273 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 10274 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 10278 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 10279 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 10283 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 10284 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 10289 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 10296 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 10304 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 10330 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 10336 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 10342 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 10348 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 10354 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 10360 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 10369 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 10375 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 10377 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 10379 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 10385 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 10396 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 10402 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 10408 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 10414 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 10420 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 10426 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 10432 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 10438 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 10444 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 10450 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 10454 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 10469 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 10477 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 10484 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 10495 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 10503 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 10518 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 10519 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 10524 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 10529 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 10535 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 10552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 10554 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 10559 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10568 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10576 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10578 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10580 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10582 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10584 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10586 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10588 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10590 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10592 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10594 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10596 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 10600 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 10601 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10606 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10613 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10620 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10621 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10626 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10633 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10640 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10641 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10645 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10646 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10651 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10659 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10669 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10671 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10679 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10690 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10691 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10697 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10699 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10719 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10721 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10724 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10732 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10739 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10747 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10755 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10759 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10761 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10769 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10777 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10785 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10789 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10795 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10805 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10813 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10822 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10826 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10833 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10843 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10844 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10845 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10853 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10859 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10873 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10878 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10889 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10929 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 11002 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 11012 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 11017 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 11025 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 11037 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 11056 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 11064 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 11073 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 11079 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 11095 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 11112 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 11119 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 11124 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 11149 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 11150 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 11155 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 11158 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 11159 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 11160 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 11164 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 11165 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 11170 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 11175 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 11188 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 11192 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 11197 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 11198 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 11203 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 11205 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 11215 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 11226 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 11238 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 11239 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 11240 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 11241 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 11242 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 11243 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 11244 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 11245 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 11246 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 11247 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 11248 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 11249 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 11253 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 11254 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 11255 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 11256 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 11257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 11258 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 11259 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 11260 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 11261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 11265 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 11266 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 11267 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 11268 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 11278 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 11280 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 11293 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 11295 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 11299 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 11311 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 11315 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 11326 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 11331 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 11353 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 11355 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 11359 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 11361 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 11381 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 11421 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 11440 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 11475 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 11477 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 11481 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11482 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 11483 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11488 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11494 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 11498 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11499 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 11504 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11515 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11522 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11529 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11539 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11566 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11570 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11576 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11582 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11591 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11596 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            if (Select->select_limit->fixed &&
                Select->select_limit->val_int() != 0)
            {
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            }
            sel->explicit_limit= 1;
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11609 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11610 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11611 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11612 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11613 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11614 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11618 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11619 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11620 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11621 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11626 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11627 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11628 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 11629 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 11630 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11634 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11635 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 11636 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11637 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11642 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11653 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11686 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11688 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11692 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11700 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11712 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11718 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11723 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11728 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11747 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11786 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11798 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11806 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11809 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11832 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11838 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11849 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11858 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11859 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11860 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11875 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11877 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11884 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11905 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11926 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11938 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11942 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11950 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11952 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11958 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11965 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11970 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11975 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11990 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 12001 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 12019 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 12029 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 12030 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 12034 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 12035 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 12058 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 12066 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 12071 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 12076 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 12083 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 12088 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 12093 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 12105 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 12107 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 12119 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 12123 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 12125 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 12140 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 12141 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 12146 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 12154 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 12155 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 12156 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 12158 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 12168 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 12169 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 12173 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 12174 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 12176 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 12177 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 12179 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 12180 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 12195 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 12204 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 12205 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 12209 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 12210 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 12215 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 12220 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 12228 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 12234 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 12239 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 12246 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 12248 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 12257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 12265 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 12273 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 12291 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 12301 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 12314 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 12323 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 12324 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 12331 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 12346 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 12357 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 12359 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 12365 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 12370 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 12376 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 12389 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 12402 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 12417 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 12418 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 12422 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 12423 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 12427 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 12428 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 12429 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 12434 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 12445 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 12470 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 12474 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 12478 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 12482 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 12486 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 12490 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 12494 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 12498 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 12502 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 12509 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 12513 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 12522 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 12530 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12537 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12544 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12560 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 12568 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12576 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12584 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12591 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12593 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12595 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12604 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12608 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 12612 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12617 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12631 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12638 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12643 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12645 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 12647 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12649 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12651 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12659 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 12670 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12678 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12680 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12688 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12695 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12702 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12712 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12719 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12725 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12734 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12742 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12746 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12751 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            WARN_DEPRECATED(YYTHD, "SHOW SLAVE STATUS NOLOCK", "SHOW SLAVE STATUS NONBLOCKING");
            Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12756 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_SLAVE_NOLOCK_STAT;
          }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12760 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12767 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12774 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           Lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_THREAD_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12781 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12788 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12795 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12802 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12809 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12815 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12822 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12829 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12834 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12839 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12847 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12849 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12851 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12865 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12866 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12870 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12871 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12880 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12881 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12885 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12886 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12892 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12899 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12909 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12920 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12924 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12926 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12944 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12949 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12955 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12961 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12982 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12983 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12985 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12999 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 13006 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 13011 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 13020 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 13021 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 13026 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 13028 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 13039 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 13047 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 13062 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 13067 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 13069 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 13071 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 13073 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 13075 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 13077 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 13079 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 13081 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 13083 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 13085 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 13087 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 13089 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 13091 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 13093 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_THREAD_STATS; }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 13095 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 13097 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 13099 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 13101 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 13103 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_FLUSH_PAGE_BITMAPS; }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 13107 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 13108 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 13113 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 13118 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 13127 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 13128 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 13129 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 13130 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 13132 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type |= REFRESH_RESET_PAGE_BITMAPS; }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 13136 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 13137 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 13142 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 13148 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 13154 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front(new Item_uint((yyvsp[(3) - (3)].ulonglong_number)));
            lex->type= PURGE_BITMAPS_TO_LSN;
          }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 13165 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 13169 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 13179 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
            Lex->sql_command= SQLCOM_PURGE_ARCHIVE;
          }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 13184 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_ARCHIVE_BEFORE;
          }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 13196 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 13205 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 13206 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 13207 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 13214 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 13225 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 13237 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 13247 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 13257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 13261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 13265 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 13266 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 13270 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 13271 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 13275 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 13277 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 13288 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 13292 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 13293 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 13294 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 13309 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 13314 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 13321 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 13326 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 13344 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 13349 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 13356 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 13358 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 13363 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 13370 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 13372 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 13376 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 13377 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 13378 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 13383 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 13385 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 13389 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 13391 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 13399 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 13400 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 13410 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 13430 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 13454 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 13466 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13477 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 13496 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13504 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13516 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13531 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13551 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13554 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13562 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13563 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13564 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13566 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13573 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13579 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13585 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13591 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13597 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13626 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13657 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13667 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13677 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13683 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13692 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13704 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13710 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13716 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13731 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13732 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13737 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13746 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13761 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13766 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13816 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13821 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13838 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13843 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_cur_instr_trig_field_items.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13923 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13948 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13978 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13980 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13996 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 14005 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 14010 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 14016 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 14022 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 14032 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 14038 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 14047 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 14056 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 14058 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 14088 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 14101 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 14117 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 14133 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 14149 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 14151 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 14161 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 14163 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 14173 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 14174 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 14175 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 14180 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 14207 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 14240 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 14254 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 14255 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 14256 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 14257 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 14258 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 14259 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 14260 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 14261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 14262 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 14263 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 14264 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 14265 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 14266 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 14267 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 14268 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 14269 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 14270 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 14271 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 14272 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 14273 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 14274 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 14275 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 14276 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 14277 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 14278 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 14279 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 14280 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 14281 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 14282 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 14283 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 14284 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 14285 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 14286 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 14287 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 14288 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 14289 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 14290 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 14291 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 14292 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 14293 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 14294 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 14295 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 14296 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 14297 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 14298 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 14299 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 14300 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 14301 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 14302 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 14303 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 14313 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 14314 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 14315 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 14316 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 14317 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 14318 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 14319 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 14320 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 14321 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 14322 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 14323 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 14324 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 14325 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 14326 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 14327 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 14328 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 14329 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 14330 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 14331 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 14332 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 14333 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 14334 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 14335 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 14336 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 14337 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 14338 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 14339 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 14340 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 14341 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 14342 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 14343 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 14344 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 14345 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 14346 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 14347 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 14348 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 14349 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 14350 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 14351 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14352 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14353 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14354 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 14355 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 14356 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14357 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14358 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14359 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14360 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14365 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14366 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14367 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14368 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14369 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14370 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14371 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14372 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14373 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14374 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14375 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14376 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14377 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14378 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14379 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14380 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14381 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14382 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14383 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14384 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14385 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14386 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14387 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14388 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14389 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14390 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14391 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14392 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14393 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14394 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14395 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14396 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14397 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14398 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14399 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14400 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14401 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14402 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14403 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14404 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14405 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14406 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14407 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14408 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14409 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14410 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14411 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14412 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14413 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14414 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14415 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14416 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14417 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14418 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14419 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14420 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14421 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14422 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14423 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14424 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14425 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14426 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14427 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14428 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14429 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14430 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14431 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14432 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14433 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14434 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14435 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14436 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14437 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14438 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14439 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14440 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14441 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14442 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14443 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14444 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14445 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14446 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14447 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14448 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14449 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14450 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14451 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14452 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14453 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14454 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14455 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14456 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14457 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14458 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14459 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14460 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14461 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14462 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14463 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14464 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14465 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14466 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14467 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14468 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14469 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14470 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14471 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14472 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14473 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14474 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14475 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14476 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14477 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14478 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14479 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14480 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14481 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14482 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14483 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14484 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14485 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14486 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14487 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14488 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14489 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14490 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14491 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14492 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14493 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14494 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14495 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14496 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14497 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14498 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14499 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14500 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14501 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14502 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14503 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14504 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14505 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14506 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14507 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14508 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14509 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14510 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14511 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14512 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14513 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14514 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14515 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14516 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14517 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14518 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14519 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14520 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14521 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14522 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14523 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14524 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14525 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14526 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14527 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14528 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14529 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14530 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14531 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14532 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14533 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14534 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14535 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14536 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14537 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14538 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14539 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14540 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14541 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14542 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14543 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14544 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14545 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14546 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14547 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14548 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14549 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14550 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14551 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14552 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14553 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14554 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14555 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14556 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14557 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14558 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14559 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14560 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14561 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14562 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14563 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14564 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14565 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14566 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14567 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14568 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14569 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14570 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14571 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14572 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14573 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14574 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14575 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14576 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14577 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14578 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14579 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14580 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14581 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14582 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14583 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14584 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14585 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14586 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14587 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14588 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14589 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14590 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14591 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14592 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14593 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14594 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14595 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14596 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14597 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14598 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14599 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14600 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14601 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14602 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14603 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14604 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14605 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14606 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14607 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14608 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14609 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14610 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14611 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14612 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14613 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14614 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14615 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14616 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14617 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14618 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14619 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14620 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14621 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14622 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14623 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14624 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14625 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14626 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14627 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14628 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14629 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14630 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14631 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14643 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14655 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14657 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
	    /* Don't clear var_list in the case of recursive statement */
	    if (!lex->set_statement)
              lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            lex->set_statement= true;
            sp_head *sp= lex->sphead;
            if (sp && !sp->is_invoked())
            {
              sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_START);
              sp->m_parser_data.set_option_start_ptr(YY_TOKEN_END);
            }
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14675 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14690 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14696 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14700 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14705 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14715 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14721 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14735 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14739 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14744 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14748 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14757 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14765 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14766 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14767 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14771 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14772 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14773 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14774 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14778 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14779 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14780 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14781 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14787 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            /*
              Ignore SET STATEMENT variables list on slaves because system
              variables are not replicated except certain variables set the
              values of whose are written to binlog event header and nothing
              additional is required to set them.
	    */
            if (!thd->slave_thread || !lex->set_statement)
	    {
              if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
              {
                /* It is a system variable. */
                if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                  MYSQL_YYABORT;
              }
              else
              {
                /*
                  Not in trigger assigning value to new row,
                  and option_type preceeding local variable is illegal.
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
	  }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14820 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14827 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14920 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14931 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14944 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14960 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14973 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14995 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 15030 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 15072 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 15100 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 15146 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 15167 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 15185 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 15202 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 15203 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 15207 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 15208 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 15209 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 15210 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 15214 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 15216 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 15234 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 15246 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 15247 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 15249 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 15255 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 15261 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 15272 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 15283 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_BINLOG_FOR_BACKUP;
          }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 15287 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_TABLES_FOR_BACKUP;
          }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 15291 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 15295 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 15310 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 15322 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 15323 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 15325 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 15329 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 15334 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 15345 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_UNLOCK_BINLOG;
          }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 15349 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 15360 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 15376 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 15392 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 15410 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 15430 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 15431 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 15435 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 15436 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 15440 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 15441 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 15442 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 15443 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 15445 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 15452 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 15458 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 15459 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 15460 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 15461 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 15462 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 15468 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 15469 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 15474 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 15479 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 15489 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 15499 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 15503 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 15511 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 15512 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 15518 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 15524 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 15535 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 15545 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 15559 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 15566 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 15584 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 15585 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 15587 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 15588 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 15590 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 15591 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 15593 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 15594 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 15595 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 15596 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 15597 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 15598 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 15599 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 15600 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 15601 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 15602 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 15603 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 15604 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 15605 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 15606 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 15607 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 15608 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 15609 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 15610 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 15611 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 15612 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15613 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15614 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 15615 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 15616 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 15617 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 15618 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15619 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15620 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15624 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 15625 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15635 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 15645 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15655 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 15668 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 15683 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 15696 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15709 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 15721 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 15726 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 15734 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 15739 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 15747 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 15765 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            if (!strcmp((yyvsp[(5) - (5)].lex_str).str, ""))
            {
              String *password= new (YYTHD->mem_root) String ((const char *)"",
                                     YYTHD->variables.character_set_client);
              check_password_policy(password);
            }
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 15785 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15797 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 15810 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 15818 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15832 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15861 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15865 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15869 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15873 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15879 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15884 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15885 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15889 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15890 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15894 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15896 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15902 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15908 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 15914 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15923 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15928 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15932 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15933 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 15938 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15939 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 15940 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15945 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15946 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 15947 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15951 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15952 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15957 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15969 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15979 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15988 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15997 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 16010 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 16016 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 16021 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 16031 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 16032 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 16033 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 16037 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 16038 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 16042 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 16058 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 16071 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 16072 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 16073 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 16078 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 16082 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 16091 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 16097 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 16106 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 16112 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 16133 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 16161 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 16163 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 16170 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 16171 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 16172 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 16174 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 16180 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 16185 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 16196 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 16198 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 16200 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 16233 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 16247 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 16260 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 16262 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 16264 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 16269 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 16274 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 16276 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 16278 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 16283 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 16285 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 16287 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 16292 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 16309 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 16315 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 16320 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 16327 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 16336 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 16353 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 16374 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 16383 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 16387 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 16394 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 16396 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 16398 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 16400 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 16417 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 16423 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 16428 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 16458 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 16493 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 16511 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 16534 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 16566 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 16571 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 16579 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 16602 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 16610 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 16668 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 16688 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 16701 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 16711 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 16719 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 16733 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 16737 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 16741 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 16745 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2706:

/* Line 1455 of yacc.c  */
#line 16749 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 16753 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 16760 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 16767 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 16774 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 16783 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 16784 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 16788 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 16789 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 16790 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 16794 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 16795 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 16800 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 16802 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 16807 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {}
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 16808 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 16813 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 16823 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 42980 "/var/lib/jenkins/jobs/percona-server-5.6-source-tarballs/workspace/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (YYTHD, yymsg);
	  }
	else
	  {
	    yyerror (YYTHD, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, YYTHD);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



