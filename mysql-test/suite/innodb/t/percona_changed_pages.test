###########################################
# Test for I_S.INNODB_CHANGED_PAGES table #
###########################################

--source include/have_innodb.inc

# Delete any existing bitmaps
--source include/restart_mysqld.inc
RESET CHANGED_PAGE_BITMAPS;

--disable_warnings
DROP TABLE IF EXISTS T1, ICP_COPY;
--enable_warnings

let $old_max_changed_pages= `SELECT @@GLOBAL.INNODB_MAX_CHANGED_PAGES`;

# In order to test multiple bitmap file support we need to ensure that two things
# happen: 1) InnoDB checkpoints; 2) bitmap file rotation.  The best way to ensure
# both is to restart the server.

--source include/restart_mysqld.inc

CREATE TABLE T1 (F1 CHAR(255)) ENGINE=INNODB;

let $t1_space_id =
	`SELECT SPACE
		FROM INFORMATION_SCHEMA.INNODB_SYS_TABLES
		WHERE
		INFORMATION_SCHEMA.INNODB_SYS_TABLES.NAME LIKE 'test/t1'`;

--source include/restart_mysqld.inc
                
let $r1_start= `SELECT MIN(START_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;
let $r1_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--disable_query_log
--echo 1st interval end LSN greater than interval start LSN:
eval SELECT $r1_end > $r1_start AS should_be_1;
--enable_query_log

# Restarts in a row without workload for T1 or any other table to verify that empty bitmaps
# are handled correctly.
--source include/restart_mysqld.inc
--source include/restart_mysqld.inc
--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant across the previous restarts
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
--enable_query_log

INSERT INTO T1 VALUES (REPEAT('A', 255));

--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant after workload
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
let $r2_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--echo log record interval end LSN should have advanced after workload
eval SELECT $r2_end>$r1_end AS should_be_1;

--echo At least some of the records should be attributed to T1
eval SELECT COUNT(*) > 0 AS should_be_1
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID=$t1_space_id AND START_LSN>=$r1_end;
--enable_query_log

INSERT INTO T1 VALUES (REPEAT('B', 255));

--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant after workload
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
let $r3_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--echo log record interval end LSN should have advanced after workload
eval SELECT $r3_end>$r2_end AS should_be_1;
--enable_query_log

INSERT INTO T1 VALUES (REPEAT('C', 255));

--source include/restart_mysqld.inc

--disable_query_log
--echo log record interval start LSN should remain constant after workload
eval SELECT MIN(START_LSN)=$r1_start AS should_be_1 FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;
let $r4_end= `SELECT MAX(END_LSN) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES`;

--echo log record interval end LSN should have advanced after workload
eval SELECT $r4_end>$r3_end AS should_be_1;

--echo At least some of the records should be attributed to T1
eval SELECT COUNT(*) > 0 AS should_be_1
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID=$t1_space_id AND START_LSN>=$r2_end;


###################################################################
# Gather data for condition pushdown testing not using conditions #
###################################################################
--disable_result_log
SET @min_start_lsn=
        (SELECT MIN(start_lsn)
                FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);

SET @max_end_lsn=
        (SELECT MAX(end_lsn)
                FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);

SET @cond_test_max_start_lsn=
        (SELECT MAX(start_lsn)
                FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);
                
SET @cond_test_pages_count=
	(SELECT count(*)
		FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
		GROUP BY end_lsn
		ORDER BY end_lsn DESC
		LIMIT 1);
--enable_result_log

SET GLOBAL INNODB_MAX_CHANGED_PAGES = 0;
--echo Total number of changed pages is smaller than reasonable limit (should be 1):
eval SELECT COUNT(DISTINCT PAGE_ID) < 10
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = $t1_space_id;

--echo Check if the maximum page id is less than resonable limit (should be 1):
eval SELECT MAX(PAGE_ID) < 10
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = $t1_space_id;

--echo Check that the combination of the two above does not violate the pigeon hole principle (should be 1):
eval SELECT MAX(PAGE_ID) + 1 >= COUNT(DISTINCT PAGE_ID)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = $t1_space_id;
--enable_query_log

###########################################################
# The records where START_LSN >= END_LSN should be absent #
###########################################################
SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= END_LSN;

# Test for https://bugs.launchpad.net/percona-server/+bug/1202252
# and https://mariadb.atlassian.net/browse/MDEV-4791: ICP crashes for
# start_lsn < X AND end_lsn > Y, if X < Y
SELECT * FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN < 10 AND END_LSN > 20;

######################################################
# Check if condition pushdown doesn't break anything #
######################################################
--echo ICP tests (all should be 1):

# Baseline as ICP currently does not support equality
SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE END_LSN = @max_end_lsn;
  
SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN > (@max_end_lsn - 1) AND
  END_LSN < (@max_end_lsn + 1);

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN >= @max_end_lsn AND
  END_LSN <= @max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  (@max_end_lsn - 1) < END_LSN AND
  @max_end_lsn >= END_LSN;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN <= @max_end_lsn AND
  END_LSN >= @max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > (@cond_test_max_start_lsn - 1);

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn AND
  END_LSN <= @max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > (@cond_test_max_start_lsn - 1) AND
  END_LSN <= @max_end_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn AND
  END_LSN < (@max_end_lsn + 1);
  
SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN >= @cond_test_max_start_lsn AND
  END_LSN >= @cond_test_max_start_lsn;

SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  @cond_test_max_start_lsn <= START_LSN AND
  @max_end_lsn >= END_LSN;

# Empty range
SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > @cond_test_max_lsn AND
  END_LSN < @cond_test_max_lsn;

SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN > @cond_test_max_lsn + 10 AND
  END_LSN < @cond_test_max_lsn - 10;

SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN <= (@min_start_lsn - 1);

SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  START_LSN < @min_start_lsn;

SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN > @max_end_lsn;

SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN >= (@max_end_lsn + 1);
      
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN = (@min_start_lsn - 1);

# Queries from a MariaDB patch for https://mariadb.atlassian.net/browse/MDEV-4791
# with various conditions that are not supported by ICP
# All must return empty set
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN < @min_start_lsn OR END_LSN > @max_end_lsn;

SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN <= (@min_start_lsn - 1) OR END_LSN > @max_end_lsn;

SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN < @min_start_lsn OR END_LSN >= (@max_end_lsn + 1);

SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN <= (@min_start_lsn - 1) OR END_LSN >= (@max_end_lsn + 1);

SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE (START_LSN > @cond_test_max_lsn AND END_LSN < @cond_test_max_lsn)
  OR (START_LSN > @cond_test_max_lsn + 10 AND END_LSN < @cond_test_max_lsn - 10);
  
# Test the combination of ICP and bitmap file selection
--disable_query_log
--disable_result_log
SET @total_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);

eval SET @r1_r4_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r1_start AND END_LSN <= $r4_end);

eval SET @r1_r3_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r1_start AND END_LSN <= $r3_end);

eval SET @r1_r2_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r1_start AND END_LSN <= $r2_end);

eval SET @r2_r4_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r2_end AND END_LSN <= $r4_end);
  
eval SET @r2_r3_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r2_end AND END_LSN <= $r3_end);

eval SET @r3_r4_pages= (SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= $r3_end AND END_LSN <= $r4_end);
--enable_result_log
--enable_query_log

SELECT @total_pages=@r1_r4_pages AS should_be_1;
SELECT @r1_r2_pages+@r2_r3_pages+@r3_r4_pages=@r1_r4_pages AS should_be_1;
SELECT @r1_r2_pages+@r2_r3_pages=@r1_r3_pages AS should_be_1;
SELECT @r2_r3_pages+@r3_r4_pages=@r2_r4_pages AS should_be_1;

################################################
# Check how limit for maximum rows count works #
################################################

SET GLOBAL INNODB_MAX_CHANGED_PAGES = 1;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;

SET GLOBAL INNODB_MAX_CHANGED_PAGES = 5;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;

eval SET GLOBAL INNODB_MAX_CHANGED_PAGES = $old_max_changed_pages;

#
# Test that I_S.INNODB_CHANGED_PAGES can be queried with the log tracking disabled
# (bug 1185304)
#

# We have to skip ICP_COPY bitmap writes.  Thus all the I_S queries from
# this point are limited to the max_end_lsn.

# Save the copy of current table contents
CREATE TABLE ICP_COPY (
       space_id INT(11) NOT NULL,
       page_id INT(11) NOT NULL,
       start_lsn BIGINT(21) NOT NULL,
       end_lsn BIGINT(21) NOT NULL,
       INDEX page_id(space_id, page_id)) ENGINE=InnoDB;

INSERT INTO ICP_COPY SELECT * FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
       WHERE END_LSN <= @max_end_lsn;

# Restart with log tracking disabled       
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 10
--source include/wait_until_disconnected.inc
--enable_reconnect
--exec echo "restart:--innodb-track-changed-pages=FALSE" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc

SELECT @@global.innodb_track_changed_pages;

let $icp_1_checksum= `CHECKSUM TABLE ICP_COPY`;

SET @max_end_lsn= (SELECT MAX(end_lsn) FROM ICP_COPY);

# Read the table again
TRUNCATE TABLE ICP_COPY;

INSERT INTO ICP_COPY SELECT * FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
       WHERE END_LSN <= @max_end_lsn;

# Compare the checksums of both reads
let $icp_2_checksum= `CHECKSUM TABLE ICP_COPY`;
--disable_query_log
--echo Check that INNODB_CHANGED_PAGES copies checksum the same (should be 1):
eval SELECT "$icp_1_checksum" LIKE "$icp_2_checksum" AS should_be_1;
--enable_query_log

call mtr.add_suppression("but the last checkpoint LSN is");
--source include/restart_mysqld.inc

SELECT @@global.innodb_track_changed_pages;

#
# Test for
# - bug 1179974 (INFORMATION_SCHEMA.INNODB_CHANGED_PAGES query fails server
#   with an I/O error if a bitmap file in the middle of requested range is missing)
# - bug 1185040 (INFORMATION_SCHEMA.INNODB_CHANGED_PAGES_QUERY should return a
#   warning if the result set is partial)
#

let $MYSQLD_DATADIR= `select @@datadir`;
--replace_regex /_[[:digit:]]+\.xdb$//
list_files $MYSQLD_DATADIR ib_modified_log_4_*;

remove_files_wildcard $MYSQLD_DATADIR ib_modified_log_4_*.xdb;

--replace_regex /_[[:digit:]]+\.xdb$//
list_files $MYSQLD_DATADIR ib_modified_log_4_*;

--error ER_CANT_FIND_SYSTEM_REC
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN > 10000;

DROP TABLE T1, ICP_COPY;
